div
  input#AMC_AOUseAnimate(type='checkbox') 
  | Use Animation
  form#AMC_AODataSource
    | Source
    input(type='radio' name='source' value='HK' onclick='AMC_AOSelectHKSource();' checked='checked')  
    | HK 
    input(type='radio' name='source' value='PX4' onclick='AMC_AOSelectPX4Source();' ) 
    | PX4 
div#radar.widget-body
    script.
    
        AMC_AOSelectHKSource();
        
        function AMC_AOSelectHKSource() {        
            session.unsubscribe([{name:'/PX4/PX4_ActuatorOutputsMsg_t/Output'}]);
            
            avgTimeDelta = 0;
            sampleQueue = [];
            
            session.subscribe([{name:'/AMC/AMC_HkTlm_t/Output'}], processParams );
        }
        
        function AMC_AOSelectPX4Source() {
            session.unsubscribe([{name:'/AMC/AMC_HkTlm_t/Output'}]);
            
            avgTimeDelta = 0;
            sampleQueue = [];
            
            session.subscribe([{name:'/PX4/PX4_ActuatorOutputsMsg_t/Output'}], processParams );
        }
        
        function processParams(params) {
            var sample = params[0].sample[0];
            var allMotorSpeeds = sample.value;
            
            var motorSpeeds = allMotorSpeeds.slice(0, 6);
            
            if(sampleQueue.length >= maxSampleQueueSize) {
                sampleQueue.shift();
            }
            
            sampleQueue.push(Date.parse(sample.gndTime));
            
            var prevTime = 0;
            var timeSum = 0;
            for(var i = 0; i < sampleQueue.length; ++i) {
                if(prevTime != 0) {
                    timeSum += sampleQueue[i] - prevTime;
                }
                prevTime = sampleQueue[i];
            }
            
            avgTimeDelta = timeSum / (sampleQueue.length - 1);
            
            drawData(motorSpeeds);
        }
    
        const canvasHeight = 500;
        const canvasWidth = 500;
        const canvasMargin = 5;
        const ringCount = 5;
        const spokeCount = 6;
        const spokeRotation = (360 / spokeCount) / 2;
        const axisColor = '#fff';
        const dataRotation = spokeRotation;
        const dataFillColor = '#0f0';
        const dataStrokeColor = '#8f8';
        const dataInMinValue = -1.0;
        const dataInMaxValue = 1.0;
        const maxSampleQueueSize = 10;
        const centroidMarkerRadius = 20;
        
        const ringSpacing = (canvasWidth - canvasMargin) / ringCount;
        const maxDataAngularLength = (ringSpacing * ringCount) / 2;
        const spokeAngularSpacing = 360 / spokeCount;
        const spokeAngularLength = (ringSpacing * ringCount) / 2;
        const dataInRange = dataInMaxValue - dataInMinValue;
        
        var sampleQueue = [];
        var avgTimeDelta = 1000;
        
        var draw = SVG('radar').viewbox(-250, -250, canvasHeight, canvasWidth);
            
        var dataBlobGradient = draw.gradient('radial', function(stop) {
            stop.at(0.0, '#0f0');
            stop.at(0.5, '#0f0');
            stop.at(0.75,  '#ff0');
            stop.at(1.0, '#f00');
        });
        
        dataBlobGradient.attr({gradientUnits: 'userSpaceOnUse'});
        dataBlobGradient.from(0.5, 0.5);
        dataBlobGradient.to(0.5, 0.5);
        
        var dataBlob = draw.polygon('')
            .stroke(dataStrokeColor)
            .fill(dataBlobGradient);
            
        var centroidMarker = draw.circle(centroidMarkerRadius)
            .stroke('#000')
            .fill('#00f');
        
        var drawAxis = function() {
        
            /* Draw the concentric circles. */   
            var circle = new Array(ringCount); 
            
            for(var i = 0; i < ringCount; i++) {
                var radius = (i+1)*ringSpacing;
                
                circle[i] = draw.circle(radius)
                    .stroke(axisColor)
                    .fill({opacity: 0})
                    .center(0,0);
            }
            
            /* Draw the radial spokes. */
            var spoke = new Array(spokeCount); 
            
            for(var i = 0; i < spokeCount; i++) {
                var angle = (spokeAngularSpacing * i) + spokeRotation;
                
                spoke[i] = draw.line(0, 0, 0, 0 - spokeAngularLength)
                    .stroke(axisColor)
                    .rotate(angle, 0, 0);   
                
            }
        }
        
        var drawData = function(dataIn) {
            var dataCount = dataIn.length;
            
            var dataAngularSpacing = 360 / dataCount;
            
            var polyPoints = new Array(dataCount); 
                        
            for(var i = 0; i < dataCount; i++) {
                var polar = {};
                polar.r = mapDataToDrawLength(dataIn[i]);
                polar.theta = toRadians((dataAngularSpacing * i) + dataRotation - 90);
                
                polyPoints[i] = convertPolarToCartesian(polar);
            }
            
            var centroid = getPolygonCentroid(polyPoints);
            
            dataBlob.finish();
            centroidMarker.finish();
            
            if($('#AMC_AOUseAnimate').is(':checked')) {
                dataBlob.animate(avgTimeDelta).plot(polyPoints);
                centroidMarker.animate(avgTimeDelta).center(centroid.x, centroid.y);
            } else {
                dataBlob.plot(polyPoints);
                centroidMarker.center(centroid.x, centroid.y);
            }
            
            
        }
        
        function mapDataToDrawLength(value) {
            return (spokeAngularLength) * (value - dataInMinValue) / (dataInRange);
        }
        
        function convertPolarToCartesian(polar) {
            var cart = {x: 0, y: 0};
            
            cart.x = polar.r * Math.cos(polar.theta);
            cart.y = polar.r * Math.sin(polar.theta);
            
            return cart;
        }
        
        function toDegrees(angle) {
            return angle * (180 / Math.PI);
        }
        
        function toRadians(angle) {
            return angle * (Math.PI / 180);
        }

        function getPolygonCentroid(points) { 
            var first = points[0];
            var last = points[points.length-1];
            
            if (first.x != last.x || first.y != last.y) {
                points.push(first);
            }
            
            var twicearea=0;
            var x=0;
            var y=0;
            var nPts = points.length;
            var p1;
            var p2;
            var f;
            
            for ( var i=0, j=nPts-1 ; i<nPts ; j=i++ ) {
                p1 = points[i]; p2 = points[j];
                f = (p1.y - first.y) * (p2.x - first.x) - (p2.y - first.y) * (p1.x - first.x);
                twicearea += f;
                x += (p1.x + p2.x - 2 * first.x) * f;
                y += (p1.y + p2.y - 2 * first.y) * f;
            }
            f = twicearea * 3;
            return { x:x/f + first.x, y:y/f + first.y };
        } 
        
        drawAxis();
