<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="cfe__sb_8h" kind="file" language="C++">
    <compoundname>cfe_sb.h</compoundname>
    <includes local="yes">osconfig.h</includes>
    <includes local="yes">cfe_psp.h</includes>
    <includes refid="common__types_8h" local="yes">common_types.h</includes>
    <includes refid="cfe__mission__cfg_8h" local="yes">cfe_mission_cfg.h</includes>
    <includes local="yes">cfe_platform_cfg.h</includes>
    <includes refid="ccsds_8h" local="yes">ccsds.h</includes>
    <includes refid="cfe__time_8h" local="yes">cfe_time.h</includes>
    <includedby refid="cfe__evs__msg_8h" local="yes">inc/cfe_evs_msg.h</includedby>
    <includedby refid="cfe__evs_8h" local="yes">inc/cfe_evs.h</includedby>
    <includedby refid="cfe_8h" local="yes">inc/cfe.h</includedby>
    <includedby refid="cfe__sb__msg_8h" local="yes">inc/cfe_sb_msg.h</includedby>
    <includedby refid="cfe__es__perf_8h" local="yes">es/cfe_es_perf.h</includedby>
    <includedby refid="cfe__evs__task_8h" local="yes">evs/cfe_evs_task.h</includedby>
    <includedby refid="cfe__sb__priv_8h" local="yes">sb/cfe_sb_priv.h</includedby>
    <incdepgraph>
      <node id="483">
        <label>common_types.h</label>
        <link refid="common__types_8h"/>
      </node>
      <node id="482">
        <label>cfe_psp.h</label>
      </node>
      <node id="486">
        <label>ccsds.h</label>
        <link refid="ccsds_8h"/>
        <childnode refid="483" relation="include">
        </childnode>
        <childnode refid="484" relation="include">
        </childnode>
      </node>
      <node id="487">
        <label>cfe_time.h</label>
        <link refid="cfe__time_8h"/>
        <childnode refid="483" relation="include">
        </childnode>
      </node>
      <node id="484">
        <label>cfe_mission_cfg.h</label>
        <link refid="cfe__mission__cfg_8h"/>
      </node>
      <node id="485">
        <label>cfe_platform_cfg.h</label>
      </node>
      <node id="481">
        <label>osconfig.h</label>
      </node>
      <node id="480">
        <label>inc/cfe_sb.h</label>
        <link refid="cfe_sb.h"/>
        <childnode refid="481" relation="include">
        </childnode>
        <childnode refid="482" relation="include">
        </childnode>
        <childnode refid="483" relation="include">
        </childnode>
        <childnode refid="484" relation="include">
        </childnode>
        <childnode refid="485" relation="include">
        </childnode>
        <childnode refid="486" relation="include">
        </childnode>
        <childnode refid="487" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="494">
        <label>inc/cfe_tbl_filedef.h</label>
        <link refid="cfe__tbl__filedef_8h"/>
      </node>
      <node id="495">
        <label>inc/cfe_tbl_msg.h</label>
        <link refid="cfe__tbl__msg_8h"/>
      </node>
      <node id="502">
        <label>es/cfe_es_log.h</label>
        <link refid="cfe__es__log_8h"/>
      </node>
      <node id="504">
        <label>inc/private/cfe_es_resetdata_typedef.h</label>
        <link refid="cfe__es__resetdata__typedef_8h"/>
      </node>
      <node id="498">
        <label>es/cfe_es_cds_mempool.h</label>
        <link refid="cfe__es__cds__mempool_8h"/>
        <childnode refid="499" relation="include">
        </childnode>
      </node>
      <node id="489">
        <label>inc/cfe_evs_msg.h</label>
        <link refid="cfe__evs__msg_8h"/>
        <childnode refid="490" relation="include">
        </childnode>
        <childnode refid="503" relation="include">
        </childnode>
        <childnode refid="500" relation="include">
        </childnode>
      </node>
      <node id="501">
        <label>sb/cfe_sb_priv.h</label>
        <link refid="cfe__sb__priv_8h"/>
      </node>
      <node id="493">
        <label>es/cfe_es_perf.h</label>
        <link refid="cfe__es__perf_8h"/>
      </node>
      <node id="503">
        <label>inc/private/cfe_evs_log_typedef.h</label>
        <link refid="cfe__evs__log__typedef_8h"/>
        <childnode refid="504" relation="include">
        </childnode>
        <childnode refid="500" relation="include">
        </childnode>
      </node>
      <node id="500">
        <label>evs/cfe_evs_task.h</label>
        <link refid="cfe__evs__task_8h"/>
      </node>
      <node id="499">
        <label>es/cfe_es_cds.h</label>
        <link refid="cfe__es__cds_8h"/>
      </node>
      <node id="488">
        <label>inc/cfe_sb.h</label>
        <link refid="cfe_sb.h"/>
        <childnode refid="489" relation="include">
        </childnode>
        <childnode refid="490" relation="include">
        </childnode>
        <childnode refid="491" relation="include">
        </childnode>
        <childnode refid="505" relation="include">
        </childnode>
        <childnode refid="493" relation="include">
        </childnode>
        <childnode refid="500" relation="include">
        </childnode>
        <childnode refid="501" relation="include">
        </childnode>
      </node>
      <node id="491">
        <label>inc/cfe.h</label>
        <link refid="cfe_8h"/>
        <childnode refid="492" relation="include">
        </childnode>
        <childnode refid="494" relation="include">
        </childnode>
        <childnode refid="495" relation="include">
        </childnode>
        <childnode refid="496" relation="include">
        </childnode>
        <childnode refid="497" relation="include">
        </childnode>
        <childnode refid="502" relation="include">
        </childnode>
      </node>
      <node id="490">
        <label>inc/cfe_evs.h</label>
        <link refid="cfe__evs_8h"/>
        <childnode refid="491" relation="include">
        </childnode>
        <childnode refid="493" relation="include">
        </childnode>
        <childnode refid="500" relation="include">
        </childnode>
      </node>
      <node id="497">
        <label>inc/private/cfe_private.h</label>
        <link refid="cfe__private_8h"/>
        <childnode refid="498" relation="include">
        </childnode>
        <childnode refid="500" relation="include">
        </childnode>
        <childnode refid="501" relation="include">
        </childnode>
      </node>
      <node id="496">
        <label>inc/cfe_time_msg.h</label>
        <link refid="cfe__time__msg_8h"/>
      </node>
      <node id="505">
        <label>inc/cfe_sb_msg.h</label>
        <link refid="cfe__sb__msg_8h"/>
        <childnode refid="501" relation="include">
        </childnode>
      </node>
      <node id="492">
        <label>inc/cfe_es_msg.h</label>
        <link refid="cfe__es__msg_8h"/>
        <childnode refid="493" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="union_c_f_e___s_b___msg__t" prot="public">CFE_SB_Msg_t</innerclass>
    <innerclass refid="struct_c_f_e___s_b___cmd_hdr__t" prot="public">CFE_SB_CmdHdr_t</innerclass>
    <innerclass refid="struct_c_f_e___s_b___tlm_hdr__t" prot="public">CFE_SB_TlmHdr_t</innerclass>
    <innerclass refid="struct_c_f_e___s_b___qos__t" prot="public">CFE_SB_Qos_t</innerclass>
    <innerclass refid="struct_c_f_e___s_b___sender_id__t" prot="public">CFE_SB_SenderId_t</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="cfe__sb_8h_1a0c0ca8cca37a759bd5e68e81e73ce67a" prot="public" static="no">
        <name>CFE_SB_POLL</name>
        <initializer>0</initializer>
        <briefdescription>
<para>Option used with <ref refid="cfe__sb_8h_1a54840fe06aeb08b1e2c8df420474780d" kindref="member">CFE_SB_RcvMsg</ref> to request immediate pipe status. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/cfe_sb.h" line="87" column="9" bodyfile="inc/cfe_sb.h" bodystart="87" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="cfe__sb_8h_1acc9e6f66cd026d1c987c4c3de827366f" prot="public" static="no">
        <name>CFE_SB_PEND_FOREVER</name>
        <initializer>-1</initializer>
        <briefdescription>
<para>Option used with <ref refid="cfe__sb_8h_1a54840fe06aeb08b1e2c8df420474780d" kindref="member">CFE_SB_RcvMsg</ref> to force a wait for next message. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/cfe_sb.h" line="88" column="9" bodyfile="inc/cfe_sb.h" bodystart="88" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="cfe__sb_8h_1a52552eef8a98fa61c13cca7d9406d04c" prot="public" static="no">
        <name>CFE_SB_SUB_ENTRIES_PER_PKT</name>
        <initializer>20</initializer>
        <briefdescription>
<para>Configuration parameter used by SBN App. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/cfe_sb.h" line="89" column="9" bodyfile="inc/cfe_sb.h" bodystart="89" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="cfe__sb_8h_1a28842c3298db0d367a64cb79d56220c6" prot="public" static="no">
        <name>CFE_SB_SUBSCRIPTION</name>
        <initializer>0</initializer>
        <briefdescription>
<para>Subtype specifier used in <ref refid="struct_c_f_e___s_b___sub_rprt_msg__t" kindref="compound">CFE_SB_SubRprtMsg_t</ref> by SBN App. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/cfe_sb.h" line="90" column="9" bodyfile="inc/cfe_sb.h" bodystart="90" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="cfe__sb_8h_1a9471edf830792940448e050b468e619d" prot="public" static="no">
        <name>CFE_SB_UNSUBSCRIPTION</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Subtype specified used in <ref refid="struct_c_f_e___s_b___sub_rprt_msg__t" kindref="compound">CFE_SB_SubRprtMsg_t</ref> by SBN App. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/cfe_sb.h" line="91" column="9" bodyfile="inc/cfe_sb.h" bodystart="91" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="cfe__sb_8h_1aa8d423da541f77cf50bb0930c9254502" prot="public" static="no">
        <name>CFE_BIT</name>
        <param><defname>x</defname></param>
        <initializer>(1 &lt;&lt; (x))</initializer>
        <briefdescription>
<para>Places a one at bit positions 0 - 31. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/cfe_sb.h" line="96" column="9" bodyfile="inc/cfe_sb.h" bodystart="96" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="cfe__sb_8h_1a5d6d389b52264dc361d11be57ab6e434" prot="public" static="no">
        <name>CFE_SET</name>
        <param><defname>i</defname></param>
        <param><defname>x</defname></param>
        <initializer>((i) |= <ref refid="cfe__sb_8h_1aa8d423da541f77cf50bb0930c9254502" kindref="member">CFE_BIT</ref>(x))</initializer>
        <briefdescription>
<para>Sets bit x of i. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/cfe_sb.h" line="97" column="9" bodyfile="inc/cfe_sb.h" bodystart="97" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="cfe__sb_8h_1aca5e2dac34eaa3579ba91a8561e86a7c" prot="public" static="no">
        <name>CFE_CLR</name>
        <param><defname>i</defname></param>
        <param><defname>x</defname></param>
        <initializer>((i) &amp;= ~<ref refid="cfe__sb_8h_1aa8d423da541f77cf50bb0930c9254502" kindref="member">CFE_BIT</ref>(x))</initializer>
        <briefdescription>
<para>Clears bit x of i. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/cfe_sb.h" line="98" column="9" bodyfile="inc/cfe_sb.h" bodystart="98" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="cfe__sb_8h_1ae2177f2ecbc89b694e07123c666d5c91" prot="public" static="no">
        <name>CFE_TST</name>
        <param><defname>i</defname></param>
        <param><defname>x</defname></param>
        <initializer>(((i) &amp; <ref refid="cfe__sb_8h_1aa8d423da541f77cf50bb0930c9254502" kindref="member">CFE_BIT</ref>(x)) != 0)</initializer>
        <briefdescription>
<para><ref refid="common__types_8h_1aa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE(non zero)</ref> if bit x of i is set. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/cfe_sb.h" line="99" column="9" bodyfile="inc/cfe_sb.h" bodystart="99" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="cfe__sb_8h_1aad3e28d791a0e95751e1f1809700375d" prot="public" static="no">
        <name>CFE_SB_SET_MEMADDR</name>
        <param><defname>msgdst</defname></param>
        <param><defname>src</defname></param>
        <initializer>msgdst = (<ref refid="common__types_8h_1abddffd9b6badf27493baed70e95972b4" kindref="member">cpuaddr</ref>)src</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Macro that should be used to set memory addresses within software bus messages. For now this does a straight copy, but in a future revision this may translate the raw memory address into a &quot;safe&quot; integer value. This is particularly important if the message is to be sent off this CPU. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/cfe_sb.h" line="107" column="9" bodyfile="inc/cfe_sb.h" bodystart="107" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="cfe__sb_8h_1ab7885ff31aa86692a89038008125bc96" prot="public" static="no">
        <name>CFE_SB_GET_MEMADDR</name>
        <param><defname>msgsrc</defname></param>
        <initializer>(<ref refid="common__types_8h_1abddffd9b6badf27493baed70e95972b4" kindref="member">cpuaddr</ref>)msgsrc</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Macro that should be used to get memory addresses from software bus messages. This is the inverse operation of CFE_SB_SET_MEMADDR. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/cfe_sb.h" line="113" column="9" bodyfile="inc/cfe_sb.h" bodystart="113" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="cfe__sb_8h_1acc49ae58990b23f72824e1b742c78cb8" prot="public" static="no">
        <name>CFE_SB_CMD_HDR_SIZE</name>
        <initializer>(sizeof(<ref refid="struct_c_f_e___s_b___cmd_hdr__t" kindref="compound">CFE_SB_CmdHdr_t</ref>))</initializer>
        <briefdescription>
<para>Size of <ref refid="struct_c_f_e___s_b___cmd_hdr__t" kindref="compound">CFE_SB_CmdHdr_t</ref> in bytes. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/cfe_sb.h" line="139" column="13" bodyfile="inc/cfe_sb.h" bodystart="139" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="cfe__sb_8h_1abf04f5fc43f637e617096626d357fb79" prot="public" static="no">
        <name>CFE_SB_TLM_HDR_SIZE</name>
        <initializer>(sizeof(<ref refid="struct_c_f_e___s_b___tlm_hdr__t" kindref="compound">CFE_SB_TlmHdr_t</ref>))</initializer>
        <briefdescription>
<para>Size of <ref refid="struct_c_f_e___s_b___tlm_hdr__t" kindref="compound">CFE_SB_TlmHdr_t</ref> in bytes. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/cfe_sb.h" line="140" column="13" bodyfile="inc/cfe_sb.h" bodystart="140" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="cfe__sb_8h_1a04b5b03f0c6a66ece34c3d3727cfc917" prot="public" static="no">
        <type><ref refid="common__types_8h_1a9560e25c315bae45d1ed4e2ce49ce55a" kindref="member">uint32</ref></type>
        <definition>typedef uint32 CFE_SB_TimeOut_t</definition>
        <argsstring></argsstring>
        <name>CFE_SB_TimeOut_t</name>
        <briefdescription>
<para>CFE_SB_TimeOut_t to primitive type definition. </para>        </briefdescription>
        <detaileddescription>
<para>&lt;Internally used by SB in the <ref refid="cfe__sb_8h_1a54840fe06aeb08b1e2c8df420474780d" kindref="member">CFE_SB_RcvMsg</ref> API. Translated from the input parmater named TimeOut which specifies the maximum time in milliseconds that the caller wants to wait for a message.CFE_SB_PipeId_t to primitive type definition</para><para>Software Bus pipe identifier used in many SB APIs </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/cfe_sb.h" line="150" column="1" bodyfile="inc/cfe_sb.h" bodystart="150" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="cfe__sb_8h_1a9e7147bf0798bb7a3ebd165bdbdf320f" prot="public" static="no">
        <type><ref refid="common__types_8h_1adde6aaee8457bee49c2a92621fe22b79" kindref="member">uint8</ref></type>
        <definition>typedef uint8 CFE_SB_PipeId_t</definition>
        <argsstring></argsstring>
        <name>CFE_SB_PipeId_t</name>
        <briefdescription>
<para>CFE_SB_MsgId_t to primitive type definition. </para>        </briefdescription>
        <detaileddescription>
<para>Software Bus message identifier used in many SB APIs </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/cfe_sb.h" line="156" column="1" bodyfile="inc/cfe_sb.h" bodystart="156" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="cfe__sb_8h_1a213323eb4fb69a395a343ad66045ae74" prot="public" static="no">
        <type><ref refid="common__types_8h_1a2e00abb078d312d1d8c4fbcd6be343d8" kindref="member">uint16</ref></type>
        <definition>typedef uint16 CFE_SB_MsgId_t</definition>
        <argsstring></argsstring>
        <name>CFE_SB_MsgId_t</name>
        <briefdescription>
<para>CFE_SB_MsgPtr_t defined as a pointer to an SB Message. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/cfe_sb.h" line="162" column="1" bodyfile="inc/cfe_sb.h" bodystart="162" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="cfe__sb_8h_1ab774c47a48e3b6fb0bdd42fb2cb80ad8" prot="public" static="no">
        <type><ref refid="union_c_f_e___s_b___msg__t" kindref="compound">CFE_SB_Msg_t</ref> *</type>
        <definition>typedef CFE_SB_Msg_t* CFE_SB_MsgPtr_t</definition>
        <argsstring></argsstring>
        <name>CFE_SB_MsgPtr_t</name>
        <briefdescription>
<para>CFE_SB_MsgPayloadPtr_t defined as an opaque pointer to a message Payload portion. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/cfe_sb.h" line="165" column="1" bodyfile="inc/cfe_sb.h" bodystart="165" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="cfe__sb_8h_1a6b281dc368bb649b286691b370417781" prot="public" static="no">
        <type><ref refid="common__types_8h_1adde6aaee8457bee49c2a92621fe22b79" kindref="member">uint8</ref> *</type>
        <definition>typedef uint8* CFE_SB_MsgPayloadPtr_t</definition>
        <argsstring></argsstring>
        <name>CFE_SB_MsgPayloadPtr_t</name>
        <briefdescription>
<para>CFE_SB_ZeroCopyId_t to primitive type definition. </para>        </briefdescription>
        <detaileddescription>
<para>Software Zero Copy handle used in many SB APIs </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/cfe_sb.h" line="168" column="1" bodyfile="inc/cfe_sb.h" bodystart="168" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="cfe__sb_8h_1ad75799a3f44e35ccee00f7b434097798" prot="public" static="no">
        <type><ref refid="common__types_8h_1abddffd9b6badf27493baed70e95972b4" kindref="member">cpuaddr</ref></type>
        <definition>typedef cpuaddr CFE_SB_ZeroCopyHandle_t</definition>
        <argsstring></argsstring>
        <name>CFE_SB_ZeroCopyHandle_t</name>
        <briefdescription>
<para>Quality Of Service Type Definition. </para>        </briefdescription>
        <detaileddescription>
<para>Currently an unused parameter in <ref refid="cfe__sb_8h_1a5939c3681044a3d953d0fe72dd577889" kindref="member">CFE_SB_SubscribeEx</ref> Intended to be used for interprocessor communication only </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/cfe_sb.h" line="174" column="1" bodyfile="inc/cfe_sb.h" bodystart="174" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="cfe__sb_8h_1aa20e8d7fe06a65514dd39e65a7be5ca5" prot="public" static="no" mutable="no">
        <type><ref refid="struct_c_f_e___s_b___qos__t" kindref="compound">CFE_SB_Qos_t</ref></type>
        <definition>CFE_SB_Qos_t CFE_SB_Default_Qos</definition>
        <argsstring></argsstring>
        <name>CFE_SB_Default_Qos</name>
        <briefdescription>
<para>Defines a default priority and reliabilty for off-board routing. </para>        </briefdescription>
        <detaileddescription>
<para>Message Sender Identification Type Definition</para><para>Parameter used in <ref refid="cfe__sb_8h_1abd1d841a3e64941a3ef460572b00f7e4" kindref="member">CFE_SB_GetLastSenderId</ref> API which allows the receiver of a message to validate the sender of the message. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/cfe_sb.h" line="186" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="cfe__sb_8h_1ac169b781c59074e6cbab49325726c4e2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="common__types_8h_1a5eb512da689eec1a7472ab97e2ab6be3" kindref="member">int32</ref></type>
        <definition>int32 CFE_SB_CreatePipe</definition>
        <argsstring>(CFE_SB_PipeId_t *PipeIdPtr, uint16 Depth, const char *PipeName)</argsstring>
        <name>CFE_SB_CreatePipe</name>
        <param>
          <type><ref refid="cfe__sb_8h_1a9e7147bf0798bb7a3ebd165bdbdf320f" kindref="member">CFE_SB_PipeId_t</ref> *</type>
          <declname>PipeIdPtr</declname>
        </param>
        <param>
          <type><ref refid="common__types_8h_1a2e00abb078d312d1d8c4fbcd6be343d8" kindref="member">uint16</ref></type>
          <declname>Depth</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>PipeName</declname>
        </param>
        <briefdescription>
<para>Creates a new software bus pipe. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Description</title><para>This routine creates and initializes an input pipe that the calling application can use to receive software bus messages. By default, no messages are routed to the new pipe. So, the application must use <ref refid="cfe__sb_8h_1afc2c2db1a504f544b430f33f28be769b" kindref="member">CFE_SB_Subscribe()</ref> to specify which messages it wants to receive on this pipe.</para></simplesect>
<simplesect kind="par"><title>Assumptions, External Events, and Notes:</title><para>None</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">PipeIdPtr</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a variable of type <ref refid="cfe__sb_8h_1a9e7147bf0798bb7a3ebd165bdbdf320f" kindref="member">CFE_SB_PipeId_t</ref>, which will be filled in with the pipe ID information by the <ref refid="cfe__sb_8h_1ac169b781c59074e6cbab49325726c4e2" kindref="member">CFE_SB_CreatePipe</ref> routine.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">Depth</parametername>
</parameternamelist>
<parameterdescription>
<para>The maximum number of messages that will be allowed on this pipe at one time.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">PipeName</parametername>
</parameternamelist>
<parameterdescription>
<para>A string to be used to identify this pipe in error messages and routing information telemetry. The string must be no longer than #OS_MAX_API_NAME. Longer strings will be truncated.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">*PipeIdPtr</parametername>
</parameternamelist>
<parameterdescription>
<para>The identifier for the created pipe.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><table rows="4" cols="2"><row>
<entry thead="no"><para><ref refid="cfe__error_8h_1ab2b6b188c32c70b8ca0578b7a7bc091b" kindref="member">CFE_SUCCESS</ref> </para></entry><entry thead="no"><para>Operation was performed successfully  </para></entry></row>
<row>
<entry thead="no"><para><ref refid="cfe__error_8h_1a1a813e981c067fe87245b89c4117101d" kindref="member">CFE_SB_BAD_ARGUMENT</ref> </para></entry><entry thead="no"><para>A parameter given by a caller to a Software Bus API did not pass validation checks.  </para></entry></row>
<row>
<entry thead="no"><para><ref refid="cfe__error_8h_1af72c6ae680c03227ba2263580157745a" kindref="member">CFE_SB_MAX_PIPES_MET</ref> </para></entry><entry thead="no"><para>This error code will be returned from <ref refid="cfe__sb_8h_1ac169b781c59074e6cbab49325726c4e2" kindref="member">CFE_SB_CreatePipe</ref> when the SB cannot accomodate the request to create a pipe because the maximum number of pipes (#CFE_SB_MAX_PIPES) are in use. This configuration parameter is defined in the cfe_platform_cfg.h file.  </para></entry></row>
<row>
<entry thead="no"><para><ref refid="cfe__error_8h_1a862a08f1f8c99a989efe62b36947f087" kindref="member">CFE_SB_PIPE_CR_ERR</ref> </para></entry><entry thead="no"><para>The maximum number of queues(#OS_MAX_QUEUES) are in use. Or possibly a lower level problem with creating the underlying queue has occurred such as a lack of memory. If the latter is the problem, the status code displayed in the event must be tracked.  </para></entry></row>
</table>
</para></simplesect>
<simplesect kind="see"><para><ref refid="cfe__sb_8h_1a268a5a36f7628873472456e02565bfcf" kindref="member">CFE_SB_DeletePipe</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/cfe_sb.h" line="239" column="1"/>
      </memberdef>
      <memberdef kind="function" id="cfe__sb_8h_1a268a5a36f7628873472456e02565bfcf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="common__types_8h_1a5eb512da689eec1a7472ab97e2ab6be3" kindref="member">int32</ref></type>
        <definition>int32 CFE_SB_DeletePipe</definition>
        <argsstring>(CFE_SB_PipeId_t PipeId)</argsstring>
        <name>CFE_SB_DeletePipe</name>
        <param>
          <type><ref refid="cfe__sb_8h_1a9e7147bf0798bb7a3ebd165bdbdf320f" kindref="member">CFE_SB_PipeId_t</ref></type>
          <declname>PipeId</declname>
        </param>
        <briefdescription>
<para>Delete a software bus pipe. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Description</title><para>This routine deletes an input pipe and cleans up all data structures associated with the pipe. All subscriptions made for this pipe by calls to <ref refid="cfe__sb_8h_1afc2c2db1a504f544b430f33f28be769b" kindref="member">CFE_SB_Subscribe</ref> will be automatically removed from the SB routing tables. Any messages in the pipe will be discarded. Applications must call this routine for all of their SB pipes as part of their orderly shutdown process.</para></simplesect>
<simplesect kind="par"><title>Assumptions, External Events, and Notes:</title><para>None</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">PipeId</parametername>
</parameternamelist>
<parameterdescription>
<para>The pipe ID (obtained previously from <ref refid="cfe__sb_8h_1ac169b781c59074e6cbab49325726c4e2" kindref="member">CFE_SB_CreatePipe</ref>) of the pipe to be deleted.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><table rows="2" cols="2"><row>
<entry thead="no"><para><ref refid="cfe__error_8h_1ab2b6b188c32c70b8ca0578b7a7bc091b" kindref="member">CFE_SUCCESS</ref> </para></entry><entry thead="no"><para>Operation was performed successfully  </para></entry></row>
<row>
<entry thead="no"><para><ref refid="cfe__error_8h_1a1a813e981c067fe87245b89c4117101d" kindref="member">CFE_SB_BAD_ARGUMENT</ref> </para></entry><entry thead="no"><para>A parameter given by a caller to a Software Bus API did not pass validation checks.  </para></entry></row>
</table>
</para></simplesect>
<simplesect kind="see"><para><ref refid="cfe__sb_8h_1ac169b781c59074e6cbab49325726c4e2" kindref="member">CFE_SB_CreatePipe</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/cfe_sb.h" line="268" column="1"/>
      </memberdef>
      <memberdef kind="function" id="cfe__sb_8h_1a5939c3681044a3d953d0fe72dd577889" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="common__types_8h_1a5eb512da689eec1a7472ab97e2ab6be3" kindref="member">int32</ref></type>
        <definition>int32 CFE_SB_SubscribeEx</definition>
        <argsstring>(CFE_SB_MsgId_t MsgId, CFE_SB_PipeId_t PipeId, CFE_SB_Qos_t Quality, uint16 MsgLim)</argsstring>
        <name>CFE_SB_SubscribeEx</name>
        <param>
          <type><ref refid="cfe__sb_8h_1a213323eb4fb69a395a343ad66045ae74" kindref="member">CFE_SB_MsgId_t</ref></type>
          <declname>MsgId</declname>
        </param>
        <param>
          <type><ref refid="cfe__sb_8h_1a9e7147bf0798bb7a3ebd165bdbdf320f" kindref="member">CFE_SB_PipeId_t</ref></type>
          <declname>PipeId</declname>
        </param>
        <param>
          <type><ref refid="struct_c_f_e___s_b___qos__t" kindref="compound">CFE_SB_Qos_t</ref></type>
          <declname>Quality</declname>
        </param>
        <param>
          <type><ref refid="common__types_8h_1a2e00abb078d312d1d8c4fbcd6be343d8" kindref="member">uint16</ref></type>
          <declname>MsgLim</declname>
        </param>
        <briefdescription>
<para>Subscribe to a message on the software bus. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Description</title><para>This routine adds the specified pipe to the destination list associated with the specified message ID.</para></simplesect>
<simplesect kind="par"><title>Assumptions, External Events, and Notes:</title><para>Note: As subscriptions are received, the destinations are added to the head of a linked list. During the sending of a message, the list is traversed beginning at the head of the list. Therefore the message will first be sent to the last subscriber. If an application has timing constraints and needs to receive a message in the shortest possible time, the developer may consider holding off its subscription until other applications have subscribed to the message.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">MsgId</parametername>
</parameternamelist>
<parameterdescription>
<para>The message ID of the message to be subscribed to.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">PipeId</parametername>
</parameternamelist>
<parameterdescription>
<para>The pipe ID of the pipe the subscribed message should be sent to.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">Quality</parametername>
</parameternamelist>
<parameterdescription>
<para>The requested Quality of Service (QoS) required of the messages. Most callers will use <ref refid="cfe__sb_8h_1aa20e8d7fe06a65514dd39e65a7be5ca5" kindref="member">CFE_SB_Default_Qos</ref> for this parameter.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">MsgLim</parametername>
</parameternamelist>
<parameterdescription>
<para>The maximum number of messages with this Message ID to allow in this pipe at the same time.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><table rows="5" cols="2"><row>
<entry thead="no"><para><ref refid="cfe__error_8h_1ab2b6b188c32c70b8ca0578b7a7bc091b" kindref="member">CFE_SUCCESS</ref> </para></entry><entry thead="no"><para>Operation was performed successfully  </para></entry></row>
<row>
<entry thead="no"><para><ref refid="cfe__error_8h_1a4805de4690c87ca5299eb8a0be1226a1" kindref="member">CFE_SB_MAX_MSGS_MET</ref> </para></entry><entry thead="no"><para>Will be returned when calling one of the SB subscription API&apos;s if the SB routing table cannot accomodate another unique message ID because the platform configuration parameter #CFE_SB_MAX_MSG_IDS has been met.  </para></entry></row>
<row>
<entry thead="no"><para><ref refid="cfe__error_8h_1aa11b3471244f9f583d03d27156d206e1" kindref="member">CFE_SB_MAX_DESTS_MET</ref> </para></entry><entry thead="no"><para>Will be returned when calling one of the SB subscription API&apos;s if the SB routing table cannot accomodate another destination for a particular the given message ID. This occurs when the number of destinations in use meets the platform configuration parameter #CFE_SB_MAX_DEST_PER_PKT.  </para></entry></row>
<row>
<entry thead="no"><para><ref refid="cfe__error_8h_1a1a813e981c067fe87245b89c4117101d" kindref="member">CFE_SB_BAD_ARGUMENT</ref> </para></entry><entry thead="no"><para>A parameter given by a caller to a Software Bus API did not pass validation checks.  </para></entry></row>
<row>
<entry thead="no"><para><ref refid="cfe__error_8h_1ac8a1a1216249eea00644fb0b52d4078b" kindref="member">CFE_SB_BUF_ALOC_ERR</ref> </para></entry><entry thead="no"><para>This error code will be returned from <ref refid="cfe__sb_8h_1a91b4b63f7d168bd78dc92d894ad7f77d" kindref="member">CFE_SB_SendMsg</ref> when the memory in the SB message buffer pool has been depleted. The amount of memory in the pool is dictated by the configuration parameter #CFE_SB_BUF_MEMORY_BYTES specified in the cfe_platform_cfg.h file. Also the memory statistics, including current utilization figures and high water marks for the SB Buffer memory pool can be monitored by sending a Software Bus command to send the SB statistics packet.  </para></entry></row>
</table>
</para></simplesect>
<simplesect kind="see"><para><ref refid="cfe__sb_8h_1afc2c2db1a504f544b430f33f28be769b" kindref="member">CFE_SB_Subscribe</ref>, <ref refid="cfe__sb_8h_1a72139ef72948ee8dddc4fe17eb174c22" kindref="member">CFE_SB_SubscribeLocal</ref>, <ref refid="cfe__sb_8h_1a70ea901e65f03221e3787d73733db060" kindref="member">CFE_SB_Unsubscribe</ref>, <ref refid="cfe__sb_8h_1a2d9017dba160c86fd79fd386201753be" kindref="member">CFE_SB_UnsubscribeLocal</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/cfe_sb.h" line="309" column="1"/>
      </memberdef>
      <memberdef kind="function" id="cfe__sb_8h_1afc2c2db1a504f544b430f33f28be769b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="common__types_8h_1a5eb512da689eec1a7472ab97e2ab6be3" kindref="member">int32</ref></type>
        <definition>int32 CFE_SB_Subscribe</definition>
        <argsstring>(CFE_SB_MsgId_t MsgId, CFE_SB_PipeId_t PipeId)</argsstring>
        <name>CFE_SB_Subscribe</name>
        <param>
          <type><ref refid="cfe__sb_8h_1a213323eb4fb69a395a343ad66045ae74" kindref="member">CFE_SB_MsgId_t</ref></type>
          <declname>MsgId</declname>
        </param>
        <param>
          <type><ref refid="cfe__sb_8h_1a9e7147bf0798bb7a3ebd165bdbdf320f" kindref="member">CFE_SB_PipeId_t</ref></type>
          <declname>PipeId</declname>
        </param>
        <briefdescription>
<para>Subscribe to a message on the software bus with default parameters. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Description</title><para>This routine adds the specified pipe to the destination list for the specified message ID. This is the same as <ref refid="cfe__sb_8h_1a5939c3681044a3d953d0fe72dd577889" kindref="member">CFE_SB_SubscribeEx</ref> with the Quality field set to <ref refid="cfe__sb_8h_1aa20e8d7fe06a65514dd39e65a7be5ca5" kindref="member">CFE_SB_Default_Qos</ref> and MsgLim set to #CFE_SB_DEFAULT_MSG_LIMIT (4).</para></simplesect>
<simplesect kind="par"><title>Assumptions, External Events, and Notes:</title><para>Note: As subscriptions are received, the destinations are added to the head of a linked list. During the sending of a message, the list is traversed beginning at the head of the list. Therefore the message will first be sent to the last subscriber. If an application has timing constraints and needs to receive a message in the shortest possible time, the developer may consider holding off its subscription until other applications have subscribed to the message.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">MsgId</parametername>
</parameternamelist>
<parameterdescription>
<para>The message ID of the message to be subscribed to.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">PipeId</parametername>
</parameternamelist>
<parameterdescription>
<para>The pipe ID of the pipe the subscribed message should be sent to.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><table rows="5" cols="2"><row>
<entry thead="no"><para><ref refid="cfe__error_8h_1ab2b6b188c32c70b8ca0578b7a7bc091b" kindref="member">CFE_SUCCESS</ref> </para></entry><entry thead="no"><para>Operation was performed successfully  </para></entry></row>
<row>
<entry thead="no"><para><ref refid="cfe__error_8h_1a4805de4690c87ca5299eb8a0be1226a1" kindref="member">CFE_SB_MAX_MSGS_MET</ref> </para></entry><entry thead="no"><para>Will be returned when calling one of the SB subscription API&apos;s if the SB routing table cannot accomodate another unique message ID because the platform configuration parameter #CFE_SB_MAX_MSG_IDS has been met.  </para></entry></row>
<row>
<entry thead="no"><para><ref refid="cfe__error_8h_1aa11b3471244f9f583d03d27156d206e1" kindref="member">CFE_SB_MAX_DESTS_MET</ref> </para></entry><entry thead="no"><para>Will be returned when calling one of the SB subscription API&apos;s if the SB routing table cannot accomodate another destination for a particular the given message ID. This occurs when the number of destinations in use meets the platform configuration parameter #CFE_SB_MAX_DEST_PER_PKT.  </para></entry></row>
<row>
<entry thead="no"><para><ref refid="cfe__error_8h_1a1a813e981c067fe87245b89c4117101d" kindref="member">CFE_SB_BAD_ARGUMENT</ref> </para></entry><entry thead="no"><para>A parameter given by a caller to a Software Bus API did not pass validation checks.  </para></entry></row>
<row>
<entry thead="no"><para><ref refid="cfe__error_8h_1ac8a1a1216249eea00644fb0b52d4078b" kindref="member">CFE_SB_BUF_ALOC_ERR</ref> </para></entry><entry thead="no"><para>This error code will be returned from <ref refid="cfe__sb_8h_1a91b4b63f7d168bd78dc92d894ad7f77d" kindref="member">CFE_SB_SendMsg</ref> when the memory in the SB message buffer pool has been depleted. The amount of memory in the pool is dictated by the configuration parameter #CFE_SB_BUF_MEMORY_BYTES specified in the cfe_platform_cfg.h file. Also the memory statistics, including current utilization figures and high water marks for the SB Buffer memory pool can be monitored by sending a Software Bus command to send the SB statistics packet.  </para></entry></row>
</table>
</para></simplesect>
<simplesect kind="see"><para><ref refid="cfe__sb_8h_1a5939c3681044a3d953d0fe72dd577889" kindref="member">CFE_SB_SubscribeEx</ref>, <ref refid="cfe__sb_8h_1a72139ef72948ee8dddc4fe17eb174c22" kindref="member">CFE_SB_SubscribeLocal</ref>, <ref refid="cfe__sb_8h_1a70ea901e65f03221e3787d73733db060" kindref="member">CFE_SB_Unsubscribe</ref>, <ref refid="cfe__sb_8h_1a2d9017dba160c86fd79fd386201753be" kindref="member">CFE_SB_UnsubscribeLocal</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/cfe_sb.h" line="348" column="1"/>
      </memberdef>
      <memberdef kind="function" id="cfe__sb_8h_1a72139ef72948ee8dddc4fe17eb174c22" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="common__types_8h_1a5eb512da689eec1a7472ab97e2ab6be3" kindref="member">int32</ref></type>
        <definition>int32 CFE_SB_SubscribeLocal</definition>
        <argsstring>(CFE_SB_MsgId_t MsgId, CFE_SB_PipeId_t PipeId, uint16 MsgLim)</argsstring>
        <name>CFE_SB_SubscribeLocal</name>
        <param>
          <type><ref refid="cfe__sb_8h_1a213323eb4fb69a395a343ad66045ae74" kindref="member">CFE_SB_MsgId_t</ref></type>
          <declname>MsgId</declname>
        </param>
        <param>
          <type><ref refid="cfe__sb_8h_1a9e7147bf0798bb7a3ebd165bdbdf320f" kindref="member">CFE_SB_PipeId_t</ref></type>
          <declname>PipeId</declname>
        </param>
        <param>
          <type><ref refid="common__types_8h_1a2e00abb078d312d1d8c4fbcd6be343d8" kindref="member">uint16</ref></type>
          <declname>MsgLim</declname>
        </param>
        <briefdescription>
<para>Subscribe to a message while keeping the request local to a cpu. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Description</title><para>This routine adds the specified pipe to the destination list for the specified message ID. This is similar to <ref refid="cfe__sb_8h_1a5939c3681044a3d953d0fe72dd577889" kindref="member">CFE_SB_SubscribeEx</ref> with the Quality field set to <ref refid="cfe__sb_8h_1aa20e8d7fe06a65514dd39e65a7be5ca5" kindref="member">CFE_SB_Default_Qos</ref> and MsgLim set to #CFE_SB_DEFAULT_MSG_LIMIT, but will not report the subscription. Subscription Reporting is enabled for interprocessor communication by way of the Software Bus Network (SBN) Application.</para></simplesect>
<simplesect kind="par"><title>Assumptions, External Events, and Notes:</title><para><itemizedlist>
<listitem><para>This API is typically only used by Software Bus Network (SBN) Application</para></listitem></itemizedlist>
</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">MsgId</parametername>
</parameternamelist>
<parameterdescription>
<para>The message ID of the message to be subscribed to.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">PipeId</parametername>
</parameternamelist>
<parameterdescription>
<para>The pipe ID of the pipe the subscribed message should be sent to.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">MsgLim</parametername>
</parameternamelist>
<parameterdescription>
<para>The maximum number of messages with this Message ID to allow in this pipe at the same time.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><table rows="5" cols="2"><row>
<entry thead="no"><para><ref refid="cfe__error_8h_1ab2b6b188c32c70b8ca0578b7a7bc091b" kindref="member">CFE_SUCCESS</ref> </para></entry><entry thead="no"><para>Operation was performed successfully  </para></entry></row>
<row>
<entry thead="no"><para><ref refid="cfe__error_8h_1a4805de4690c87ca5299eb8a0be1226a1" kindref="member">CFE_SB_MAX_MSGS_MET</ref> </para></entry><entry thead="no"><para>Will be returned when calling one of the SB subscription API&apos;s if the SB routing table cannot accomodate another unique message ID because the platform configuration parameter #CFE_SB_MAX_MSG_IDS has been met.  </para></entry></row>
<row>
<entry thead="no"><para><ref refid="cfe__error_8h_1aa11b3471244f9f583d03d27156d206e1" kindref="member">CFE_SB_MAX_DESTS_MET</ref> </para></entry><entry thead="no"><para>Will be returned when calling one of the SB subscription API&apos;s if the SB routing table cannot accomodate another destination for a particular the given message ID. This occurs when the number of destinations in use meets the platform configuration parameter #CFE_SB_MAX_DEST_PER_PKT.  </para></entry></row>
<row>
<entry thead="no"><para><ref refid="cfe__error_8h_1a1a813e981c067fe87245b89c4117101d" kindref="member">CFE_SB_BAD_ARGUMENT</ref> </para></entry><entry thead="no"><para>A parameter given by a caller to a Software Bus API did not pass validation checks.  </para></entry></row>
<row>
<entry thead="no"><para><ref refid="cfe__error_8h_1ac8a1a1216249eea00644fb0b52d4078b" kindref="member">CFE_SB_BUF_ALOC_ERR</ref> </para></entry><entry thead="no"><para>This error code will be returned from <ref refid="cfe__sb_8h_1a91b4b63f7d168bd78dc92d894ad7f77d" kindref="member">CFE_SB_SendMsg</ref> when the memory in the SB message buffer pool has been depleted. The amount of memory in the pool is dictated by the configuration parameter #CFE_SB_BUF_MEMORY_BYTES specified in the cfe_platform_cfg.h file. Also the memory statistics, including current utilization figures and high water marks for the SB Buffer memory pool can be monitored by sending a Software Bus command to send the SB statistics packet.  </para></entry></row>
</table>
</para></simplesect>
<simplesect kind="see"><para><ref refid="cfe__sb_8h_1afc2c2db1a504f544b430f33f28be769b" kindref="member">CFE_SB_Subscribe</ref>, <ref refid="cfe__sb_8h_1a5939c3681044a3d953d0fe72dd577889" kindref="member">CFE_SB_SubscribeEx</ref>, <ref refid="cfe__sb_8h_1a70ea901e65f03221e3787d73733db060" kindref="member">CFE_SB_Unsubscribe</ref>, <ref refid="cfe__sb_8h_1a2d9017dba160c86fd79fd386201753be" kindref="member">CFE_SB_UnsubscribeLocal</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/cfe_sb.h" line="383" column="1"/>
      </memberdef>
      <memberdef kind="function" id="cfe__sb_8h_1a70ea901e65f03221e3787d73733db060" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="common__types_8h_1a5eb512da689eec1a7472ab97e2ab6be3" kindref="member">int32</ref></type>
        <definition>int32 CFE_SB_Unsubscribe</definition>
        <argsstring>(CFE_SB_MsgId_t MsgId, CFE_SB_PipeId_t PipeId)</argsstring>
        <name>CFE_SB_Unsubscribe</name>
        <param>
          <type><ref refid="cfe__sb_8h_1a213323eb4fb69a395a343ad66045ae74" kindref="member">CFE_SB_MsgId_t</ref></type>
          <declname>MsgId</declname>
        </param>
        <param>
          <type><ref refid="cfe__sb_8h_1a9e7147bf0798bb7a3ebd165bdbdf320f" kindref="member">CFE_SB_PipeId_t</ref></type>
          <declname>PipeId</declname>
        </param>
        <briefdescription>
<para>Remove a subscription to a message on the software bus. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Description</title><para>This routine removes the specified pipe from the destination list for the specified message ID.</para></simplesect>
<simplesect kind="par"><title>Assumptions, External Events, and Notes:</title><para>None</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">MsgId</parametername>
</parameternamelist>
<parameterdescription>
<para>The message ID of the message to be unsubscribed.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">PipeId</parametername>
</parameternamelist>
<parameterdescription>
<para>The pipe ID of the pipe the subscribed message should no longer be sent to.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><table rows="3" cols="2"><row>
<entry thead="no"><para><ref refid="cfe__error_8h_1ab2b6b188c32c70b8ca0578b7a7bc091b" kindref="member">CFE_SUCCESS</ref> </para></entry><entry thead="no"><para>Operation was performed successfully  </para></entry></row>
<row>
<entry thead="no"><para><ref refid="cfe__error_8h_1a0dfe9b4a304487595cefd475aa673530" kindref="member">CFE_SB_NO_SUBSCRIBERS</ref> </para></entry><entry thead="no"><para>This error code is returned by the <ref refid="cfe__sb_8h_1a70ea901e65f03221e3787d73733db060" kindref="member">CFE_SB_Unsubscribe</ref> API if there has not been an entry in the routing tables for the MsgId/PipeId given as parameters.  </para></entry></row>
<row>
<entry thead="no"><para><ref refid="cfe__error_8h_1ab15b9aa23fe6e2cd7239219ace5ec1e7" kindref="member">CFE_SB_INTERNAL_ERR</ref> </para></entry><entry thead="no"><para>This error code will be returned by the <ref refid="cfe__sb_8h_1afc2c2db1a504f544b430f33f28be769b" kindref="member">CFE_SB_Subscribe</ref> API if the code detects an internal index is out of range. The most likely cause would be a Single Event Upset.  </para></entry></row>
</table>
</para></simplesect>
<simplesect kind="see"><para><ref refid="cfe__sb_8h_1afc2c2db1a504f544b430f33f28be769b" kindref="member">CFE_SB_Subscribe</ref>, <ref refid="cfe__sb_8h_1a5939c3681044a3d953d0fe72dd577889" kindref="member">CFE_SB_SubscribeEx</ref>, <ref refid="cfe__sb_8h_1a72139ef72948ee8dddc4fe17eb174c22" kindref="member">CFE_SB_SubscribeLocal</ref>, <ref refid="cfe__sb_8h_1a2d9017dba160c86fd79fd386201753be" kindref="member">CFE_SB_UnsubscribeLocal</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/cfe_sb.h" line="411" column="1"/>
      </memberdef>
      <memberdef kind="function" id="cfe__sb_8h_1a2d9017dba160c86fd79fd386201753be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="common__types_8h_1a5eb512da689eec1a7472ab97e2ab6be3" kindref="member">int32</ref></type>
        <definition>int32 CFE_SB_UnsubscribeLocal</definition>
        <argsstring>(CFE_SB_MsgId_t MsgId, CFE_SB_PipeId_t PipeId)</argsstring>
        <name>CFE_SB_UnsubscribeLocal</name>
        <param>
          <type><ref refid="cfe__sb_8h_1a213323eb4fb69a395a343ad66045ae74" kindref="member">CFE_SB_MsgId_t</ref></type>
          <declname>MsgId</declname>
        </param>
        <param>
          <type><ref refid="cfe__sb_8h_1a9e7147bf0798bb7a3ebd165bdbdf320f" kindref="member">CFE_SB_PipeId_t</ref></type>
          <declname>PipeId</declname>
        </param>
        <briefdescription>
<para>Remove a subscription to a message on the software bus on the current CPU. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Description</title><para>This routine removes the specified pipe from the destination list for the specified message ID on the current CPU.</para></simplesect>
<simplesect kind="par"><title>Assumptions, External Events, and Notes:</title><para><itemizedlist>
<listitem><para>This API is typically only used by Software Bus Network (SBN) Application</para></listitem></itemizedlist>
</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">MsgId</parametername>
</parameternamelist>
<parameterdescription>
<para>The message ID of the message to be unsubscribed.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">PipeId</parametername>
</parameternamelist>
<parameterdescription>
<para>The pipe ID of the pipe the subscribed message should no longer be sent to.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><table rows="3" cols="2"><row>
<entry thead="no"><para><ref refid="cfe__error_8h_1ab2b6b188c32c70b8ca0578b7a7bc091b" kindref="member">CFE_SUCCESS</ref> </para></entry><entry thead="no"><para>Operation was performed successfully  </para></entry></row>
<row>
<entry thead="no"><para><ref refid="cfe__error_8h_1a0dfe9b4a304487595cefd475aa673530" kindref="member">CFE_SB_NO_SUBSCRIBERS</ref> </para></entry><entry thead="no"><para>This error code is returned by the <ref refid="cfe__sb_8h_1a70ea901e65f03221e3787d73733db060" kindref="member">CFE_SB_Unsubscribe</ref> API if there has not been an entry in the routing tables for the MsgId/PipeId given as parameters.  </para></entry></row>
<row>
<entry thead="no"><para><ref refid="cfe__error_8h_1ab15b9aa23fe6e2cd7239219ace5ec1e7" kindref="member">CFE_SB_INTERNAL_ERR</ref> </para></entry><entry thead="no"><para>This error code will be returned by the <ref refid="cfe__sb_8h_1afc2c2db1a504f544b430f33f28be769b" kindref="member">CFE_SB_Subscribe</ref> API if the code detects an internal index is out of range. The most likely cause would be a Single Event Upset.  </para></entry></row>
</table>
</para></simplesect>
<simplesect kind="see"><para><ref refid="cfe__sb_8h_1afc2c2db1a504f544b430f33f28be769b" kindref="member">CFE_SB_Subscribe</ref>, <ref refid="cfe__sb_8h_1a5939c3681044a3d953d0fe72dd577889" kindref="member">CFE_SB_SubscribeEx</ref>, <ref refid="cfe__sb_8h_1a72139ef72948ee8dddc4fe17eb174c22" kindref="member">CFE_SB_SubscribeLocal</ref>, <ref refid="cfe__sb_8h_1a70ea901e65f03221e3787d73733db060" kindref="member">CFE_SB_Unsubscribe</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/cfe_sb.h" line="437" column="1"/>
      </memberdef>
      <memberdef kind="function" id="cfe__sb_8h_1a91b4b63f7d168bd78dc92d894ad7f77d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="common__types_8h_1a5eb512da689eec1a7472ab97e2ab6be3" kindref="member">int32</ref></type>
        <definition>int32 CFE_SB_SendMsg</definition>
        <argsstring>(CFE_SB_Msg_t *MsgPtr)</argsstring>
        <name>CFE_SB_SendMsg</name>
        <param>
          <type><ref refid="union_c_f_e___s_b___msg__t" kindref="compound">CFE_SB_Msg_t</ref> *</type>
          <declname>MsgPtr</declname>
        </param>
        <briefdescription>
<para>Send a software bus message. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Description</title><para>This routine sends the specified message to all subscribers. The software bus will read the message ID from the message header to determine which pipes should receive the message.</para></simplesect>
<simplesect kind="par"><title>Assumptions, External Events, and Notes:</title><para><itemizedlist>
<listitem><para>This routine will not normally wait for the receiver tasks to process the message before returning control to the caller&apos;s task.</para></listitem><listitem><para>However, if a higher priority task is pending and subscribed to this message, that task may get to run before <ref refid="cfe__sb_8h_1a91b4b63f7d168bd78dc92d894ad7f77d" kindref="member">CFE_SB_SendMsg</ref> returns control to the caller.</para></listitem><listitem><para>This function tracks and increments the source sequence counter of a telemetry message.</para></listitem></itemizedlist>
</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">MsgPtr</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the message to be sent. This must point to the first byte of the software bus message header (<ref refid="union_c_f_e___s_b___msg__t" kindref="compound">CFE_SB_Msg_t</ref>).</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><table rows="4" cols="2"><row>
<entry thead="no"><para><ref refid="cfe__error_8h_1ab2b6b188c32c70b8ca0578b7a7bc091b" kindref="member">CFE_SUCCESS</ref> </para></entry><entry thead="no"><para>Operation was performed successfully  </para></entry></row>
<row>
<entry thead="no"><para><ref refid="cfe__error_8h_1a1a813e981c067fe87245b89c4117101d" kindref="member">CFE_SB_BAD_ARGUMENT</ref> </para></entry><entry thead="no"><para>A parameter given by a caller to a Software Bus API did not pass validation checks.  </para></entry></row>
<row>
<entry thead="no"><para><ref refid="cfe__error_8h_1a07f24d1c49358bc9bb0b2d8dd19508bf" kindref="member">CFE_SB_MSG_TOO_BIG</ref> </para></entry><entry thead="no"><para>The size field in the message header indicates the message exceeds the max Software Bus message size. The max size is defined by configuration parameter <ref refid="cfe__mission__cfg_8h_1ac5a1b99c0ee718d0a9c8148e70ddd473" kindref="member">CFE_SB_MAX_SB_MSG_SIZE</ref> in <ref refid="cfe__mission__cfg_8h" kindref="compound">cfe_mission_cfg.h</ref>  </para></entry></row>
<row>
<entry thead="no"><para><ref refid="cfe__error_8h_1ac8a1a1216249eea00644fb0b52d4078b" kindref="member">CFE_SB_BUF_ALOC_ERR</ref> </para></entry><entry thead="no"><para>This error code will be returned from <ref refid="cfe__sb_8h_1a91b4b63f7d168bd78dc92d894ad7f77d" kindref="member">CFE_SB_SendMsg</ref> when the memory in the SB message buffer pool has been depleted. The amount of memory in the pool is dictated by the configuration parameter #CFE_SB_BUF_MEMORY_BYTES specified in the cfe_platform_cfg.h file. Also the memory statistics, including current utilization figures and high water marks for the SB Buffer memory pool can be monitored by sending a Software Bus command to send the SB statistics packet.  </para></entry></row>
</table>
</para></simplesect>
<simplesect kind="see"><para><ref refid="cfe__sb_8h_1a54840fe06aeb08b1e2c8df420474780d" kindref="member">CFE_SB_RcvMsg</ref>, <ref refid="cfe__sb_8h_1afabab99c8bed70a6d74b662f8620866c" kindref="member">CFE_SB_ZeroCopySend</ref>, <ref refid="cfe__sb_8h_1ade2170aac98e2b761332d96e7af88ff1" kindref="member">CFE_SB_PassMsg</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/cfe_sb.h" line="470" column="1"/>
      </memberdef>
      <memberdef kind="function" id="cfe__sb_8h_1ade2170aac98e2b761332d96e7af88ff1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="common__types_8h_1a5eb512da689eec1a7472ab97e2ab6be3" kindref="member">int32</ref></type>
        <definition>int32 CFE_SB_PassMsg</definition>
        <argsstring>(CFE_SB_Msg_t *MsgPtr)</argsstring>
        <name>CFE_SB_PassMsg</name>
        <param>
          <type><ref refid="union_c_f_e___s_b___msg__t" kindref="compound">CFE_SB_Msg_t</ref> *</type>
          <declname>MsgPtr</declname>
        </param>
        <briefdescription>
<para>Passes a software bus message. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Description</title><para>This routine sends the specified message to all subscribers. The software bus will read the message ID from the message header to determine which pipes should receive the message. This routine is intended to pass messages not generated by the sending application.</para></simplesect>
<simplesect kind="par"><title>Assumptions, External Events, and Notes:</title><para><itemizedlist>
<listitem><para>This routine will not normally wait for the receiver tasks to process the message before returning control to the caller&apos;s task.</para></listitem><listitem><para>However, if a higher priority task is pending and subscribed to this message, that task may get to run before <ref refid="cfe__sb_8h_1ade2170aac98e2b761332d96e7af88ff1" kindref="member">CFE_SB_PassMsg</ref> returns control to the caller.</para></listitem><listitem><para>Unlike <ref refid="cfe__sb_8h_1a91b4b63f7d168bd78dc92d894ad7f77d" kindref="member">CFE_SB_SendMsg</ref> this routine will preserve the source sequence counter in a telemetry message.</para></listitem></itemizedlist>
</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">MsgPtr</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the message to be sent. This must point to the first byte of the software bus message header (<ref refid="union_c_f_e___s_b___msg__t" kindref="compound">CFE_SB_Msg_t</ref>).</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><table rows="4" cols="2"><row>
<entry thead="no"><para><ref refid="cfe__error_8h_1ab2b6b188c32c70b8ca0578b7a7bc091b" kindref="member">CFE_SUCCESS</ref> </para></entry><entry thead="no"><para>Operation was performed successfully  </para></entry></row>
<row>
<entry thead="no"><para><ref refid="cfe__error_8h_1a1a813e981c067fe87245b89c4117101d" kindref="member">CFE_SB_BAD_ARGUMENT</ref> </para></entry><entry thead="no"><para>A parameter given by a caller to a Software Bus API did not pass validation checks.  </para></entry></row>
<row>
<entry thead="no"><para><ref refid="cfe__error_8h_1a07f24d1c49358bc9bb0b2d8dd19508bf" kindref="member">CFE_SB_MSG_TOO_BIG</ref> </para></entry><entry thead="no"><para>The size field in the message header indicates the message exceeds the max Software Bus message size. The max size is defined by configuration parameter <ref refid="cfe__mission__cfg_8h_1ac5a1b99c0ee718d0a9c8148e70ddd473" kindref="member">CFE_SB_MAX_SB_MSG_SIZE</ref> in <ref refid="cfe__mission__cfg_8h" kindref="compound">cfe_mission_cfg.h</ref>  </para></entry></row>
<row>
<entry thead="no"><para><ref refid="cfe__error_8h_1ac8a1a1216249eea00644fb0b52d4078b" kindref="member">CFE_SB_BUF_ALOC_ERR</ref> </para></entry><entry thead="no"><para>This error code will be returned from <ref refid="cfe__sb_8h_1a91b4b63f7d168bd78dc92d894ad7f77d" kindref="member">CFE_SB_SendMsg</ref> when the memory in the SB message buffer pool has been depleted. The amount of memory in the pool is dictated by the configuration parameter #CFE_SB_BUF_MEMORY_BYTES specified in the cfe_platform_cfg.h file. Also the memory statistics, including current utilization figures and high water marks for the SB Buffer memory pool can be monitored by sending a Software Bus command to send the SB statistics packet.  </para></entry></row>
</table>
</para></simplesect>
<simplesect kind="see"><para><ref refid="cfe__sb_8h_1a54840fe06aeb08b1e2c8df420474780d" kindref="member">CFE_SB_RcvMsg</ref>, <ref refid="cfe__sb_8h_1afabab99c8bed70a6d74b662f8620866c" kindref="member">CFE_SB_ZeroCopySend</ref>, <ref refid="cfe__sb_8h_1a91b4b63f7d168bd78dc92d894ad7f77d" kindref="member">CFE_SB_SendMsg</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/cfe_sb.h" line="504" column="1"/>
      </memberdef>
      <memberdef kind="function" id="cfe__sb_8h_1a54840fe06aeb08b1e2c8df420474780d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="common__types_8h_1a5eb512da689eec1a7472ab97e2ab6be3" kindref="member">int32</ref></type>
        <definition>int32 CFE_SB_RcvMsg</definition>
        <argsstring>(CFE_SB_MsgPtr_t *BufPtr, CFE_SB_PipeId_t PipeId, int32 TimeOut)</argsstring>
        <name>CFE_SB_RcvMsg</name>
        <param>
          <type><ref refid="cfe__sb_8h_1ab774c47a48e3b6fb0bdd42fb2cb80ad8" kindref="member">CFE_SB_MsgPtr_t</ref> *</type>
          <declname>BufPtr</declname>
        </param>
        <param>
          <type><ref refid="cfe__sb_8h_1a9e7147bf0798bb7a3ebd165bdbdf320f" kindref="member">CFE_SB_PipeId_t</ref></type>
          <declname>PipeId</declname>
        </param>
        <param>
          <type><ref refid="common__types_8h_1a5eb512da689eec1a7472ab97e2ab6be3" kindref="member">int32</ref></type>
          <declname>TimeOut</declname>
        </param>
        <briefdescription>
<para>Receive a message from a software bus pipe. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Description</title><para>This routine retrieves the next message from the specified pipe. If the pipe is empty, this routine will block until either a new message comes in or the timeout value is reached.</para></simplesect>
<simplesect kind="par"><title>Assumptions, External Events, and Notes:</title><para>Note - If an error occurs in this API, the *BufPtr value may be NULL or random. Therefore, it is recommended that the return code be tested for CFE_SUCCESS before processing the message.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">BufPtr</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a local variable of type <ref refid="cfe__sb_8h_1ab774c47a48e3b6fb0bdd42fb2cb80ad8" kindref="member">CFE_SB_MsgPtr_t</ref>. Typically a caller declares a ptr of type <ref refid="union_c_f_e___s_b___msg__t" kindref="compound">CFE_SB_Msg_t</ref> (i.e. <ref refid="union_c_f_e___s_b___msg__t" kindref="compound">CFE_SB_Msg_t</ref> *Ptr) then gives the address of that pointer (&amp;Ptr) as this parmeter. After a successful receipt of a message, *BufPtr will point to the first byte of the software bus message header. This should be used as a read-only pointer (in systems with an MMU, writes to this pointer may cause a memory protection fault). The *BufPtr is valid only until the next call to CFE_SB_RcvMsg for the same pipe.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">PipeId</parametername>
</parameternamelist>
<parameterdescription>
<para>The pipe ID of the pipe containing the message to be obtained.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">TimeOut</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of milliseconds to wait for a new message if the pipe is empty at the time of the call. This can also be set to <ref refid="cfe__sb_8h_1a0c0ca8cca37a759bd5e68e81e73ce67a" kindref="member">CFE_SB_POLL</ref> for a non-blocking receive or <ref refid="cfe__sb_8h_1acc9e6f66cd026d1c987c4c3de827366f" kindref="member">CFE_SB_PEND_FOREVER</ref> to wait forever for a message to arrive.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">*BufPtr</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the message obtained from the pipe. Valid only until the next call to CFE_SB_RcvMsg for the same pipe.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><table rows="5" cols="2"><row>
<entry thead="no"><para><ref refid="cfe__error_8h_1ab2b6b188c32c70b8ca0578b7a7bc091b" kindref="member">CFE_SUCCESS</ref> </para></entry><entry thead="no"><para>Operation was performed successfully  </para></entry></row>
<row>
<entry thead="no"><para><ref refid="cfe__error_8h_1a1a813e981c067fe87245b89c4117101d" kindref="member">CFE_SB_BAD_ARGUMENT</ref> </para></entry><entry thead="no"><para>A parameter given by a caller to a Software Bus API did not pass validation checks.  </para></entry></row>
<row>
<entry thead="no"><para><ref refid="cfe__error_8h_1a68b8b8ed93cecb670c945388a797e970" kindref="member">CFE_SB_TIME_OUT</ref> </para></entry><entry thead="no"><para>In <ref refid="cfe__sb_8h_1a54840fe06aeb08b1e2c8df420474780d" kindref="member">CFE_SB_RcvMsg</ref>, this return value indicates that a packet has not been received in the time given in the &quot;timeout&quot; parameter.  </para></entry></row>
<row>
<entry thead="no"><para><ref refid="cfe__error_8h_1a5975053b3478fa6ff2a2b5a6207bce19" kindref="member">CFE_SB_PIPE_RD_ERR</ref> </para></entry><entry thead="no"><para>This return value indicates an error at the Queue read level. This error typically cannot be corrected by the caller. Some possible causes are: queue was not properly initialized or created, the number of bytes read from the queue was not the number of bytes requested in the read. The queue id is invalid. Similar errors regarding the pipe will be caught by higher level code in the Software Bus.  </para></entry></row>
<row>
<entry thead="no"><para><ref refid="cfe__error_8h_1aa9ebdcf79be28ce49c79c12f20ce53b7" kindref="member">CFE_SB_NO_MESSAGE</ref> </para></entry><entry thead="no"><para>When &quot;Polling&quot; a pipe for a message in <ref refid="cfe__sb_8h_1a54840fe06aeb08b1e2c8df420474780d" kindref="member">CFE_SB_RcvMsg</ref>, this return value indicates that there was not a message on the pipe.  </para></entry></row>
</table>
</para></simplesect>
<simplesect kind="see"><para><ref refid="cfe__sb_8h_1a91b4b63f7d168bd78dc92d894ad7f77d" kindref="member">CFE_SB_SendMsg</ref>, <ref refid="cfe__sb_8h_1afabab99c8bed70a6d74b662f8620866c" kindref="member">CFE_SB_ZeroCopySend</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/cfe_sb.h" line="551" column="1"/>
      </memberdef>
      <memberdef kind="function" id="cfe__sb_8h_1abd1d841a3e64941a3ef460572b00f7e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="common__types_8h_1a9560e25c315bae45d1ed4e2ce49ce55a" kindref="member">uint32</ref></type>
        <definition>uint32 CFE_SB_GetLastSenderId</definition>
        <argsstring>(CFE_SB_SenderId_t **Ptr, CFE_SB_PipeId_t PipeId)</argsstring>
        <name>CFE_SB_GetLastSenderId</name>
        <param>
          <type><ref refid="struct_c_f_e___s_b___sender_id__t" kindref="compound">CFE_SB_SenderId_t</ref> **</type>
          <declname>Ptr</declname>
        </param>
        <param>
          <type><ref refid="cfe__sb_8h_1a9e7147bf0798bb7a3ebd165bdbdf320f" kindref="member">CFE_SB_PipeId_t</ref></type>
          <declname>PipeId</declname>
        </param>
        <briefdescription>
<para>Retrieve the application Info of the sender for the last message. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Description</title><para>This routine can be used after a successful <ref refid="cfe__sb_8h_1a54840fe06aeb08b1e2c8df420474780d" kindref="member">CFE_SB_RcvMsg</ref> call to find out which application sent the message that was received.</para></simplesect>
<simplesect kind="par"><title>Assumptions, External Events, and Notes:</title><para>Note - If an error occurs in this API, the *Ptr value may be NULL or random. Therefore, it is recommended that the return code be tested for CFE_SUCCESS before reading the sender information.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">Ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a local variable of type <ref refid="struct_c_f_e___s_b___sender_id__t" kindref="compound">CFE_SB_SenderId_t</ref>. Typically a caller declares a ptr of type <ref refid="struct_c_f_e___s_b___sender_id__t" kindref="compound">CFE_SB_SenderId_t</ref> (i.e. <ref refid="struct_c_f_e___s_b___sender_id__t" kindref="compound">CFE_SB_SenderId_t</ref> *Ptr) then gives the address of that pointer (&amp;Ptr) for this parameter. After a successful call to this API, *Ptr will point to the first byte of the <ref refid="struct_c_f_e___s_b___sender_id__t" kindref="compound">CFE_SB_SenderId_t</ref> structure containing the sender information for the last message received on the given pipe. This should be used as a read-only pointer (in systems with an MMU, writes to this pointer may cause a memory protection fault). The *Ptr is valid only until the next call to CFE_SB_RcvMsg for the same pipe.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">PipeId</parametername>
</parameternamelist>
<parameterdescription>
<para>The pipe ID of the pipe the message was taken from.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><table rows="1" cols="2"><row>
<entry thead="no"><para>The sender&apos;s application ID </para></entry><entry thead="no"><para></para></entry></row>
</table>
</para></simplesect>
<simplesect kind="see"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/cfe_sb.h" line="588" column="1"/>
      </memberdef>
      <memberdef kind="function" id="cfe__sb_8h_1a40630a2f5465cf30206a45c970bb4cc4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="union_c_f_e___s_b___msg__t" kindref="compound">CFE_SB_Msg_t</ref> *</type>
        <definition>CFE_SB_Msg_t* CFE_SB_ZeroCopyGetPtr</definition>
        <argsstring>(uint16 MsgSize, CFE_SB_ZeroCopyHandle_t *BufferHandle)</argsstring>
        <name>CFE_SB_ZeroCopyGetPtr</name>
        <param>
          <type><ref refid="common__types_8h_1a2e00abb078d312d1d8c4fbcd6be343d8" kindref="member">uint16</ref></type>
          <declname>MsgSize</declname>
        </param>
        <param>
          <type><ref refid="cfe__sb_8h_1ad75799a3f44e35ccee00f7b434097798" kindref="member">CFE_SB_ZeroCopyHandle_t</ref> *</type>
          <declname>BufferHandle</declname>
        </param>
        <briefdescription>
<para>Get a buffer pointer to use for &quot;zero copy&quot; SB sends. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Description</title><para>This routine can be used to get a pointer to one of the software bus&apos; internal memory buffers that are used for sending messages. The caller can use this memory buffer to build an SB message, then send it using the <ref refid="cfe__sb_8h_1afabab99c8bed70a6d74b662f8620866c" kindref="member">CFE_SB_ZeroCopySend</ref> function. This interface is more complicated than the normal <ref refid="cfe__sb_8h_1afabab99c8bed70a6d74b662f8620866c" kindref="member">CFE_SB_ZeroCopySend</ref> interface, but it avoids an extra copy of the message from the user&apos;s memory buffer to the software bus internal buffer. The &quot;zero copy&quot; interface can be used to improve performance in high-rate, high-volume software bus traffic.</para></simplesect>
<simplesect kind="par"><title>Assumptions, External Events, and Notes:</title><para><orderedlist>
<listitem><para>The pointer returned by <ref refid="cfe__sb_8h_1a40630a2f5465cf30206a45c970bb4cc4" kindref="member">CFE_SB_ZeroCopyGetPtr</ref> is only good for one call to <ref refid="cfe__sb_8h_1afabab99c8bed70a6d74b662f8620866c" kindref="member">CFE_SB_ZeroCopySend</ref>.</para></listitem><listitem><para>Applications should be written as if <ref refid="cfe__sb_8h_1a40630a2f5465cf30206a45c970bb4cc4" kindref="member">CFE_SB_ZeroCopyGetPtr</ref> is equivalent to a <computeroutput>malloc()</computeroutput> and <ref refid="cfe__sb_8h_1afabab99c8bed70a6d74b662f8620866c" kindref="member">CFE_SB_ZeroCopySend</ref> is equivalent to a <computeroutput>free()</computeroutput>.</para></listitem><listitem><para>Applications must not de-reference the message pointer (for reading or writing) after the call to <ref refid="cfe__sb_8h_1afabab99c8bed70a6d74b662f8620866c" kindref="member">CFE_SB_ZeroCopySend</ref>.</para></listitem></orderedlist>
</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">MsgSize</parametername>
</parameternamelist>
<parameterdescription>
<para>The size of the SB message buffer the caller wants (including the SB message header).</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">BufferHandle</parametername>
</parameternamelist>
<parameterdescription>
<para>A handle that must be supplied when sending or releasing in zero copy mode.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><table rows="1" cols="2"><row>
<entry thead="no"><para>A pointer to a memory buffer that can be used to build one SB message for use with <ref refid="cfe__sb_8h_1afabab99c8bed70a6d74b662f8620866c" kindref="member">CFE_SB_ZeroCopySend</ref>.  </para></entry></row>
</table>
</para></simplesect>
<simplesect kind="see"><para><ref refid="cfe__sb_8h_1a89ec51d1986bec33c5a3b6605f92b04a" kindref="member">CFE_SB_ZeroCopyReleasePtr</ref>, <ref refid="cfe__sb_8h_1afabab99c8bed70a6d74b662f8620866c" kindref="member">CFE_SB_ZeroCopySend</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/cfe_sb.h" line="626" column="1"/>
      </memberdef>
      <memberdef kind="function" id="cfe__sb_8h_1a89ec51d1986bec33c5a3b6605f92b04a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="common__types_8h_1a5eb512da689eec1a7472ab97e2ab6be3" kindref="member">int32</ref></type>
        <definition>int32 CFE_SB_ZeroCopyReleasePtr</definition>
        <argsstring>(CFE_SB_Msg_t *Ptr2Release, CFE_SB_ZeroCopyHandle_t BufferHandle)</argsstring>
        <name>CFE_SB_ZeroCopyReleasePtr</name>
        <param>
          <type><ref refid="union_c_f_e___s_b___msg__t" kindref="compound">CFE_SB_Msg_t</ref> *</type>
          <declname>Ptr2Release</declname>
        </param>
        <param>
          <type><ref refid="cfe__sb_8h_1ad75799a3f44e35ccee00f7b434097798" kindref="member">CFE_SB_ZeroCopyHandle_t</ref></type>
          <declname>BufferHandle</declname>
        </param>
        <briefdescription>
<para>Release an unused &quot;zero copy&quot; buffer pointer. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Description</title><para>This routine can be used to release a pointer to one of the software bus&apos; internal memory buffers.</para></simplesect>
<simplesect kind="par"><title>Assumptions, External Events, and Notes:</title><para><orderedlist>
<listitem><para>This function is not needed for normal &quot;zero copy&quot; transfers. It is needed only for cleanup when an application gets a pointer using <ref refid="cfe__sb_8h_1a40630a2f5465cf30206a45c970bb4cc4" kindref="member">CFE_SB_ZeroCopyGetPtr</ref>, but (due to some error condition) never uses that pointer for a <ref refid="cfe__sb_8h_1afabab99c8bed70a6d74b662f8620866c" kindref="member">CFE_SB_ZeroCopySend</ref></para></listitem></orderedlist>
</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">Ptr2Release</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the SB internal buffer. This must be a pointer returned by a call to <ref refid="cfe__sb_8h_1a40630a2f5465cf30206a45c970bb4cc4" kindref="member">CFE_SB_ZeroCopyGetPtr</ref>, but never used in a call to <ref refid="cfe__sb_8h_1afabab99c8bed70a6d74b662f8620866c" kindref="member">CFE_SB_ZeroCopySend</ref>.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">BufferHandle</parametername>
</parameternamelist>
<parameterdescription>
<para>This must be the handle supplied with the pointer when <ref refid="cfe__sb_8h_1a40630a2f5465cf30206a45c970bb4cc4" kindref="member">CFE_SB_ZeroCopyGetPtr</ref> was called.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><table rows="2" cols="2"><row>
<entry thead="no"><para><ref refid="cfe__error_8h_1ab2b6b188c32c70b8ca0578b7a7bc091b" kindref="member">CFE_SUCCESS</ref> </para></entry><entry thead="no"><para>Operation was performed successfully  </para></entry></row>
<row>
<entry thead="no"><para><ref refid="cfe__error_8h_1ad3c572bc717c1354810f6765aa551546" kindref="member">CFE_SB_BUFFER_INVALID</ref> </para></entry><entry thead="no"><para>This error code will be returned when a request to release or send a zero copy buffer is invalid, such as if the handle or buffer is not correct or the buffer was previously released.  </para></entry></row>
</table>
</para></simplesect>
<simplesect kind="see"><para><ref refid="cfe__sb_8h_1a40630a2f5465cf30206a45c970bb4cc4" kindref="member">CFE_SB_ZeroCopyGetPtr</ref>, <ref refid="cfe__sb_8h_1afabab99c8bed70a6d74b662f8620866c" kindref="member">CFE_SB_ZeroCopySend</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/cfe_sb.h" line="657" column="1"/>
      </memberdef>
      <memberdef kind="function" id="cfe__sb_8h_1afabab99c8bed70a6d74b662f8620866c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="common__types_8h_1a5eb512da689eec1a7472ab97e2ab6be3" kindref="member">int32</ref></type>
        <definition>int32 CFE_SB_ZeroCopySend</definition>
        <argsstring>(CFE_SB_Msg_t *MsgPtr, CFE_SB_ZeroCopyHandle_t BufferHandle)</argsstring>
        <name>CFE_SB_ZeroCopySend</name>
        <param>
          <type><ref refid="union_c_f_e___s_b___msg__t" kindref="compound">CFE_SB_Msg_t</ref> *</type>
          <declname>MsgPtr</declname>
        </param>
        <param>
          <type><ref refid="cfe__sb_8h_1ad75799a3f44e35ccee00f7b434097798" kindref="member">CFE_SB_ZeroCopyHandle_t</ref></type>
          <declname>BufferHandle</declname>
        </param>
        <briefdescription>
<para>Send an SB message in &quot;zero copy&quot; mode. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Description</title><para>This routine sends a message that has been created directly in an internal SB message buffer by an application (after a call to <ref refid="cfe__sb_8h_1a40630a2f5465cf30206a45c970bb4cc4" kindref="member">CFE_SB_ZeroCopyGetPtr</ref>). This interface is more complicated than the normal <ref refid="cfe__sb_8h_1a91b4b63f7d168bd78dc92d894ad7f77d" kindref="member">CFE_SB_SendMsg</ref> interface, but it avoids an extra copy of the message from the user&apos;s memory buffer to the software bus internal buffer. The &quot;zero copy&quot; interface can be used to improve performance in high-rate, high-volume software bus traffic.</para></simplesect>
<simplesect kind="par"><title>Assumptions, External Events, and Notes:</title><para><orderedlist>
<listitem><para>The pointer returned by <ref refid="cfe__sb_8h_1a40630a2f5465cf30206a45c970bb4cc4" kindref="member">CFE_SB_ZeroCopyGetPtr</ref> is only good for one call to <ref refid="cfe__sb_8h_1afabab99c8bed70a6d74b662f8620866c" kindref="member">CFE_SB_ZeroCopySend</ref>.</para></listitem><listitem><para>Callers must not use the same SB message buffer for multiple sends.</para></listitem><listitem><para>Applications should be written as if <ref refid="cfe__sb_8h_1a40630a2f5465cf30206a45c970bb4cc4" kindref="member">CFE_SB_ZeroCopyGetPtr</ref> is equivalent to a <computeroutput>malloc()</computeroutput> and <ref refid="cfe__sb_8h_1afabab99c8bed70a6d74b662f8620866c" kindref="member">CFE_SB_ZeroCopySend</ref> is equivalent to a <computeroutput>free()</computeroutput>.</para></listitem><listitem><para>Applications must not de-reference the message pointer (for reading or writing) after the call to <ref refid="cfe__sb_8h_1afabab99c8bed70a6d74b662f8620866c" kindref="member">CFE_SB_ZeroCopySend</ref>.</para></listitem><listitem><para>This function tracks and increments the source sequence counter of a telemetry message.</para></listitem></orderedlist>
</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">MsgPtr</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the SB message to be sent.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">BufferHandle</parametername>
</parameternamelist>
<parameterdescription>
<para>The handle supplied with the <ref refid="cfe__sb_8h_1a40630a2f5465cf30206a45c970bb4cc4" kindref="member">CFE_SB_ZeroCopyGetPtr</ref> call.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><table rows="5" cols="2"><row>
<entry thead="no"><para><ref refid="cfe__error_8h_1ab2b6b188c32c70b8ca0578b7a7bc091b" kindref="member">CFE_SUCCESS</ref> </para></entry><entry thead="no"><para>Operation was performed successfully  </para></entry></row>
<row>
<entry thead="no"><para><ref refid="cfe__error_8h_1a1a813e981c067fe87245b89c4117101d" kindref="member">CFE_SB_BAD_ARGUMENT</ref> </para></entry><entry thead="no"><para>A parameter given by a caller to a Software Bus API did not pass validation checks.  </para></entry></row>
<row>
<entry thead="no"><para><ref refid="cfe__error_8h_1a07f24d1c49358bc9bb0b2d8dd19508bf" kindref="member">CFE_SB_MSG_TOO_BIG</ref> </para></entry><entry thead="no"><para>The size field in the message header indicates the message exceeds the max Software Bus message size. The max size is defined by configuration parameter <ref refid="cfe__mission__cfg_8h_1ac5a1b99c0ee718d0a9c8148e70ddd473" kindref="member">CFE_SB_MAX_SB_MSG_SIZE</ref> in <ref refid="cfe__mission__cfg_8h" kindref="compound">cfe_mission_cfg.h</ref>  </para></entry></row>
<row>
<entry thead="no"><para><ref refid="cfe__error_8h_1ac8a1a1216249eea00644fb0b52d4078b" kindref="member">CFE_SB_BUF_ALOC_ERR</ref> </para></entry><entry thead="no"><para>This error code will be returned from <ref refid="cfe__sb_8h_1a91b4b63f7d168bd78dc92d894ad7f77d" kindref="member">CFE_SB_SendMsg</ref> when the memory in the SB message buffer pool has been depleted. The amount of memory in the pool is dictated by the configuration parameter #CFE_SB_BUF_MEMORY_BYTES specified in the cfe_platform_cfg.h file. Also the memory statistics, including current utilization figures and high water marks for the SB Buffer memory pool can be monitored by sending a Software Bus command to send the SB statistics packet.  </para></entry></row>
<row>
<entry thead="no"><para><ref refid="cfe__error_8h_1ad3c572bc717c1354810f6765aa551546" kindref="member">CFE_SB_BUFFER_INVALID</ref> </para></entry><entry thead="no"><para>This error code will be returned when a request to release or send a zero copy buffer is invalid, such as if the handle or buffer is not correct or the buffer was previously released.  </para></entry></row>
</table>
</para></simplesect>
<simplesect kind="see"><para><ref refid="cfe__sb_8h_1a91b4b63f7d168bd78dc92d894ad7f77d" kindref="member">CFE_SB_SendMsg</ref>, <ref refid="cfe__sb_8h_1a54840fe06aeb08b1e2c8df420474780d" kindref="member">CFE_SB_RcvMsg</ref>, <ref refid="cfe__sb_8h_1a89ec51d1986bec33c5a3b6605f92b04a" kindref="member">CFE_SB_ZeroCopyReleasePtr</ref>, <ref refid="cfe__sb_8h_1a40630a2f5465cf30206a45c970bb4cc4" kindref="member">CFE_SB_ZeroCopyGetPtr</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/cfe_sb.h" line="699" column="1"/>
      </memberdef>
      <memberdef kind="function" id="cfe__sb_8h_1ab0908003ed01106c310b97d984be76b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="common__types_8h_1a5eb512da689eec1a7472ab97e2ab6be3" kindref="member">int32</ref></type>
        <definition>int32 CFE_SB_ZeroCopyPass</definition>
        <argsstring>(CFE_SB_Msg_t *MsgPtr, CFE_SB_ZeroCopyHandle_t BufferHandle)</argsstring>
        <name>CFE_SB_ZeroCopyPass</name>
        <param>
          <type><ref refid="union_c_f_e___s_b___msg__t" kindref="compound">CFE_SB_Msg_t</ref> *</type>
          <declname>MsgPtr</declname>
        </param>
        <param>
          <type><ref refid="cfe__sb_8h_1ad75799a3f44e35ccee00f7b434097798" kindref="member">CFE_SB_ZeroCopyHandle_t</ref></type>
          <declname>BufferHandle</declname>
        </param>
        <briefdescription>
<para>Pass an SB message in &quot;zero copy&quot; mode. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Description</title><para>This routine sends a message that has been created directly in an internal SB message buffer by an application (after a call to <ref refid="cfe__sb_8h_1a40630a2f5465cf30206a45c970bb4cc4" kindref="member">CFE_SB_ZeroCopyGetPtr</ref>). This interface is more complicated than the normal <ref refid="cfe__sb_8h_1a91b4b63f7d168bd78dc92d894ad7f77d" kindref="member">CFE_SB_SendMsg</ref> interface, but it avoids an extra copy of the message from the user&apos;s memory buffer to the software bus internal buffer. The &quot;zero copy&quot; interface can be used to improve performance in high-rate, high-volume software bus traffic. This version is intended to pass messages not generated by the caller (to preserve the source sequence count).</para></simplesect>
<simplesect kind="par"><title>Assumptions, External Events, and Notes:</title><para><orderedlist>
<listitem><para>The pointer returned by <ref refid="cfe__sb_8h_1a40630a2f5465cf30206a45c970bb4cc4" kindref="member">CFE_SB_ZeroCopyGetPtr</ref> is only good for one call to <ref refid="cfe__sb_8h_1afabab99c8bed70a6d74b662f8620866c" kindref="member">CFE_SB_ZeroCopySend</ref> or <ref refid="cfe__sb_8h_1ab0908003ed01106c310b97d984be76b8" kindref="member">CFE_SB_ZeroCopyPass</ref>.</para></listitem><listitem><para>Callers must not use the same SB message buffer for multiple sends.</para></listitem><listitem><para>Applications should be written as if <ref refid="cfe__sb_8h_1a40630a2f5465cf30206a45c970bb4cc4" kindref="member">CFE_SB_ZeroCopyGetPtr</ref> is equivalent to a <computeroutput>malloc()</computeroutput> and <ref refid="cfe__sb_8h_1ab0908003ed01106c310b97d984be76b8" kindref="member">CFE_SB_ZeroCopyPass</ref> is equivalent to a <computeroutput>free()</computeroutput>.</para></listitem><listitem><para>Applications must not de-reference the message pointer (for reading or writing) after the call to <ref refid="cfe__sb_8h_1ab0908003ed01106c310b97d984be76b8" kindref="member">CFE_SB_ZeroCopyPass</ref>.</para></listitem><listitem><para>Unlike <ref refid="cfe__sb_8h_1afabab99c8bed70a6d74b662f8620866c" kindref="member">CFE_SB_ZeroCopySend</ref> this routine will preserve the source sequence counter in a telemetry message.</para></listitem></orderedlist>
</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">MsgPtr</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the SB message to be sent.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">BufferHandle</parametername>
</parameternamelist>
<parameterdescription>
<para>The handle supplied with the <ref refid="cfe__sb_8h_1a40630a2f5465cf30206a45c970bb4cc4" kindref="member">CFE_SB_ZeroCopyGetPtr</ref> call.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><table rows="5" cols="2"><row>
<entry thead="no"><para><ref refid="cfe__error_8h_1ab2b6b188c32c70b8ca0578b7a7bc091b" kindref="member">CFE_SUCCESS</ref> </para></entry><entry thead="no"><para>Operation was performed successfully  </para></entry></row>
<row>
<entry thead="no"><para><ref refid="cfe__error_8h_1a1a813e981c067fe87245b89c4117101d" kindref="member">CFE_SB_BAD_ARGUMENT</ref> </para></entry><entry thead="no"><para>A parameter given by a caller to a Software Bus API did not pass validation checks.  </para></entry></row>
<row>
<entry thead="no"><para><ref refid="cfe__error_8h_1a07f24d1c49358bc9bb0b2d8dd19508bf" kindref="member">CFE_SB_MSG_TOO_BIG</ref> </para></entry><entry thead="no"><para>The size field in the message header indicates the message exceeds the max Software Bus message size. The max size is defined by configuration parameter <ref refid="cfe__mission__cfg_8h_1ac5a1b99c0ee718d0a9c8148e70ddd473" kindref="member">CFE_SB_MAX_SB_MSG_SIZE</ref> in <ref refid="cfe__mission__cfg_8h" kindref="compound">cfe_mission_cfg.h</ref>  </para></entry></row>
<row>
<entry thead="no"><para><ref refid="cfe__error_8h_1ac8a1a1216249eea00644fb0b52d4078b" kindref="member">CFE_SB_BUF_ALOC_ERR</ref> </para></entry><entry thead="no"><para>This error code will be returned from <ref refid="cfe__sb_8h_1a91b4b63f7d168bd78dc92d894ad7f77d" kindref="member">CFE_SB_SendMsg</ref> when the memory in the SB message buffer pool has been depleted. The amount of memory in the pool is dictated by the configuration parameter #CFE_SB_BUF_MEMORY_BYTES specified in the cfe_platform_cfg.h file. Also the memory statistics, including current utilization figures and high water marks for the SB Buffer memory pool can be monitored by sending a Software Bus command to send the SB statistics packet.  </para></entry></row>
<row>
<entry thead="no"><para><ref refid="cfe__error_8h_1ad3c572bc717c1354810f6765aa551546" kindref="member">CFE_SB_BUFFER_INVALID</ref> </para></entry><entry thead="no"><para>This error code will be returned when a request to release or send a zero copy buffer is invalid, such as if the handle or buffer is not correct or the buffer was previously released.  </para></entry></row>
</table>
</para></simplesect>
<simplesect kind="see"><para><ref refid="cfe__sb_8h_1ade2170aac98e2b761332d96e7af88ff1" kindref="member">CFE_SB_PassMsg</ref>, <ref refid="cfe__sb_8h_1afabab99c8bed70a6d74b662f8620866c" kindref="member">CFE_SB_ZeroCopySend</ref>, <ref refid="cfe__sb_8h_1a89ec51d1986bec33c5a3b6605f92b04a" kindref="member">CFE_SB_ZeroCopyReleasePtr</ref>, <ref refid="cfe__sb_8h_1a40630a2f5465cf30206a45c970bb4cc4" kindref="member">CFE_SB_ZeroCopyGetPtr</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/cfe_sb.h" line="743" column="1"/>
      </memberdef>
      <memberdef kind="function" id="cfe__sb_8h_1a67765875dfff1d3d6d7cbc4a7ae2f8f0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CFE_SB_InitMsg</definition>
        <argsstring>(void *MsgPtr, CFE_SB_MsgId_t MsgId, uint16 Length, boolean Clear)</argsstring>
        <name>CFE_SB_InitMsg</name>
        <param>
          <type>void *</type>
          <declname>MsgPtr</declname>
        </param>
        <param>
          <type><ref refid="cfe__sb_8h_1a213323eb4fb69a395a343ad66045ae74" kindref="member">CFE_SB_MsgId_t</ref></type>
          <declname>MsgId</declname>
        </param>
        <param>
          <type><ref refid="common__types_8h_1a2e00abb078d312d1d8c4fbcd6be343d8" kindref="member">uint16</ref></type>
          <declname>Length</declname>
        </param>
        <param>
          <type><ref refid="common__types_8h_1ac3ecf6d00ebd3dd79ea00efdc71d9c33" kindref="member">boolean</ref></type>
          <declname>Clear</declname>
        </param>
        <briefdescription>
<para>Initialize a buffer for a software bus message. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Description</title><para>This routine fills in the header information needed to create a valid software bus message.</para></simplesect>
<simplesect kind="par"><title>Assumptions, External Events, and Notes:</title><para>None</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">MsgPtr</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the buffer that will contain the message. This will point to the first byte of the message header. The <computeroutput>void*</computeroutput> data type allows the calling routine to use any data type when declaring its message buffer.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">MsgId</parametername>
</parameternamelist>
<parameterdescription>
<para>The message ID to put in the message header.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">Length</parametername>
</parameternamelist>
<parameterdescription>
<para>The total number of bytes of message data, including the SB message header .</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">Clear</parametername>
</parameternamelist>
<parameterdescription>
<para>A flag indicating whether to clear the rest of the message: <itemizedlist>
<listitem><para>TRUE - fill sequence count and packet data with zeroes. </para></listitem>
<listitem><para>FALSE - leave sequence count and packet data unchanged.</para></listitem>
</itemizedlist>
</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="cfe__sb_8h_1af0bb4507231046917c9774cf8365203c" kindref="member">CFE_SB_SetMsgId</ref>, <ref refid="cfe__sb_8h_1a1804248c45fea3eb322a950626f67f99" kindref="member">CFE_SB_SetUserDataLength</ref>, <ref refid="cfe__sb_8h_1ae7bfd92ff974a7d5f43d49345ab4b806" kindref="member">CFE_SB_SetTotalMsgLength</ref>, <ref refid="cfe__sb_8h_1a52278f45dbe569c9e003d7bdba58b694" kindref="member">CFE_SB_SetMsgTime</ref>, <ref refid="cfe__sb_8h_1aaab4db240d18fa4017741f0f7680e4e1" kindref="member">CFE_SB_TimeStampMsg</ref>, <ref refid="cfe__sb_8h_1aae28d938d29ce8ad689b238562c58d3f" kindref="member">CFE_SB_SetCmdCode</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/cfe_sb.h" line="775" column="1"/>
      </memberdef>
      <memberdef kind="function" id="cfe__sb_8h_1a76fccd1a39d38ea58993191bdd7f4144" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="common__types_8h_1a2e00abb078d312d1d8c4fbcd6be343d8" kindref="member">uint16</ref></type>
        <definition>uint16 CFE_SB_MsgHdrSize</definition>
        <argsstring>(CFE_SB_MsgId_t MsgId)</argsstring>
        <name>CFE_SB_MsgHdrSize</name>
        <param>
          <type><ref refid="cfe__sb_8h_1a213323eb4fb69a395a343ad66045ae74" kindref="member">CFE_SB_MsgId_t</ref></type>
          <declname>MsgId</declname>
        </param>
        <briefdescription>
<para>Get the size of a software bus message header. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Description</title><para>This routine returns the number of bytes in a software bus message header. This can be used for sizing buffers that need to store SB messages. SB message header formats can be different for each deployment of the cFE. So, applications should use this function and avoid hard coding their buffer sizes.</para></simplesect>
<simplesect kind="par"><title>Assumptions, External Events, and Notes:</title><para><itemizedlist>
<listitem><para>For statically defined messages, a function call will not work. The macros <ref refid="cfe__sb_8h_1acc49ae58990b23f72824e1b742c78cb8" kindref="member">CFE_SB_CMD_HDR_SIZE</ref> and <ref refid="cfe__sb_8h_1abf04f5fc43f637e617096626d357fb79" kindref="member">CFE_SB_TLM_HDR_SIZE</ref> are available for use in static message buffer sizing or structure definitions.</para></listitem></itemizedlist>
</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">MsgId</parametername>
</parameternamelist>
<parameterdescription>
<para>The message ID to calculate header size for. The size of the message header may depend on the MsgId in some implementations. For example, if SB messages are implemented as CCSDS packets, the size of the header is different for command vs. telemetry packets.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><table rows="1" cols="2"><row>
<entry thead="no"><para>The number of bytes in the software bus message header for messages with the given <computeroutput>MsgId</computeroutput>. endstmt </para></entry></row>
</table>
</para></simplesect>
<simplesect kind="see"><para><ref refid="cfe__sb_8h_1ad7d178a88d5600712eb74afc13e2d666" kindref="member">CFE_SB_GetUserData</ref>, <ref refid="cfe__sb_8h_1afd43694dea8b3cb74af4c2969493256d" kindref="member">CFE_SB_GetMsgId</ref>, <ref refid="cfe__sb_8h_1a9fcbd13f892931483c22a17c1be0c4ab" kindref="member">CFE_SB_GetUserDataLength</ref>, <ref refid="cfe__sb_8h_1ac32b86cf9e1d12a547792853c35f6aa1" kindref="member">CFE_SB_GetTotalMsgLength</ref>, <ref refid="cfe__sb_8h_1adf8ead29ddbb83f4af9491cb14994f3e" kindref="member">CFE_SB_GetMsgTime</ref>, <ref refid="cfe__sb_8h_1a7b1204be89237bd230fc79ecc88718b5" kindref="member">CFE_SB_GetCmdCode</ref>, <ref refid="cfe__sb_8h_1a5ffc13b78bef6859d203453f76edc044" kindref="member">CFE_SB_GetChecksum</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/cfe_sb.h" line="809" column="1"/>
      </memberdef>
      <memberdef kind="function" id="cfe__sb_8h_1ad7d178a88d5600712eb74afc13e2d666" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* CFE_SB_GetUserData</definition>
        <argsstring>(CFE_SB_MsgPtr_t MsgPtr)</argsstring>
        <name>CFE_SB_GetUserData</name>
        <param>
          <type><ref refid="cfe__sb_8h_1ab774c47a48e3b6fb0bdd42fb2cb80ad8" kindref="member">CFE_SB_MsgPtr_t</ref></type>
          <declname>MsgPtr</declname>
        </param>
        <briefdescription>
<para>Get a pointer to the user data portion of a software bus message. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Description</title><para>This routine returns a pointer to the user data portion of a software bus message. SB message header formats can be different for each deployment of the cFE. So, applications should use this function and avoid hard coding offsets into their SB message buffers.</para></simplesect>
<simplesect kind="par"><title>Assumptions, External Events, and Notes:</title><para>None</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">MsgPtr</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the buffer that contains the software bus message.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><table rows="1" cols="2"><row>
<entry thead="no"><para>A pointer to the first byte of user data within the software bus message.  </para></entry></row>
</table>
</para></simplesect>
<simplesect kind="see"><para><ref refid="cfe__sb_8h_1afd43694dea8b3cb74af4c2969493256d" kindref="member">CFE_SB_GetMsgId</ref>, <ref refid="cfe__sb_8h_1a9fcbd13f892931483c22a17c1be0c4ab" kindref="member">CFE_SB_GetUserDataLength</ref>, <ref refid="cfe__sb_8h_1ac32b86cf9e1d12a547792853c35f6aa1" kindref="member">CFE_SB_GetTotalMsgLength</ref>, <ref refid="cfe__sb_8h_1adf8ead29ddbb83f4af9491cb14994f3e" kindref="member">CFE_SB_GetMsgTime</ref>, <ref refid="cfe__sb_8h_1a7b1204be89237bd230fc79ecc88718b5" kindref="member">CFE_SB_GetCmdCode</ref>, <ref refid="cfe__sb_8h_1a5ffc13b78bef6859d203453f76edc044" kindref="member">CFE_SB_GetChecksum</ref>, <ref refid="cfe__sb_8h_1a76fccd1a39d38ea58993191bdd7f4144" kindref="member">CFE_SB_MsgHdrSize</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/cfe_sb.h" line="833" column="1"/>
      </memberdef>
      <memberdef kind="function" id="cfe__sb_8h_1afd43694dea8b3cb74af4c2969493256d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="cfe__sb_8h_1a213323eb4fb69a395a343ad66045ae74" kindref="member">CFE_SB_MsgId_t</ref></type>
        <definition>CFE_SB_MsgId_t CFE_SB_GetMsgId</definition>
        <argsstring>(CFE_SB_MsgPtr_t MsgPtr)</argsstring>
        <name>CFE_SB_GetMsgId</name>
        <param>
          <type><ref refid="cfe__sb_8h_1ab774c47a48e3b6fb0bdd42fb2cb80ad8" kindref="member">CFE_SB_MsgPtr_t</ref></type>
          <declname>MsgPtr</declname>
        </param>
        <briefdescription>
<para>Get the message ID of a software bus message. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Description</title><para>This routine returns the message ID from a software bus message.</para></simplesect>
<simplesect kind="par"><title>Assumptions, External Events, and Notes:</title><para>None</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">MsgPtr</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the buffer that contains the software bus message.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><table rows="1" cols="2"><row>
<entry thead="no"><para>The software bus Message ID from the message header.  </para></entry></row>
</table>
</para></simplesect>
<simplesect kind="see"><para><ref refid="cfe__sb_8h_1ad7d178a88d5600712eb74afc13e2d666" kindref="member">CFE_SB_GetUserData</ref>, <ref refid="cfe__sb_8h_1af0bb4507231046917c9774cf8365203c" kindref="member">CFE_SB_SetMsgId</ref>, <ref refid="cfe__sb_8h_1a9fcbd13f892931483c22a17c1be0c4ab" kindref="member">CFE_SB_GetUserDataLength</ref>, <ref refid="cfe__sb_8h_1ac32b86cf9e1d12a547792853c35f6aa1" kindref="member">CFE_SB_GetTotalMsgLength</ref>, <ref refid="cfe__sb_8h_1adf8ead29ddbb83f4af9491cb14994f3e" kindref="member">CFE_SB_GetMsgTime</ref>, <ref refid="cfe__sb_8h_1a7b1204be89237bd230fc79ecc88718b5" kindref="member">CFE_SB_GetCmdCode</ref>, <ref refid="cfe__sb_8h_1a5ffc13b78bef6859d203453f76edc044" kindref="member">CFE_SB_GetChecksum</ref>, <ref refid="cfe__sb_8h_1a76fccd1a39d38ea58993191bdd7f4144" kindref="member">CFE_SB_MsgHdrSize</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/cfe_sb.h" line="854" column="1"/>
      </memberdef>
      <memberdef kind="function" id="cfe__sb_8h_1af0bb4507231046917c9774cf8365203c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CFE_SB_SetMsgId</definition>
        <argsstring>(CFE_SB_MsgPtr_t MsgPtr, CFE_SB_MsgId_t MsgId)</argsstring>
        <name>CFE_SB_SetMsgId</name>
        <param>
          <type><ref refid="cfe__sb_8h_1ab774c47a48e3b6fb0bdd42fb2cb80ad8" kindref="member">CFE_SB_MsgPtr_t</ref></type>
          <declname>MsgPtr</declname>
        </param>
        <param>
          <type><ref refid="cfe__sb_8h_1a213323eb4fb69a395a343ad66045ae74" kindref="member">CFE_SB_MsgId_t</ref></type>
          <declname>MsgId</declname>
        </param>
        <briefdescription>
<para>Sets the message ID of a software bus message. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Description</title><para>This routine sets the Message ID in a software bus message header.</para></simplesect>
<simplesect kind="par"><title>Assumptions, External Events, and Notes:</title><para>None</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">MsgPtr</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the buffer that contains the software bus message. This must point to the first byte of the message header.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">MsgId</parametername>
</parameternamelist>
<parameterdescription>
<para>The message ID to put into the message header.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><table rows="1" cols="2"><row>
<entry thead="no"><para>The software bus Message ID from the message header.  </para></entry></row>
</table>
</para></simplesect>
<simplesect kind="see"><para><ref refid="cfe__sb_8h_1afd43694dea8b3cb74af4c2969493256d" kindref="member">CFE_SB_GetMsgId</ref>, <ref refid="cfe__sb_8h_1a1804248c45fea3eb322a950626f67f99" kindref="member">CFE_SB_SetUserDataLength</ref>, <ref refid="cfe__sb_8h_1ae7bfd92ff974a7d5f43d49345ab4b806" kindref="member">CFE_SB_SetTotalMsgLength</ref>, <ref refid="cfe__sb_8h_1a52278f45dbe569c9e003d7bdba58b694" kindref="member">CFE_SB_SetMsgTime</ref>, <ref refid="cfe__sb_8h_1aaab4db240d18fa4017741f0f7680e4e1" kindref="member">CFE_SB_TimeStampMsg</ref>, <ref refid="cfe__sb_8h_1aae28d938d29ce8ad689b238562c58d3f" kindref="member">CFE_SB_SetCmdCode</ref>, <ref refid="cfe__sb_8h_1a67765875dfff1d3d6d7cbc4a7ae2f8f0" kindref="member">CFE_SB_InitMsg</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/cfe_sb.h" line="878" column="1"/>
      </memberdef>
      <memberdef kind="function" id="cfe__sb_8h_1a9fcbd13f892931483c22a17c1be0c4ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="common__types_8h_1a2e00abb078d312d1d8c4fbcd6be343d8" kindref="member">uint16</ref></type>
        <definition>uint16 CFE_SB_GetUserDataLength</definition>
        <argsstring>(CFE_SB_MsgPtr_t MsgPtr)</argsstring>
        <name>CFE_SB_GetUserDataLength</name>
        <param>
          <type><ref refid="cfe__sb_8h_1ab774c47a48e3b6fb0bdd42fb2cb80ad8" kindref="member">CFE_SB_MsgPtr_t</ref></type>
          <declname>MsgPtr</declname>
        </param>
        <briefdescription>
<para>Gets the length of user data in a software bus message. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Description</title><para>This routine returns the size of the user data in a software bus message.</para></simplesect>
<simplesect kind="par"><title>Assumptions, External Events, and Notes:</title><para>None</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">MsgPtr</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the buffer that contains the software bus message. This must point to the first byte of the message header.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><table rows="1" cols="2"><row>
<entry thead="no"><para>The size (in bytes) of the user data in the software bus message.  </para></entry></row>
</table>
</para></simplesect>
<simplesect kind="see"><para><ref refid="cfe__sb_8h_1ad7d178a88d5600712eb74afc13e2d666" kindref="member">CFE_SB_GetUserData</ref>, <ref refid="cfe__sb_8h_1afd43694dea8b3cb74af4c2969493256d" kindref="member">CFE_SB_GetMsgId</ref>, <ref refid="cfe__sb_8h_1a1804248c45fea3eb322a950626f67f99" kindref="member">CFE_SB_SetUserDataLength</ref>, <ref refid="cfe__sb_8h_1ac32b86cf9e1d12a547792853c35f6aa1" kindref="member">CFE_SB_GetTotalMsgLength</ref>, <ref refid="cfe__sb_8h_1adf8ead29ddbb83f4af9491cb14994f3e" kindref="member">CFE_SB_GetMsgTime</ref>, <ref refid="cfe__sb_8h_1a7b1204be89237bd230fc79ecc88718b5" kindref="member">CFE_SB_GetCmdCode</ref>, <ref refid="cfe__sb_8h_1a5ffc13b78bef6859d203453f76edc044" kindref="member">CFE_SB_GetChecksum</ref>, <ref refid="cfe__sb_8h_1a76fccd1a39d38ea58993191bdd7f4144" kindref="member">CFE_SB_MsgHdrSize</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/cfe_sb.h" line="901" column="1"/>
      </memberdef>
      <memberdef kind="function" id="cfe__sb_8h_1a1804248c45fea3eb322a950626f67f99" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CFE_SB_SetUserDataLength</definition>
        <argsstring>(CFE_SB_MsgPtr_t MsgPtr, uint16 DataLength)</argsstring>
        <name>CFE_SB_SetUserDataLength</name>
        <param>
          <type><ref refid="cfe__sb_8h_1ab774c47a48e3b6fb0bdd42fb2cb80ad8" kindref="member">CFE_SB_MsgPtr_t</ref></type>
          <declname>MsgPtr</declname>
        </param>
        <param>
          <type><ref refid="common__types_8h_1a2e00abb078d312d1d8c4fbcd6be343d8" kindref="member">uint16</ref></type>
          <declname>DataLength</declname>
        </param>
        <briefdescription>
<para>Sets the length of user data in a software bus message. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Description</title><para>This routine sets the field in the SB message header that determines the size of the user data in a software bus message. SB message header formats can be different for each deployment of the cFE. So, applications should use this function rather than trying to poke a length value directly into their SB message buffers.</para></simplesect>
<simplesect kind="par"><title>Assumptions, External Events, and Notes:</title><para><itemizedlist>
<listitem><para>You must set a valid message ID in the SB message header before calling this function.</para></listitem></itemizedlist>
</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">MsgPtr</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the buffer that contains the software bus message. This must point to the first byte of the message header.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">DataLength</parametername>
</parameternamelist>
<parameterdescription>
<para>The length to set (size of the user data, in bytes).</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="cfe__sb_8h_1af0bb4507231046917c9774cf8365203c" kindref="member">CFE_SB_SetMsgId</ref>, <ref refid="cfe__sb_8h_1a9fcbd13f892931483c22a17c1be0c4ab" kindref="member">CFE_SB_GetUserDataLength</ref>, <ref refid="cfe__sb_8h_1ae7bfd92ff974a7d5f43d49345ab4b806" kindref="member">CFE_SB_SetTotalMsgLength</ref>, <ref refid="cfe__sb_8h_1a52278f45dbe569c9e003d7bdba58b694" kindref="member">CFE_SB_SetMsgTime</ref>, <ref refid="cfe__sb_8h_1aaab4db240d18fa4017741f0f7680e4e1" kindref="member">CFE_SB_TimeStampMsg</ref>, <ref refid="cfe__sb_8h_1aae28d938d29ce8ad689b238562c58d3f" kindref="member">CFE_SB_SetCmdCode</ref>, <ref refid="cfe__sb_8h_1a67765875dfff1d3d6d7cbc4a7ae2f8f0" kindref="member">CFE_SB_InitMsg</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/cfe_sb.h" line="927" column="1"/>
      </memberdef>
      <memberdef kind="function" id="cfe__sb_8h_1ac32b86cf9e1d12a547792853c35f6aa1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="common__types_8h_1a2e00abb078d312d1d8c4fbcd6be343d8" kindref="member">uint16</ref></type>
        <definition>uint16 CFE_SB_GetTotalMsgLength</definition>
        <argsstring>(CFE_SB_MsgPtr_t MsgPtr)</argsstring>
        <name>CFE_SB_GetTotalMsgLength</name>
        <param>
          <type><ref refid="cfe__sb_8h_1ab774c47a48e3b6fb0bdd42fb2cb80ad8" kindref="member">CFE_SB_MsgPtr_t</ref></type>
          <declname>MsgPtr</declname>
        </param>
        <briefdescription>
<para>Gets the total length of a software bus message. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Description</title><para>This routine returns the total size of the software bus message.</para></simplesect>
<simplesect kind="par"><title>Assumptions, External Events, and Notes:</title><para><itemizedlist>
<listitem><para>For the CCSDS implementation of this API, the size is derived from the message header.</para></listitem></itemizedlist>
</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">MsgPtr</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the buffer that contains the software bus message. This must point to the first byte of the message header.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><table rows="1" cols="2"><row>
<entry thead="no"><para>The total size (in bytes) of the software bus message, including headers.  </para></entry></row>
</table>
</para></simplesect>
<simplesect kind="see"><para><ref refid="cfe__sb_8h_1ad7d178a88d5600712eb74afc13e2d666" kindref="member">CFE_SB_GetUserData</ref>, <ref refid="cfe__sb_8h_1afd43694dea8b3cb74af4c2969493256d" kindref="member">CFE_SB_GetMsgId</ref>, <ref refid="cfe__sb_8h_1a9fcbd13f892931483c22a17c1be0c4ab" kindref="member">CFE_SB_GetUserDataLength</ref>, <ref refid="cfe__sb_8h_1ae7bfd92ff974a7d5f43d49345ab4b806" kindref="member">CFE_SB_SetTotalMsgLength</ref>, <ref refid="cfe__sb_8h_1adf8ead29ddbb83f4af9491cb14994f3e" kindref="member">CFE_SB_GetMsgTime</ref>, <ref refid="cfe__sb_8h_1a7b1204be89237bd230fc79ecc88718b5" kindref="member">CFE_SB_GetCmdCode</ref>, <ref refid="cfe__sb_8h_1a5ffc13b78bef6859d203453f76edc044" kindref="member">CFE_SB_GetChecksum</ref>, <ref refid="cfe__sb_8h_1a76fccd1a39d38ea58993191bdd7f4144" kindref="member">CFE_SB_MsgHdrSize</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/cfe_sb.h" line="950" column="1"/>
      </memberdef>
      <memberdef kind="function" id="cfe__sb_8h_1ae7bfd92ff974a7d5f43d49345ab4b806" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CFE_SB_SetTotalMsgLength</definition>
        <argsstring>(CFE_SB_MsgPtr_t MsgPtr, uint16 TotalLength)</argsstring>
        <name>CFE_SB_SetTotalMsgLength</name>
        <param>
          <type><ref refid="cfe__sb_8h_1ab774c47a48e3b6fb0bdd42fb2cb80ad8" kindref="member">CFE_SB_MsgPtr_t</ref></type>
          <declname>MsgPtr</declname>
        </param>
        <param>
          <type><ref refid="common__types_8h_1a2e00abb078d312d1d8c4fbcd6be343d8" kindref="member">uint16</ref></type>
          <declname>TotalLength</declname>
        </param>
        <briefdescription>
<para>Sets the total length of a software bus message. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Description</title><para>This routine sets the field in the SB message header that determines the total length of the message. SB message header formats can be different for each deployment of the cFE. So, applications should use this function rather than trying to poke a length value directly into their SB message buffers.</para></simplesect>
<simplesect kind="par"><title>Assumptions, External Events, and Notes:</title><para>None</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">MsgPtr</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the buffer that contains the software bus message. This must point to the first byte of the message header.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">TotalLength</parametername>
</parameternamelist>
<parameterdescription>
<para>The length to set (total size of the message, in bytes, including headers).</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="cfe__sb_8h_1af0bb4507231046917c9774cf8365203c" kindref="member">CFE_SB_SetMsgId</ref>, <ref refid="cfe__sb_8h_1a1804248c45fea3eb322a950626f67f99" kindref="member">CFE_SB_SetUserDataLength</ref>, <ref refid="cfe__sb_8h_1ac32b86cf9e1d12a547792853c35f6aa1" kindref="member">CFE_SB_GetTotalMsgLength</ref>, <ref refid="cfe__sb_8h_1a52278f45dbe569c9e003d7bdba58b694" kindref="member">CFE_SB_SetMsgTime</ref>, <ref refid="cfe__sb_8h_1aaab4db240d18fa4017741f0f7680e4e1" kindref="member">CFE_SB_TimeStampMsg</ref>, <ref refid="cfe__sb_8h_1aae28d938d29ce8ad689b238562c58d3f" kindref="member">CFE_SB_SetCmdCode</ref>, <ref refid="cfe__sb_8h_1a67765875dfff1d3d6d7cbc4a7ae2f8f0" kindref="member">CFE_SB_InitMsg</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/cfe_sb.h" line="975" column="1"/>
      </memberdef>
      <memberdef kind="function" id="cfe__sb_8h_1adf8ead29ddbb83f4af9491cb14994f3e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_c_f_e___t_i_m_e___sys_time__t" kindref="compound">CFE_TIME_SysTime_t</ref></type>
        <definition>CFE_TIME_SysTime_t CFE_SB_GetMsgTime</definition>
        <argsstring>(CFE_SB_MsgPtr_t MsgPtr)</argsstring>
        <name>CFE_SB_GetMsgTime</name>
        <param>
          <type><ref refid="cfe__sb_8h_1ab774c47a48e3b6fb0bdd42fb2cb80ad8" kindref="member">CFE_SB_MsgPtr_t</ref></type>
          <declname>MsgPtr</declname>
        </param>
        <briefdescription>
<para>Gets the time field from a software bus message. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Description</title><para>This routine gets the time from a software bus message.</para></simplesect>
<simplesect kind="par"><title>Assumptions, External Events, and Notes:</title><para><itemizedlist>
<listitem><para>If the underlying implementation of software bus messages does not include a time field, then this routine will return a zero time.</para></listitem></itemizedlist>
</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">MsgPtr</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the buffer that contains the software bus message. This must point to the first byte of the message header. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><table rows="1" cols="2"><row>
<entry thead="no"><para>The system time included in the software bus message header (if present), otherwise, returns a time value of zero.  </para></entry></row>
</table>
</para></simplesect>
<simplesect kind="see"><para><ref refid="cfe__sb_8h_1ad7d178a88d5600712eb74afc13e2d666" kindref="member">CFE_SB_GetUserData</ref>, <ref refid="cfe__sb_8h_1afd43694dea8b3cb74af4c2969493256d" kindref="member">CFE_SB_GetMsgId</ref>, <ref refid="cfe__sb_8h_1a9fcbd13f892931483c22a17c1be0c4ab" kindref="member">CFE_SB_GetUserDataLength</ref>, <ref refid="cfe__sb_8h_1ac32b86cf9e1d12a547792853c35f6aa1" kindref="member">CFE_SB_GetTotalMsgLength</ref>, <ref refid="cfe__sb_8h_1a52278f45dbe569c9e003d7bdba58b694" kindref="member">CFE_SB_SetMsgTime</ref>, <ref refid="cfe__sb_8h_1a7b1204be89237bd230fc79ecc88718b5" kindref="member">CFE_SB_GetCmdCode</ref>, <ref refid="cfe__sb_8h_1a5ffc13b78bef6859d203453f76edc044" kindref="member">CFE_SB_GetChecksum</ref>, <ref refid="cfe__sb_8h_1a76fccd1a39d38ea58993191bdd7f4144" kindref="member">CFE_SB_MsgHdrSize</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/cfe_sb.h" line="998" column="1"/>
      </memberdef>
      <memberdef kind="function" id="cfe__sb_8h_1a52278f45dbe569c9e003d7bdba58b694" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="common__types_8h_1a5eb512da689eec1a7472ab97e2ab6be3" kindref="member">int32</ref></type>
        <definition>int32 CFE_SB_SetMsgTime</definition>
        <argsstring>(CFE_SB_MsgPtr_t MsgPtr, CFE_TIME_SysTime_t Time)</argsstring>
        <name>CFE_SB_SetMsgTime</name>
        <param>
          <type><ref refid="cfe__sb_8h_1ab774c47a48e3b6fb0bdd42fb2cb80ad8" kindref="member">CFE_SB_MsgPtr_t</ref></type>
          <declname>MsgPtr</declname>
        </param>
        <param>
          <type><ref refid="struct_c_f_e___t_i_m_e___sys_time__t" kindref="compound">CFE_TIME_SysTime_t</ref></type>
          <declname>Time</declname>
        </param>
        <briefdescription>
<para>Sets the time field in a software bus message. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Description</title><para>This routine sets the time of a software bus message. Most applications will want to use <ref refid="cfe__sb_8h_1aaab4db240d18fa4017741f0f7680e4e1" kindref="member">CFE_SB_TimeStampMsg</ref> instead of this function. But, when needed, <ref refid="cfe__sb_8h_1a52278f45dbe569c9e003d7bdba58b694" kindref="member">CFE_SB_SetMsgTime</ref> can be used to send a group of SB messages with identical time stamps.</para></simplesect>
<simplesect kind="par"><title>Assumptions, External Events, and Notes:</title><para><itemizedlist>
<listitem><para>If the underlying implementation of software bus messages does not include a time field, then this routine will do nothing to the message contents and will return <ref refid="cfe__error_8h_1a8b1d07341b138eaeeeba17bb7e9680d8" kindref="member">CFE_SB_WRONG_MSG_TYPE</ref>.</para></listitem></itemizedlist>
</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">MsgPtr</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the buffer that contains the software bus message. This must point to the first byte of the message header.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">Time</parametername>
</parameternamelist>
<parameterdescription>
<para>The time to include in the message. This will usually be a time returned by the function <ref refid="cfe__time_8h_1abf540f01ef8e0b2c7f2ec755148b6ac6" kindref="member">CFE_TIME_GetTime()</ref>.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><table rows="2" cols="2"><row>
<entry thead="no"><para><ref refid="cfe__error_8h_1ab2b6b188c32c70b8ca0578b7a7bc091b" kindref="member">CFE_SUCCESS</ref> </para></entry><entry thead="no"><para>Operation was performed successfully  </para></entry></row>
<row>
<entry thead="no"><para><ref refid="cfe__error_8h_1a8b1d07341b138eaeeeba17bb7e9680d8" kindref="member">CFE_SB_WRONG_MSG_TYPE</ref> </para></entry><entry thead="no"><para>This error code will be returned when a request such as ...SetMsgTime is made on a packet that does not include a field for msg time.  </para></entry></row>
</table>
</para></simplesect>
<simplesect kind="see"><para><ref refid="cfe__sb_8h_1af0bb4507231046917c9774cf8365203c" kindref="member">CFE_SB_SetMsgId</ref>, <ref refid="cfe__sb_8h_1a1804248c45fea3eb322a950626f67f99" kindref="member">CFE_SB_SetUserDataLength</ref>, <ref refid="cfe__sb_8h_1ae7bfd92ff974a7d5f43d49345ab4b806" kindref="member">CFE_SB_SetTotalMsgLength</ref>, <ref refid="cfe__sb_8h_1adf8ead29ddbb83f4af9491cb14994f3e" kindref="member">CFE_SB_GetMsgTime</ref>, <ref refid="cfe__sb_8h_1aaab4db240d18fa4017741f0f7680e4e1" kindref="member">CFE_SB_TimeStampMsg</ref>, <ref refid="cfe__sb_8h_1aae28d938d29ce8ad689b238562c58d3f" kindref="member">CFE_SB_SetCmdCode</ref>, <ref refid="cfe__sb_8h_1a67765875dfff1d3d6d7cbc4a7ae2f8f0" kindref="member">CFE_SB_InitMsg</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/cfe_sb.h" line="1029" column="1"/>
      </memberdef>
      <memberdef kind="function" id="cfe__sb_8h_1aaab4db240d18fa4017741f0f7680e4e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CFE_SB_TimeStampMsg</definition>
        <argsstring>(CFE_SB_MsgPtr_t MsgPtr)</argsstring>
        <name>CFE_SB_TimeStampMsg</name>
        <param>
          <type><ref refid="cfe__sb_8h_1ab774c47a48e3b6fb0bdd42fb2cb80ad8" kindref="member">CFE_SB_MsgPtr_t</ref></type>
          <declname>MsgPtr</declname>
        </param>
        <briefdescription>
<para>Sets the time field in a software bus message with the current spacecraft time. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Description</title><para>This routine sets the time of a software bus message with the current spacecraft time. This will be the same time that is returned by the function <ref refid="cfe__time_8h_1abf540f01ef8e0b2c7f2ec755148b6ac6" kindref="member">CFE_TIME_GetTime</ref>.</para></simplesect>
<simplesect kind="par"><title>Assumptions, External Events, and Notes:</title><para><itemizedlist>
<listitem><para>If the underlying implementation of software bus messages does not include a time field, then this routine will do nothing.</para></listitem></itemizedlist>
</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">MsgPtr</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the buffer that contains the software bus message. This must point to the first byte of the message header.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="cfe__sb_8h_1af0bb4507231046917c9774cf8365203c" kindref="member">CFE_SB_SetMsgId</ref>, <ref refid="cfe__sb_8h_1a1804248c45fea3eb322a950626f67f99" kindref="member">CFE_SB_SetUserDataLength</ref>, <ref refid="cfe__sb_8h_1ae7bfd92ff974a7d5f43d49345ab4b806" kindref="member">CFE_SB_SetTotalMsgLength</ref>, <ref refid="cfe__sb_8h_1a52278f45dbe569c9e003d7bdba58b694" kindref="member">CFE_SB_SetMsgTime</ref>, <ref refid="cfe__sb_8h_1aae28d938d29ce8ad689b238562c58d3f" kindref="member">CFE_SB_SetCmdCode</ref>, <ref refid="cfe__sb_8h_1a67765875dfff1d3d6d7cbc4a7ae2f8f0" kindref="member">CFE_SB_InitMsg</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/cfe_sb.h" line="1051" column="1"/>
      </memberdef>
      <memberdef kind="function" id="cfe__sb_8h_1a7b1204be89237bd230fc79ecc88718b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="common__types_8h_1a2e00abb078d312d1d8c4fbcd6be343d8" kindref="member">uint16</ref></type>
        <definition>uint16 CFE_SB_GetCmdCode</definition>
        <argsstring>(CFE_SB_MsgPtr_t MsgPtr)</argsstring>
        <name>CFE_SB_GetCmdCode</name>
        <param>
          <type><ref refid="cfe__sb_8h_1ab774c47a48e3b6fb0bdd42fb2cb80ad8" kindref="member">CFE_SB_MsgPtr_t</ref></type>
          <declname>MsgPtr</declname>
        </param>
        <briefdescription>
<para>Gets the command code field from a software bus message. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Description</title><para>This routine gets the command code from a software bus message (if SB messages are implemented as CCSDS packets, this will be the function code).</para></simplesect>
<simplesect kind="par"><title>Assumptions, External Events, and Notes:</title><para><itemizedlist>
<listitem><para>If the underlying implementation of software bus messages does not include a command code field, then this routine will return a zero.</para></listitem></itemizedlist>
</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">MsgPtr</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the buffer that contains the software bus message. This must point to the first byte of the message header.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><table rows="1" cols="2"><row>
<entry thead="no"><para>The command code included in the software bus message header (if present). Otherwise, returns a command code value of zero.  </para></entry></row>
</table>
</para></simplesect>
<simplesect kind="see"><para><ref refid="cfe__sb_8h_1ad7d178a88d5600712eb74afc13e2d666" kindref="member">CFE_SB_GetUserData</ref>, <ref refid="cfe__sb_8h_1afd43694dea8b3cb74af4c2969493256d" kindref="member">CFE_SB_GetMsgId</ref>, <ref refid="cfe__sb_8h_1a9fcbd13f892931483c22a17c1be0c4ab" kindref="member">CFE_SB_GetUserDataLength</ref>, <ref refid="cfe__sb_8h_1ac32b86cf9e1d12a547792853c35f6aa1" kindref="member">CFE_SB_GetTotalMsgLength</ref>, <ref refid="cfe__sb_8h_1adf8ead29ddbb83f4af9491cb14994f3e" kindref="member">CFE_SB_GetMsgTime</ref>, <ref refid="cfe__sb_8h_1aae28d938d29ce8ad689b238562c58d3f" kindref="member">CFE_SB_SetCmdCode</ref>, <ref refid="cfe__sb_8h_1a5ffc13b78bef6859d203453f76edc044" kindref="member">CFE_SB_GetChecksum</ref>, <ref refid="cfe__sb_8h_1a76fccd1a39d38ea58993191bdd7f4144" kindref="member">CFE_SB_MsgHdrSize</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/cfe_sb.h" line="1077" column="1"/>
      </memberdef>
      <memberdef kind="function" id="cfe__sb_8h_1aae28d938d29ce8ad689b238562c58d3f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="common__types_8h_1a5eb512da689eec1a7472ab97e2ab6be3" kindref="member">int32</ref></type>
        <definition>int32 CFE_SB_SetCmdCode</definition>
        <argsstring>(CFE_SB_MsgPtr_t MsgPtr, uint16 CmdCode)</argsstring>
        <name>CFE_SB_SetCmdCode</name>
        <param>
          <type><ref refid="cfe__sb_8h_1ab774c47a48e3b6fb0bdd42fb2cb80ad8" kindref="member">CFE_SB_MsgPtr_t</ref></type>
          <declname>MsgPtr</declname>
        </param>
        <param>
          <type><ref refid="common__types_8h_1a2e00abb078d312d1d8c4fbcd6be343d8" kindref="member">uint16</ref></type>
          <declname>CmdCode</declname>
        </param>
        <briefdescription>
<para>Sets the command code field in a software bus message. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Description</title><para>This routine sets the command code of a software bus message (if SB messages are implemented as CCSDS packets, this will be the function code).</para></simplesect>
<simplesect kind="par"><title>Assumptions, External Events, and Notes:</title><para><itemizedlist>
<listitem><para>If the underlying implementation of software bus messages does not include a command code field, then this routine will do nothing to the message contents and will return <ref refid="cfe__error_8h_1a8b1d07341b138eaeeeba17bb7e9680d8" kindref="member">CFE_SB_WRONG_MSG_TYPE</ref>.</para></listitem></itemizedlist>
</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">MsgPtr</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the buffer that contains the software bus message. This must point to the first byte of the message header.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">CmdCode</parametername>
</parameternamelist>
<parameterdescription>
<para>The command code to include in the message.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><table rows="2" cols="2"><row>
<entry thead="no"><para><ref refid="cfe__error_8h_1ab2b6b188c32c70b8ca0578b7a7bc091b" kindref="member">CFE_SUCCESS</ref> </para></entry><entry thead="no"><para>Operation was performed successfully  </para></entry></row>
<row>
<entry thead="no"><para><ref refid="cfe__error_8h_1a8b1d07341b138eaeeeba17bb7e9680d8" kindref="member">CFE_SB_WRONG_MSG_TYPE</ref> </para></entry><entry thead="no"><para>This error code will be returned when a request such as ...SetMsgTime is made on a packet that does not include a field for msg time.  </para></entry></row>
</table>
</para></simplesect>
<simplesect kind="see"><para><ref refid="cfe__sb_8h_1af0bb4507231046917c9774cf8365203c" kindref="member">CFE_SB_SetMsgId</ref>, <ref refid="cfe__sb_8h_1a1804248c45fea3eb322a950626f67f99" kindref="member">CFE_SB_SetUserDataLength</ref>, <ref refid="cfe__sb_8h_1ae7bfd92ff974a7d5f43d49345ab4b806" kindref="member">CFE_SB_SetTotalMsgLength</ref>, <ref refid="cfe__sb_8h_1a52278f45dbe569c9e003d7bdba58b694" kindref="member">CFE_SB_SetMsgTime</ref>, <ref refid="cfe__sb_8h_1aaab4db240d18fa4017741f0f7680e4e1" kindref="member">CFE_SB_TimeStampMsg</ref>, <ref refid="cfe__sb_8h_1a7b1204be89237bd230fc79ecc88718b5" kindref="member">CFE_SB_GetCmdCode</ref>, <ref refid="cfe__sb_8h_1a67765875dfff1d3d6d7cbc4a7ae2f8f0" kindref="member">CFE_SB_InitMsg</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/cfe_sb.h" line="1105" column="1"/>
      </memberdef>
      <memberdef kind="function" id="cfe__sb_8h_1a5ffc13b78bef6859d203453f76edc044" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="common__types_8h_1a2e00abb078d312d1d8c4fbcd6be343d8" kindref="member">uint16</ref></type>
        <definition>uint16 CFE_SB_GetChecksum</definition>
        <argsstring>(CFE_SB_MsgPtr_t MsgPtr)</argsstring>
        <name>CFE_SB_GetChecksum</name>
        <param>
          <type><ref refid="cfe__sb_8h_1ab774c47a48e3b6fb0bdd42fb2cb80ad8" kindref="member">CFE_SB_MsgPtr_t</ref></type>
          <declname>MsgPtr</declname>
        </param>
        <briefdescription>
<para>Gets the checksum field from a software bus message. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Description</title><para>This routine gets the checksum (or other message integrity check value) from a software bus message. The contents and location of this field will depend on the underlying implementation of software bus messages. It may be a checksum, a CRC, or some other algorithm. Users should not call this function as part of a message integrity check (call <ref refid="cfe__sb_8h_1a3245babbfb1f2f2c5a2358d41fd004ad" kindref="member">CFE_SB_ValidateChecksum</ref> instead).</para></simplesect>
<simplesect kind="par"><title>Assumptions, External Events, and Notes:</title><para><itemizedlist>
<listitem><para>If the underlying implementation of software bus messages does not include a checksum field, then this routine will return a zero.</para></listitem></itemizedlist>
</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">MsgPtr</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the buffer that contains the software bus message. This must point to the first byte of the message header.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><table rows="1" cols="2"><row>
<entry thead="no"><para>The checksum included in the software bus message header (if present), otherwise, returns a checksum value of zero.  </para></entry></row>
</table>
</para></simplesect>
<simplesect kind="see"><para><ref refid="cfe__sb_8h_1ad7d178a88d5600712eb74afc13e2d666" kindref="member">CFE_SB_GetUserData</ref>, <ref refid="cfe__sb_8h_1afd43694dea8b3cb74af4c2969493256d" kindref="member">CFE_SB_GetMsgId</ref>, <ref refid="cfe__sb_8h_1a9fcbd13f892931483c22a17c1be0c4ab" kindref="member">CFE_SB_GetUserDataLength</ref>, <ref refid="cfe__sb_8h_1ac32b86cf9e1d12a547792853c35f6aa1" kindref="member">CFE_SB_GetTotalMsgLength</ref>, <ref refid="cfe__sb_8h_1adf8ead29ddbb83f4af9491cb14994f3e" kindref="member">CFE_SB_GetMsgTime</ref>, <ref refid="cfe__sb_8h_1a7b1204be89237bd230fc79ecc88718b5" kindref="member">CFE_SB_GetCmdCode</ref>, <ref refid="cfe__sb_8h_1a5ffc13b78bef6859d203453f76edc044" kindref="member">CFE_SB_GetChecksum</ref>, <ref refid="cfe__sb_8h_1a76fccd1a39d38ea58993191bdd7f4144" kindref="member">CFE_SB_MsgHdrSize</ref>, <ref refid="cfe__sb_8h_1a3245babbfb1f2f2c5a2358d41fd004ad" kindref="member">CFE_SB_ValidateChecksum</ref>, <ref refid="cfe__sb_8h_1ab938a22e368e400c16ce7dc97767f237" kindref="member">CFE_SB_GenerateChecksum</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/cfe_sb.h" line="1136" column="1"/>
      </memberdef>
      <memberdef kind="function" id="cfe__sb_8h_1ab938a22e368e400c16ce7dc97767f237" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CFE_SB_GenerateChecksum</definition>
        <argsstring>(CFE_SB_MsgPtr_t MsgPtr)</argsstring>
        <name>CFE_SB_GenerateChecksum</name>
        <param>
          <type><ref refid="cfe__sb_8h_1ab774c47a48e3b6fb0bdd42fb2cb80ad8" kindref="member">CFE_SB_MsgPtr_t</ref></type>
          <declname>MsgPtr</declname>
        </param>
        <briefdescription>
<para>Calculates and sets the checksum of a software bus message. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Description</title><para>This routine calculates the checksum of a software bus message according to an implementation-defined algorithm. Then, it sets the checksum field in the message with the calculated value. The contents and location of this field will depend on the underlying implementation of software bus messages. It may be a checksum, a CRC, or some other algorithm.</para></simplesect>
<simplesect kind="par"><title>Assumptions, External Events, and Notes:</title><para><itemizedlist>
<listitem><para>If the underlying implementation of software bus messages does not include a checksum field, then this routine will do nothing.</para></listitem></itemizedlist>
</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">MsgPtr</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the buffer that contains the software bus message. This must point to the first byte of the message header.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="cfe__sb_8h_1a3245babbfb1f2f2c5a2358d41fd004ad" kindref="member">CFE_SB_ValidateChecksum</ref>, <ref refid="cfe__sb_8h_1a5ffc13b78bef6859d203453f76edc044" kindref="member">CFE_SB_GetChecksum</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/cfe_sb.h" line="1158" column="1"/>
      </memberdef>
      <memberdef kind="function" id="cfe__sb_8h_1a3245babbfb1f2f2c5a2358d41fd004ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="common__types_8h_1ac3ecf6d00ebd3dd79ea00efdc71d9c33" kindref="member">boolean</ref></type>
        <definition>boolean CFE_SB_ValidateChecksum</definition>
        <argsstring>(CFE_SB_MsgPtr_t MsgPtr)</argsstring>
        <name>CFE_SB_ValidateChecksum</name>
        <param>
          <type><ref refid="cfe__sb_8h_1ab774c47a48e3b6fb0bdd42fb2cb80ad8" kindref="member">CFE_SB_MsgPtr_t</ref></type>
          <declname>MsgPtr</declname>
        </param>
        <briefdescription>
<para>Validates the checksum of a software bus message. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Description</title><para>This routine calculates the expected checksum of a software bus message according to an implementation-defined algorithm. Then, it checks the calculated value against the value in the message&apos;s checksum. If the checksums do not match, this routine will generate an event message reporting the error.</para></simplesect>
<simplesect kind="par"><title>Assumptions, External Events, and Notes:</title><para><itemizedlist>
<listitem><para>If the underlying implementation of software bus messages does not include a checksum field, then this routine will always return <computeroutput>TRUE</computeroutput>.</para></listitem></itemizedlist>
</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">MsgPtr</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the buffer that contains the software bus message. This must point to the first byte of the message header.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><table rows="2" cols="2"><row>
<entry thead="no"><para>TRUE </para></entry><entry thead="no"><para>The checksum field in the packet is valid.  </para></entry></row>
<row>
<entry thead="no"><para>FALSE </para></entry><entry thead="no"><para>The checksum field in the packet is not valid or the message type is wrong.  </para></entry></row>
</table>
</para></simplesect>
<simplesect kind="see"><para><ref refid="cfe__sb_8h_1ab938a22e368e400c16ce7dc97767f237" kindref="member">CFE_SB_GenerateChecksum</ref>, <ref refid="cfe__sb_8h_1a5ffc13b78bef6859d203453f76edc044" kindref="member">CFE_SB_GetChecksum</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/cfe_sb.h" line="1185" column="1"/>
      </memberdef>
      <memberdef kind="function" id="cfe__sb_8h_1afec4600af61cf4be7c6b979fb249bf8a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="common__types_8h_1a5eb512da689eec1a7472ab97e2ab6be3" kindref="member">int32</ref></type>
        <definition>int32 CFE_SB_MessageStringGet</definition>
        <argsstring>(char *DestStringPtr, const char *SourceStringPtr, const char *DefaultString, uint32 DestMaxSize, uint32 SourceMaxSize)</argsstring>
        <name>CFE_SB_MessageStringGet</name>
        <param>
          <type>char *</type>
          <declname>DestStringPtr</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>SourceStringPtr</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>DefaultString</declname>
        </param>
        <param>
          <type><ref refid="common__types_8h_1a9560e25c315bae45d1ed4e2ce49ce55a" kindref="member">uint32</ref></type>
          <declname>DestMaxSize</declname>
        </param>
        <param>
          <type><ref refid="common__types_8h_1a9560e25c315bae45d1ed4e2ce49ce55a" kindref="member">uint32</ref></type>
          <declname>SourceMaxSize</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/cfe_sb.h" line="1230" column="1"/>
      </memberdef>
      <memberdef kind="function" id="cfe__sb_8h_1afa44859f8be6de2925ece59ba6cda9b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="common__types_8h_1a5eb512da689eec1a7472ab97e2ab6be3" kindref="member">int32</ref></type>
        <definition>int32 CFE_SB_MessageStringSet</definition>
        <argsstring>(char *DestStringPtr, const char *SourceStringPtr, uint32 DestMaxSize, uint32 SourceMaxSize)</argsstring>
        <name>CFE_SB_MessageStringSet</name>
        <param>
          <type>char *</type>
          <declname>DestStringPtr</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>SourceStringPtr</declname>
        </param>
        <param>
          <type><ref refid="common__types_8h_1a9560e25c315bae45d1ed4e2ce49ce55a" kindref="member">uint32</ref></type>
          <declname>DestMaxSize</declname>
        </param>
        <param>
          <type><ref refid="common__types_8h_1a9560e25c315bae45d1ed4e2ce49ce55a" kindref="member">uint32</ref></type>
          <declname>SourceMaxSize</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/cfe_sb.h" line="1267" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/******************************************************************************</highlight></codeline>
<codeline lineno="2"><highlight class="comment">**<sp/>File:<sp/>cfe_sb.h</highlight></codeline>
<codeline lineno="3"><highlight class="comment">**</highlight></codeline>
<codeline lineno="4"><highlight class="comment">**<sp/><sp/><sp/><sp/><sp/><sp/>Copyright<sp/>(c)<sp/>2004-2006,<sp/>United<sp/>States<sp/>government<sp/>as<sp/>represented<sp/>by<sp/>the</highlight></codeline>
<codeline lineno="5"><highlight class="comment">**<sp/><sp/><sp/><sp/><sp/><sp/>administrator<sp/>of<sp/>the<sp/>National<sp/>Aeronautics<sp/>Space<sp/>Administration.</highlight></codeline>
<codeline lineno="6"><highlight class="comment">**<sp/><sp/><sp/><sp/><sp/><sp/>All<sp/>rights<sp/>reserved.<sp/>This<sp/>software(cFE)<sp/>was<sp/>created<sp/>at<sp/>NASA&apos;s<sp/>Goddard</highlight></codeline>
<codeline lineno="7"><highlight class="comment">**<sp/><sp/><sp/><sp/><sp/><sp/>Space<sp/>Flight<sp/>Center<sp/>pursuant<sp/>to<sp/>government<sp/>contracts.</highlight></codeline>
<codeline lineno="8"><highlight class="comment">**</highlight></codeline>
<codeline lineno="9"><highlight class="comment">**<sp/><sp/><sp/><sp/><sp/><sp/>This<sp/>is<sp/>governed<sp/>by<sp/>the<sp/>NASA<sp/>Open<sp/>Source<sp/>Agreement<sp/>and<sp/>may<sp/>be<sp/>used,</highlight></codeline>
<codeline lineno="10"><highlight class="comment">**<sp/><sp/><sp/><sp/><sp/><sp/>distributed<sp/>and<sp/>modified<sp/>only<sp/>pursuant<sp/>to<sp/>the<sp/>terms<sp/>of<sp/>that<sp/>agreement.</highlight></codeline>
<codeline lineno="11"><highlight class="comment">**</highlight></codeline>
<codeline lineno="12"><highlight class="comment">**</highlight></codeline>
<codeline lineno="13"><highlight class="comment">**<sp/>Purpose:</highlight></codeline>
<codeline lineno="14"><highlight class="comment">**<sp/><sp/><sp/><sp/><sp/><sp/>This<sp/>header<sp/>file<sp/>contains<sp/>all<sp/>definitions<sp/>for<sp/>the<sp/>cFE<sp/>Software<sp/>Bus</highlight></codeline>
<codeline lineno="15"><highlight class="comment">**<sp/><sp/><sp/><sp/><sp/><sp/>Application<sp/>Programmer&apos;s<sp/>Interface.</highlight></codeline>
<codeline lineno="16"><highlight class="comment">**</highlight></codeline>
<codeline lineno="17"><highlight class="comment">**<sp/>Author:<sp/><sp/><sp/>R.McGraw/SSI</highlight></codeline>
<codeline lineno="18"><highlight class="comment">**</highlight></codeline>
<codeline lineno="19"><highlight class="comment">**<sp/>$Log:<sp/>cfe_sb.h<sp/><sp/>$</highlight></codeline>
<codeline lineno="20"><highlight class="comment">**<sp/>Revision<sp/>1.10<sp/>2011/04/07<sp/>08:34:14GMT-05:00<sp/>lwalling<sp/></highlight></codeline>
<codeline lineno="21"><highlight class="comment">**<sp/>This<sp/>file<sp/>references<sp/>CFE<sp/>TIME<sp/>structures,<sp/>therefore<sp/>it<sp/>should<sp/>include<sp/>cfe_time.h</highlight></codeline>
<codeline lineno="22"><highlight class="comment">**<sp/>Revision<sp/>1.9<sp/>2009/07/29<sp/>19:21:50EDT<sp/>aschoeni<sp/></highlight></codeline>
<codeline lineno="23"><highlight class="comment">**<sp/>Added<sp/>ZeroCopyHandle_t</highlight></codeline>
<codeline lineno="24"><highlight class="comment">**<sp/>Revision<sp/>1.8<sp/>2009/07/24<sp/>18:25:20EDT<sp/>aschoeni<sp/></highlight></codeline>
<codeline lineno="25"><highlight class="comment">**<sp/>Added<sp/>Zero<sp/>Copy<sp/>Mode</highlight></codeline>
<codeline lineno="26"><highlight class="comment">**<sp/>Revision<sp/>1.7<sp/>2009/07/17<sp/>19:42:20EDT<sp/>aschoeni<sp/></highlight></codeline>
<codeline lineno="27"><highlight class="comment">**<sp/>Added<sp/>PassMsg<sp/>API<sp/>to<sp/>sb<sp/>to<sp/>support<sp/>sequence<sp/>count<sp/>preservation</highlight></codeline>
<codeline lineno="28"><highlight class="comment">**<sp/>Revision<sp/>1.6<sp/>2009/06/10<sp/>09:15:06EDT<sp/>acudmore<sp/></highlight></codeline>
<codeline lineno="29"><highlight class="comment">**<sp/>updated<sp/>os_bsp.h<sp/>to<sp/>cfe_psp.h</highlight></codeline>
<codeline lineno="30"><highlight class="comment">**<sp/>Revision<sp/>1.5<sp/>2009/04/29<sp/>10:03:59EDT<sp/>rmcgraw<sp/></highlight></codeline>
<codeline lineno="31"><highlight class="comment">**<sp/>DCR5801:11<sp/>Changed<sp/>comments<sp/>related<sp/>to<sp/>subscription<sp/>return<sp/>value</highlight></codeline>
<codeline lineno="32"><highlight class="comment">**<sp/>Revision<sp/>1.4<sp/>2009/02/27<sp/>09:55:04EST<sp/>rmcgraw<sp/></highlight></codeline>
<codeline lineno="33"><highlight class="comment">**<sp/>DCR1709:1<sp/>Removed<sp/>incorrect<sp/>comment<sp/>in<sp/>SetTotalMsgLength<sp/></highlight></codeline>
<codeline lineno="34"><highlight class="comment">**<sp/>and<sp/>reworded<sp/>other<sp/>comments</highlight></codeline>
<codeline lineno="35"><highlight class="comment">**<sp/>Revision<sp/>1.3<sp/>2009/02/26<sp/>17:49:19EST<sp/>rmcgraw<sp/></highlight></codeline>
<codeline lineno="36"><highlight class="comment">**<sp/>DCR6805:1<sp/>Added<sp/>note<sp/>under<sp/>subscription<sp/>API<sp/>declaration</highlight></codeline>
<codeline lineno="37"><highlight class="comment">**<sp/>Revision<sp/>1.2<sp/>2008/12/08<sp/>12:06:56EST<sp/>dkobe<sp/></highlight></codeline>
<codeline lineno="38"><highlight class="comment">**<sp/>Updates<sp/>to<sp/>correct<sp/>doxygen<sp/>errors</highlight></codeline>
<codeline lineno="39"><highlight class="comment">**<sp/>Revision<sp/>1.1<sp/>2008/04/17<sp/>08:05:22EDT<sp/>ruperera<sp/></highlight></codeline>
<codeline lineno="40"><highlight class="comment">**<sp/>Initial<sp/>revision</highlight></codeline>
<codeline lineno="41"><highlight class="comment">**<sp/>Member<sp/>added<sp/>to<sp/>cfe<sp/>project<sp/>on<sp/>tlserver3</highlight></codeline>
<codeline lineno="42"><highlight class="comment">**<sp/>Revision<sp/>1.25<sp/>2007/09/25<sp/>10:34:38EDT<sp/>rjmcgraw<sp/></highlight></codeline>
<codeline lineno="43"><highlight class="comment">**<sp/>DCR5127<sp/>Added<sp/>doxygen<sp/>comments</highlight></codeline>
<codeline lineno="44"><highlight class="comment">**<sp/>Revision<sp/>1.24<sp/>2007/07/06<sp/>13:18:35EDT<sp/>rjmcgraw<sp/></highlight></codeline>
<codeline lineno="45"><highlight class="comment">**<sp/>DCR469:1<sp/>Changed<sp/>function<sp/>prototype<sp/>for<sp/>GetLastSenderId</highlight></codeline>
<codeline lineno="46"><highlight class="comment">**<sp/>Revision<sp/>1.23<sp/>2007/05/23<sp/>11:22:02EDT<sp/>dlkobe<sp/></highlight></codeline>
<codeline lineno="47"><highlight class="comment">**<sp/>Added<sp/>doxygen<sp/>formatting</highlight></codeline>
<codeline lineno="48"><highlight class="comment">**<sp/>Revision<sp/>1.22<sp/>2007/04/19<sp/>15:47:03EDT<sp/>rjmcgraw<sp/></highlight></codeline>
<codeline lineno="49"><highlight class="comment">**<sp/>Moved<sp/>subscription<sp/>reporting<sp/>structs<sp/>to<sp/>cfe_sb_msg.h</highlight></codeline>
<codeline lineno="50"><highlight class="comment">**<sp/>Revision<sp/>1.20<sp/>2007/03/22<sp/>12:55:20EST<sp/>rjmcgraw<sp/></highlight></codeline>
<codeline lineno="51"><highlight class="comment">**<sp/>Added<sp/>comments<sp/>regarding<sp/>Qos</highlight></codeline>
<codeline lineno="52"><highlight class="comment">**<sp/>Revision<sp/>1.19<sp/>2007/01/24<sp/>16:49:35EST<sp/>rjmcgraw</highlight></codeline>
<codeline lineno="53"><highlight class="comment">**<sp/>Added<sp/>Pipe<sp/>to<sp/>SubEntries_t</highlight></codeline>
<codeline lineno="54"><highlight class="comment">**<sp/>Revision<sp/>1.18<sp/>2007/01/08<sp/>14:42:18EST<sp/>rjmcgraw</highlight></codeline>
<codeline lineno="55"><highlight class="comment">**<sp/>Moved<sp/>SubscribeLocal<sp/>prototypes<sp/>to<sp/>this<sp/>file<sp/>from<sp/>cfe_sb_priv.h</highlight></codeline>
<codeline lineno="56"><highlight class="comment">**<sp/>Revision<sp/>1.17<sp/>2007/01/04<sp/>14:49:44EST<sp/>rjmcgraw</highlight></codeline>
<codeline lineno="57"><highlight class="comment">**<sp/>Added<sp/>SubType<sp/>to<sp/>CFE_SB_SubRprtMsg_t</highlight></codeline>
<codeline lineno="58"><highlight class="comment">**<sp/>Revision<sp/>1.16<sp/>2007/01/02<sp/>10:01:35EST<sp/>rjmcgraw</highlight></codeline>
<codeline lineno="59"><highlight class="comment">**<sp/>Moved<sp/>structs<sp/>from<sp/>priv.h<sp/>to<sp/>cfe_sb.h<sp/>for<sp/>exposure<sp/>to<sp/>apps</highlight></codeline>
<codeline lineno="60"><highlight class="comment">**<sp/>Revision<sp/>1.15<sp/>2006/12/28<sp/>16:27:34EST<sp/>rjmcgraw</highlight></codeline>
<codeline lineno="61"><highlight class="comment">**<sp/>Added<sp/>cmd<sp/>codes<sp/>for<sp/>SB<sp/>subscription<sp/>processing</highlight></codeline>
<codeline lineno="62"><highlight class="comment">**</highlight></codeline>
<codeline lineno="63"><highlight class="comment">******************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>_cfe_sb_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_cfe_sb_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="73"><highlight class="comment">**<sp/>Includes</highlight></codeline>
<codeline lineno="74"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;osconfig.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;cfe_psp.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="common__types_8h" kindref="compound">common_types.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="cfe__mission__cfg_8h" kindref="compound">cfe_mission_cfg.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;cfe_platform_cfg.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="ccsds_8h" kindref="compound">ccsds.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="cfe__time_8h" kindref="compound">cfe_time.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="85"><highlight class="comment">**<sp/>Defines</highlight></codeline>
<codeline lineno="86"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87" refid="cfe__sb_8h_1a0c0ca8cca37a759bd5e68e81e73ce67a" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CFE_SB_POLL<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="88" refid="cfe__sb_8h_1acc9e6f66cd026d1c987c4c3de827366f" refkind="member"><highlight class="preprocessor">#define<sp/>CFE_SB_PEND_FOREVER<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-1<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="89" refid="cfe__sb_8h_1a52552eef8a98fa61c13cca7d9406d04c" refkind="member"><highlight class="preprocessor">#define<sp/>CFE_SB_SUB_ENTRIES_PER_PKT<sp/><sp/><sp/><sp/><sp/><sp/>20<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="90" refid="cfe__sb_8h_1a28842c3298db0d367a64cb79d56220c6" refkind="member"><highlight class="preprocessor">#define<sp/>CFE_SB_SUBSCRIPTION<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="91" refid="cfe__sb_8h_1a9471edf830792940448e050b468e619d" refkind="member"><highlight class="preprocessor">#define<sp/>CFE_SB_UNSUBSCRIPTION<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="93"><highlight class="preprocessor"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="94"><highlight class="comment">**<sp/>Macro<sp/>Definitions</highlight></codeline>
<codeline lineno="95"><highlight class="comment">*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96" refid="cfe__sb_8h_1aa8d423da541f77cf50bb0930c9254502" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CFE_BIT(x)<sp/><sp/><sp/>(1<sp/>&lt;&lt;<sp/>(x))<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="97" refid="cfe__sb_8h_1a5d6d389b52264dc361d11be57ab6e434" refkind="member"><highlight class="preprocessor">#define<sp/>CFE_SET(i,x)<sp/>((i)<sp/>|=<sp/>CFE_BIT(x))<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="98" refid="cfe__sb_8h_1aca5e2dac34eaa3579ba91a8561e86a7c" refkind="member"><highlight class="preprocessor">#define<sp/>CFE_CLR(i,x)<sp/>((i)<sp/>&amp;=<sp/>~CFE_BIT(x))<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="99" refid="cfe__sb_8h_1ae2177f2ecbc89b694e07123c666d5c91" refkind="member"><highlight class="preprocessor">#define<sp/>CFE_TST(i,x)<sp/>(((i)<sp/>&amp;<sp/>CFE_BIT(x))<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="107" refid="cfe__sb_8h_1aad3e28d791a0e95751e1f1809700375d" refkind="member"><highlight class="preprocessor">#define<sp/>CFE_SB_SET_MEMADDR(msgdst,src)<sp/><sp/><sp/><sp/><sp/><sp/><sp/>msgdst<sp/>=<sp/>(cpuaddr)src</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="113" refid="cfe__sb_8h_1ab7885ff31aa86692a89038008125bc96" refkind="member"><highlight class="preprocessor">#define<sp/>CFE_SB_GET_MEMADDR(msgsrc)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(cpuaddr)msgsrc</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="116"><highlight class="comment">**<sp/>Type<sp/>Definitions</highlight></codeline>
<codeline lineno="117"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>MESSAGE_FORMAT_IS_CCSDS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="121" refid="union_c_f_e___s_b___msg__t" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">union<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="122" refid="union_c_f_e___s_b___msg__t_1a2196f80398daa6125a023a19376e6622" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_c_c_s_d_s___pri_hdr__t" kindref="compound">CCSDS_PriHdr_t</ref><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="union_c_f_e___s_b___msg__t_1a2196f80398daa6125a023a19376e6622" kindref="member">Hdr</ref>;<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="123" refid="union_c_f_e___s_b___msg__t_1ab54a05dd6c1888382e77715e062e5641" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="common__types_8h_1a9560e25c315bae45d1ed4e2ce49ce55a" kindref="member">uint32</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="union_c_f_e___s_b___msg__t_1ab54a05dd6c1888382e77715e062e5641" kindref="member">Dword</ref>;<sp/></highlight></codeline>
<codeline lineno="124" refid="union_c_f_e___s_b___msg__t_1a47ac9e1f914dc70da333ef0ba0a6968f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="common__types_8h_1adde6aaee8457bee49c2a92621fe22b79" kindref="member">uint8</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Byte[</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_c_c_s_d_s___pri_hdr__t" kindref="compound">CCSDS_PriHdr_t</ref>)];<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/>}<ref refid="union_c_f_e___s_b___msg__t" kindref="compound">CFE_SB_Msg_t</ref>;</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="128" refid="struct_c_f_e___s_b___cmd_hdr__t" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="129" refid="struct_c_f_e___s_b___cmd_hdr__t_1af0665841a63ea344fe92e3eb5ecfd1f1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_c_c_s_d_s___pri_hdr__t" kindref="compound">CCSDS_PriHdr_t</ref><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_c_f_e___s_b___cmd_hdr__t_1af0665841a63ea344fe92e3eb5ecfd1f1" kindref="member">Pri</ref>;</highlight></codeline>
<codeline lineno="130" refid="struct_c_f_e___s_b___cmd_hdr__t_1a114e05e3e3aab6124473d74c9b1018fc" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_c_c_s_d_s___cmd_sec_hdr__t" kindref="compound">CCSDS_CmdSecHdr_t</ref><sp/><sp/><sp/><ref refid="struct_c_f_e___s_b___cmd_hdr__t_1a114e05e3e3aab6124473d74c9b1018fc" kindref="member">Sec</ref>;</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/>}<ref refid="struct_c_f_e___s_b___cmd_hdr__t" kindref="compound">CFE_SB_CmdHdr_t</ref>;</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="134" refid="struct_c_f_e___s_b___tlm_hdr__t" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="135" refid="struct_c_f_e___s_b___tlm_hdr__t_1af137ae8bf218c2ddc22583847535b583" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_c_c_s_d_s___pri_hdr__t" kindref="compound">CCSDS_PriHdr_t</ref><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_c_f_e___s_b___tlm_hdr__t_1af137ae8bf218c2ddc22583847535b583" kindref="member">Pri</ref>;</highlight></codeline>
<codeline lineno="136" refid="struct_c_f_e___s_b___tlm_hdr__t_1ad6fad6a747dc78e0308dd4867003c33a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_c_c_s_d_s___tlm_sec_hdr__t" kindref="compound">CCSDS_TlmSecHdr_t</ref><sp/><sp/><sp/><ref refid="struct_c_f_e___s_b___tlm_hdr__t_1ad6fad6a747dc78e0308dd4867003c33a" kindref="member">Sec</ref>;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/>}<ref refid="struct_c_f_e___s_b___tlm_hdr__t" kindref="compound">CFE_SB_TlmHdr_t</ref>;</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="139" refid="cfe__sb_8h_1acc49ae58990b23f72824e1b742c78cb8" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>CFE_SB_CMD_HDR_SIZE<sp/><sp/><sp/><sp/><sp/>(sizeof(CFE_SB_CmdHdr_t))</highlight></codeline>
<codeline lineno="140" refid="cfe__sb_8h_1abf04f5fc43f637e617096626d357fb79" refkind="member"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>CFE_SB_TLM_HDR_SIZE<sp/><sp/><sp/><sp/><sp/>(sizeof(CFE_SB_TlmHdr_t))</highlight></codeline>
<codeline lineno="142"><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>MESSAGE_FORMAT_IS_CCSDS<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="150" refid="cfe__sb_8h_1a04b5b03f0c6a66ece34c3d3727cfc917" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="common__types_8h_1a9560e25c315bae45d1ed4e2ce49ce55a" kindref="member">uint32</ref><sp/><ref refid="cfe__sb_8h_1a04b5b03f0c6a66ece34c3d3727cfc917" kindref="member">CFE_SB_TimeOut_t</ref>;</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="156" refid="cfe__sb_8h_1a9e7147bf0798bb7a3ebd165bdbdf320f" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="common__types_8h_1adde6aaee8457bee49c2a92621fe22b79" kindref="member">uint8</ref><sp/><sp/><ref refid="cfe__sb_8h_1a9e7147bf0798bb7a3ebd165bdbdf320f" kindref="member">CFE_SB_PipeId_t</ref>;</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="162" refid="cfe__sb_8h_1a213323eb4fb69a395a343ad66045ae74" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="common__types_8h_1a2e00abb078d312d1d8c4fbcd6be343d8" kindref="member">uint16</ref><sp/><ref refid="cfe__sb_8h_1a213323eb4fb69a395a343ad66045ae74" kindref="member">CFE_SB_MsgId_t</ref>;</highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="165" refid="cfe__sb_8h_1ab774c47a48e3b6fb0bdd42fb2cb80ad8" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>CFE_SB_Msg_t<sp/>*<ref refid="cfe__sb_8h_1ab774c47a48e3b6fb0bdd42fb2cb80ad8" kindref="member">CFE_SB_MsgPtr_t</ref>;</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="168" refid="cfe__sb_8h_1a6b281dc368bb649b286691b370417781" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="common__types_8h_1adde6aaee8457bee49c2a92621fe22b79" kindref="member">uint8</ref><sp/>*<ref refid="cfe__sb_8h_1a6b281dc368bb649b286691b370417781" kindref="member">CFE_SB_MsgPayloadPtr_t</ref>;</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="174" refid="cfe__sb_8h_1ad75799a3f44e35ccee00f7b434097798" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="common__types_8h_1abddffd9b6badf27493baed70e95972b4" kindref="member">cpuaddr</ref><sp/><ref refid="cfe__sb_8h_1ad75799a3f44e35ccee00f7b434097798" kindref="member">CFE_SB_ZeroCopyHandle_t</ref>;</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="181" refid="struct_c_f_e___s_b___qos__t" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="182" refid="struct_c_f_e___s_b___qos__t_1ad3d2be85fd6ae49344ed70aa0a57df0c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="common__types_8h_1adde6aaee8457bee49c2a92621fe22b79" kindref="member">uint8</ref><sp/><ref refid="struct_c_f_e___s_b___qos__t_1ad3d2be85fd6ae49344ed70aa0a57df0c" kindref="member">Priority</ref>;</highlight></codeline>
<codeline lineno="183" refid="struct_c_f_e___s_b___qos__t_1adff0dd4ccb04e862db28afe8b4722cfb" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="common__types_8h_1adde6aaee8457bee49c2a92621fe22b79" kindref="member">uint8</ref><sp/><ref refid="struct_c_f_e___s_b___qos__t_1adff0dd4ccb04e862db28afe8b4722cfb" kindref="member">Reliability</ref>;</highlight></codeline>
<codeline lineno="184"><highlight class="normal">}<ref refid="struct_c_f_e___s_b___qos__t" kindref="compound">CFE_SB_Qos_t</ref>;</highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="struct_c_f_e___s_b___qos__t" kindref="compound">CFE_SB_Qos_t</ref><sp/><ref refid="cfe__sb_8h_1aa20e8d7fe06a65514dd39e65a7be5ca5" kindref="member">CFE_SB_Default_Qos</ref>;</highlight></codeline>
<codeline lineno="194" refid="struct_c_f_e___s_b___sender_id__t" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="195" refid="struct_c_f_e___s_b___sender_id__t_1a2267e7296e4adb70095ec787bd8caad6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="common__types_8h_1a9560e25c315bae45d1ed4e2ce49ce55a" kindref="member">uint32</ref><sp/><sp/><ref refid="struct_c_f_e___s_b___sender_id__t_1a2267e7296e4adb70095ec787bd8caad6" kindref="member">ProcessorId</ref>;</highlight></codeline>
<codeline lineno="196" refid="struct_c_f_e___s_b___sender_id__t_1a8f5ec6f6aeb0fd40089e60e76c642d97" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>AppName[OS_MAX_API_NAME];</highlight></codeline>
<codeline lineno="197"><highlight class="normal">}<sp/><ref refid="struct_c_f_e___s_b___sender_id__t" kindref="compound">CFE_SB_SenderId_t</ref>;</highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="200"><highlight class="comment">**<sp/><sp/>cFE<sp/>SB<sp/>Application<sp/>Programmer<sp/>Interface&apos;s<sp/>(API&apos;s)</highlight></codeline>
<codeline lineno="201"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight><highlight class="comment">/*****************************************************************************/</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><ref refid="common__types_8h_1a5eb512da689eec1a7472ab97e2ab6be3" kindref="member">int32</ref><sp/><sp/><ref refid="cfe__sb_8h_1ac169b781c59074e6cbab49325726c4e2" kindref="member">CFE_SB_CreatePipe</ref>(CFE_SB_PipeId_t<sp/>*PipeIdPtr,</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="common__types_8h_1a2e00abb078d312d1d8c4fbcd6be343d8" kindref="member">uint16</ref><sp/><sp/>Depth,</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*PipeName);</highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight><highlight class="comment">/*****************************************************************************/</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><ref refid="common__types_8h_1a5eb512da689eec1a7472ab97e2ab6be3" kindref="member">int32</ref><sp/><sp/><ref refid="cfe__sb_8h_1a268a5a36f7628873472456e02565bfcf" kindref="member">CFE_SB_DeletePipe</ref>(CFE_SB_PipeId_t<sp/>PipeId);</highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight><highlight class="comment">/*****************************************************************************/</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><ref refid="common__types_8h_1a5eb512da689eec1a7472ab97e2ab6be3" kindref="member">int32</ref><sp/><sp/><ref refid="cfe__sb_8h_1a5939c3681044a3d953d0fe72dd577889" kindref="member">CFE_SB_SubscribeEx</ref>(CFE_SB_MsgId_t<sp/><sp/><sp/><sp/><sp/><sp/>MsgId,</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CFE_SB_PipeId_t<sp/><sp/><sp/><sp/><sp/>PipeId,</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_c_f_e___s_b___qos__t" kindref="compound">CFE_SB_Qos_t</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Quality,</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="common__types_8h_1a2e00abb078d312d1d8c4fbcd6be343d8" kindref="member">uint16</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MsgLim);</highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight><highlight class="comment">/*****************************************************************************/</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><ref refid="common__types_8h_1a5eb512da689eec1a7472ab97e2ab6be3" kindref="member">int32</ref><sp/><ref refid="cfe__sb_8h_1afc2c2db1a504f544b430f33f28be769b" kindref="member">CFE_SB_Subscribe</ref>(CFE_SB_MsgId_t<sp/><sp/>MsgId,<sp/>CFE_SB_PipeId_t<sp/>PipeId);</highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight><highlight class="comment">/*****************************************************************************/</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><ref refid="common__types_8h_1a5eb512da689eec1a7472ab97e2ab6be3" kindref="member">int32</ref><sp/><ref refid="cfe__sb_8h_1a72139ef72948ee8dddc4fe17eb174c22" kindref="member">CFE_SB_SubscribeLocal</ref>(CFE_SB_MsgId_t<sp/>MsgId,</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CFE_SB_PipeId_t<sp/>PipeId,</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="common__types_8h_1a2e00abb078d312d1d8c4fbcd6be343d8" kindref="member">uint16</ref><sp/>MsgLim);</highlight></codeline>
<codeline lineno="386"><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"></highlight><highlight class="comment">/*****************************************************************************/</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><ref refid="common__types_8h_1a5eb512da689eec1a7472ab97e2ab6be3" kindref="member">int32</ref><sp/><sp/><ref refid="cfe__sb_8h_1a70ea901e65f03221e3787d73733db060" kindref="member">CFE_SB_Unsubscribe</ref>(CFE_SB_MsgId_t<sp/>MsgId,<sp/>CFE_SB_PipeId_t<sp/>PipeId);</highlight></codeline>
<codeline lineno="412"><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal"></highlight><highlight class="comment">/*****************************************************************************/</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><ref refid="common__types_8h_1a5eb512da689eec1a7472ab97e2ab6be3" kindref="member">int32</ref><sp/><ref refid="cfe__sb_8h_1a2d9017dba160c86fd79fd386201753be" kindref="member">CFE_SB_UnsubscribeLocal</ref>(CFE_SB_MsgId_t<sp/>MsgId,<sp/>CFE_SB_PipeId_t<sp/>PipeId);</highlight></codeline>
<codeline lineno="438"><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal"></highlight><highlight class="comment">/*****************************************************************************/</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><ref refid="common__types_8h_1a5eb512da689eec1a7472ab97e2ab6be3" kindref="member">int32</ref><sp/><sp/><ref refid="cfe__sb_8h_1a91b4b63f7d168bd78dc92d894ad7f77d" kindref="member">CFE_SB_SendMsg</ref>(CFE_SB_Msg_t<sp/><sp/><sp/>*MsgPtr);</highlight></codeline>
<codeline lineno="471"><highlight class="normal"></highlight></codeline>
<codeline lineno="472"><highlight class="normal"></highlight><highlight class="comment">/*****************************************************************************/</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><ref refid="common__types_8h_1a5eb512da689eec1a7472ab97e2ab6be3" kindref="member">int32</ref><sp/><sp/><ref refid="cfe__sb_8h_1ade2170aac98e2b761332d96e7af88ff1" kindref="member">CFE_SB_PassMsg</ref>(CFE_SB_Msg_t<sp/><sp/><sp/>*MsgPtr);</highlight></codeline>
<codeline lineno="505"><highlight class="normal"></highlight></codeline>
<codeline lineno="506"><highlight class="normal"></highlight><highlight class="comment">/*****************************************************************************/</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><ref refid="common__types_8h_1a5eb512da689eec1a7472ab97e2ab6be3" kindref="member">int32</ref><sp/><sp/><ref refid="cfe__sb_8h_1a54840fe06aeb08b1e2c8df420474780d" kindref="member">CFE_SB_RcvMsg</ref>(CFE_SB_MsgPtr_t<sp/><sp/>*BufPtr,</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CFE_SB_PipeId_t<sp/><sp/>PipeId,</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="common__types_8h_1a5eb512da689eec1a7472ab97e2ab6be3" kindref="member">int32</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TimeOut);</highlight></codeline>
<codeline lineno="554"><highlight class="normal"></highlight></codeline>
<codeline lineno="555"><highlight class="normal"></highlight><highlight class="comment">/*****************************************************************************/</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><ref refid="common__types_8h_1a9560e25c315bae45d1ed4e2ce49ce55a" kindref="member">uint32</ref><sp/><sp/><ref refid="cfe__sb_8h_1abd1d841a3e64941a3ef460572b00f7e4" kindref="member">CFE_SB_GetLastSenderId</ref>(<ref refid="struct_c_f_e___s_b___sender_id__t" kindref="compound">CFE_SB_SenderId_t</ref><sp/>**Ptr,CFE_SB_PipeId_t<sp/><sp/>PipeId);</highlight></codeline>
<codeline lineno="589"><highlight class="normal"></highlight></codeline>
<codeline lineno="590"><highlight class="normal"></highlight><highlight class="comment">/*****************************************************************************/</highlight></codeline>
<codeline lineno="626"><highlight class="normal">CFE_SB_Msg_t<sp/><sp/>*<ref refid="cfe__sb_8h_1a40630a2f5465cf30206a45c970bb4cc4" kindref="member">CFE_SB_ZeroCopyGetPtr</ref>(<ref refid="common__types_8h_1a2e00abb078d312d1d8c4fbcd6be343d8" kindref="member">uint16</ref><sp/><sp/>MsgSize,</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CFE_SB_ZeroCopyHandle_t<sp/>*BufferHandle);</highlight></codeline>
<codeline lineno="628"><highlight class="normal"></highlight></codeline>
<codeline lineno="629"><highlight class="normal"></highlight><highlight class="comment">/*****************************************************************************/</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><ref refid="common__types_8h_1a5eb512da689eec1a7472ab97e2ab6be3" kindref="member">int32</ref><sp/><ref refid="cfe__sb_8h_1a89ec51d1986bec33c5a3b6605f92b04a" kindref="member">CFE_SB_ZeroCopyReleasePtr</ref>(CFE_SB_Msg_t<sp/><sp/>*Ptr2Release,</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CFE_SB_ZeroCopyHandle_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BufferHandle);</highlight></codeline>
<codeline lineno="659"><highlight class="normal"></highlight></codeline>
<codeline lineno="660"><highlight class="normal"></highlight><highlight class="comment">/*****************************************************************************/</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><ref refid="common__types_8h_1a5eb512da689eec1a7472ab97e2ab6be3" kindref="member">int32</ref><sp/><ref refid="cfe__sb_8h_1afabab99c8bed70a6d74b662f8620866c" kindref="member">CFE_SB_ZeroCopySend</ref>(CFE_SB_Msg_t<sp/><sp/><sp/>*MsgPtr,</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CFE_SB_ZeroCopyHandle_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BufferHandle);</highlight></codeline>
<codeline lineno="701"><highlight class="normal"></highlight></codeline>
<codeline lineno="702"><highlight class="normal"></highlight><highlight class="comment">/*****************************************************************************/</highlight></codeline>
<codeline lineno="743"><highlight class="normal"><ref refid="common__types_8h_1a5eb512da689eec1a7472ab97e2ab6be3" kindref="member">int32</ref><sp/><ref refid="cfe__sb_8h_1ab0908003ed01106c310b97d984be76b8" kindref="member">CFE_SB_ZeroCopyPass</ref>(CFE_SB_Msg_t<sp/><sp/><sp/>*MsgPtr,</highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CFE_SB_ZeroCopyHandle_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BufferHandle);</highlight></codeline>
<codeline lineno="745"><highlight class="normal"></highlight></codeline>
<codeline lineno="746"><highlight class="normal"></highlight></codeline>
<codeline lineno="747"><highlight class="normal"></highlight><highlight class="comment">/*****************************************************************************/</highlight></codeline>
<codeline lineno="775"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="cfe__sb_8h_1a67765875dfff1d3d6d7cbc4a7ae2f8f0" kindref="member">CFE_SB_InitMsg</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*MsgPtr,</highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CFE_SB_MsgId_t<sp/>MsgId,</highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="common__types_8h_1a2e00abb078d312d1d8c4fbcd6be343d8" kindref="member">uint16</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Length,</highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">boolean</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Clear<sp/>);</highlight></codeline>
<codeline lineno="779"><highlight class="normal"></highlight></codeline>
<codeline lineno="780"><highlight class="normal"></highlight><highlight class="comment">/*****************************************************************************/</highlight></codeline>
<codeline lineno="809"><highlight class="normal"><ref refid="common__types_8h_1a2e00abb078d312d1d8c4fbcd6be343d8" kindref="member">uint16</ref><sp/><ref refid="cfe__sb_8h_1a76fccd1a39d38ea58993191bdd7f4144" kindref="member">CFE_SB_MsgHdrSize</ref>(CFE_SB_MsgId_t<sp/>MsgId);</highlight></codeline>
<codeline lineno="810"><highlight class="normal"></highlight></codeline>
<codeline lineno="811"><highlight class="normal"></highlight><highlight class="comment">/*****************************************************************************/</highlight></codeline>
<codeline lineno="833"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="cfe__sb_8h_1ad7d178a88d5600712eb74afc13e2d666" kindref="member">CFE_SB_GetUserData</ref>(CFE_SB_MsgPtr_t<sp/>MsgPtr);</highlight></codeline>
<codeline lineno="834"><highlight class="normal"></highlight></codeline>
<codeline lineno="835"><highlight class="normal"></highlight><highlight class="comment">/*****************************************************************************/</highlight></codeline>
<codeline lineno="854"><highlight class="normal">CFE_SB_MsgId_t<sp/><ref refid="cfe__sb_8h_1afd43694dea8b3cb74af4c2969493256d" kindref="member">CFE_SB_GetMsgId</ref>(CFE_SB_MsgPtr_t<sp/>MsgPtr);</highlight></codeline>
<codeline lineno="855"><highlight class="normal"></highlight></codeline>
<codeline lineno="856"><highlight class="normal"></highlight><highlight class="comment">/*****************************************************************************/</highlight></codeline>
<codeline lineno="878"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="cfe__sb_8h_1af0bb4507231046917c9774cf8365203c" kindref="member">CFE_SB_SetMsgId</ref>(CFE_SB_MsgPtr_t<sp/>MsgPtr,</highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CFE_SB_MsgId_t<sp/>MsgId);</highlight></codeline>
<codeline lineno="880"><highlight class="normal"></highlight></codeline>
<codeline lineno="881"><highlight class="normal"></highlight><highlight class="comment">/*****************************************************************************/</highlight></codeline>
<codeline lineno="901"><highlight class="normal"><ref refid="common__types_8h_1a2e00abb078d312d1d8c4fbcd6be343d8" kindref="member">uint16</ref><sp/><ref refid="cfe__sb_8h_1a9fcbd13f892931483c22a17c1be0c4ab" kindref="member">CFE_SB_GetUserDataLength</ref>(CFE_SB_MsgPtr_t<sp/>MsgPtr);</highlight></codeline>
<codeline lineno="902"><highlight class="normal"></highlight></codeline>
<codeline lineno="903"><highlight class="normal"></highlight><highlight class="comment">/*****************************************************************************/</highlight></codeline>
<codeline lineno="927"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="cfe__sb_8h_1a1804248c45fea3eb322a950626f67f99" kindref="member">CFE_SB_SetUserDataLength</ref>(CFE_SB_MsgPtr_t<sp/>MsgPtr,<ref refid="common__types_8h_1a2e00abb078d312d1d8c4fbcd6be343d8" kindref="member">uint16</ref><sp/>DataLength);</highlight></codeline>
<codeline lineno="928"><highlight class="normal"></highlight></codeline>
<codeline lineno="929"><highlight class="normal"></highlight><highlight class="comment">/*****************************************************************************/</highlight></codeline>
<codeline lineno="950"><highlight class="normal"><ref refid="common__types_8h_1a2e00abb078d312d1d8c4fbcd6be343d8" kindref="member">uint16</ref><sp/><ref refid="cfe__sb_8h_1ac32b86cf9e1d12a547792853c35f6aa1" kindref="member">CFE_SB_GetTotalMsgLength</ref>(CFE_SB_MsgPtr_t<sp/>MsgPtr);</highlight></codeline>
<codeline lineno="951"><highlight class="normal"></highlight></codeline>
<codeline lineno="952"><highlight class="normal"></highlight><highlight class="comment">/*****************************************************************************/</highlight></codeline>
<codeline lineno="975"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="cfe__sb_8h_1ae7bfd92ff974a7d5f43d49345ab4b806" kindref="member">CFE_SB_SetTotalMsgLength</ref>(CFE_SB_MsgPtr_t<sp/>MsgPtr,<ref refid="common__types_8h_1a2e00abb078d312d1d8c4fbcd6be343d8" kindref="member">uint16</ref><sp/>TotalLength);</highlight></codeline>
<codeline lineno="976"><highlight class="normal"></highlight></codeline>
<codeline lineno="977"><highlight class="normal"></highlight><highlight class="comment">/*****************************************************************************/</highlight></codeline>
<codeline lineno="998"><highlight class="normal"><ref refid="struct_c_f_e___t_i_m_e___sys_time__t" kindref="compound">CFE_TIME_SysTime_t</ref><sp/><ref refid="cfe__sb_8h_1adf8ead29ddbb83f4af9491cb14994f3e" kindref="member">CFE_SB_GetMsgTime</ref>(CFE_SB_MsgPtr_t<sp/>MsgPtr);</highlight></codeline>
<codeline lineno="999"><highlight class="normal"></highlight></codeline>
<codeline lineno="1000"><highlight class="normal"></highlight><highlight class="comment">/*****************************************************************************/</highlight></codeline>
<codeline lineno="1029"><highlight class="normal"><ref refid="common__types_8h_1a5eb512da689eec1a7472ab97e2ab6be3" kindref="member">int32</ref><sp/><ref refid="cfe__sb_8h_1a52278f45dbe569c9e003d7bdba58b694" kindref="member">CFE_SB_SetMsgTime</ref>(CFE_SB_MsgPtr_t<sp/>MsgPtr,</highlight></codeline>
<codeline lineno="1030"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_c_f_e___t_i_m_e___sys_time__t" kindref="compound">CFE_TIME_SysTime_t</ref><sp/>Time);</highlight></codeline>
<codeline lineno="1031"><highlight class="normal"></highlight></codeline>
<codeline lineno="1032"><highlight class="normal"></highlight><highlight class="comment">/*****************************************************************************/</highlight></codeline>
<codeline lineno="1051"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="cfe__sb_8h_1aaab4db240d18fa4017741f0f7680e4e1" kindref="member">CFE_SB_TimeStampMsg</ref>(CFE_SB_MsgPtr_t<sp/>MsgPtr);</highlight></codeline>
<codeline lineno="1052"><highlight class="normal"></highlight></codeline>
<codeline lineno="1053"><highlight class="normal"></highlight><highlight class="comment">/*****************************************************************************/</highlight></codeline>
<codeline lineno="1077"><highlight class="normal"><ref refid="common__types_8h_1a2e00abb078d312d1d8c4fbcd6be343d8" kindref="member">uint16</ref><sp/><ref refid="cfe__sb_8h_1a7b1204be89237bd230fc79ecc88718b5" kindref="member">CFE_SB_GetCmdCode</ref>(CFE_SB_MsgPtr_t<sp/>MsgPtr);</highlight></codeline>
<codeline lineno="1078"><highlight class="normal"></highlight></codeline>
<codeline lineno="1079"><highlight class="normal"></highlight><highlight class="comment">/*****************************************************************************/</highlight></codeline>
<codeline lineno="1105"><highlight class="normal"><ref refid="common__types_8h_1a5eb512da689eec1a7472ab97e2ab6be3" kindref="member">int32</ref><sp/><ref refid="cfe__sb_8h_1aae28d938d29ce8ad689b238562c58d3f" kindref="member">CFE_SB_SetCmdCode</ref>(CFE_SB_MsgPtr_t<sp/>MsgPtr,</highlight></codeline>
<codeline lineno="1106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="common__types_8h_1a2e00abb078d312d1d8c4fbcd6be343d8" kindref="member">uint16</ref><sp/>CmdCode);</highlight></codeline>
<codeline lineno="1107"><highlight class="normal"></highlight></codeline>
<codeline lineno="1108"><highlight class="normal"></highlight><highlight class="comment">/*****************************************************************************/</highlight></codeline>
<codeline lineno="1136"><highlight class="normal"><ref refid="common__types_8h_1a2e00abb078d312d1d8c4fbcd6be343d8" kindref="member">uint16</ref><sp/><ref refid="cfe__sb_8h_1a5ffc13b78bef6859d203453f76edc044" kindref="member">CFE_SB_GetChecksum</ref>(CFE_SB_MsgPtr_t<sp/>MsgPtr);</highlight></codeline>
<codeline lineno="1137"><highlight class="normal"></highlight></codeline>
<codeline lineno="1138"><highlight class="normal"></highlight><highlight class="comment">/*****************************************************************************/</highlight></codeline>
<codeline lineno="1158"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="cfe__sb_8h_1ab938a22e368e400c16ce7dc97767f237" kindref="member">CFE_SB_GenerateChecksum</ref>(CFE_SB_MsgPtr_t<sp/>MsgPtr);</highlight></codeline>
<codeline lineno="1159"><highlight class="normal"></highlight></codeline>
<codeline lineno="1160"><highlight class="normal"></highlight><highlight class="comment">/*****************************************************************************/</highlight></codeline>
<codeline lineno="1185"><highlight class="keywordtype">boolean</highlight><highlight class="normal"><sp/><ref refid="cfe__sb_8h_1a3245babbfb1f2f2c5a2358d41fd004ad" kindref="member">CFE_SB_ValidateChecksum</ref>(CFE_SB_MsgPtr_t<sp/>MsgPtr);</highlight></codeline>
<codeline lineno="1186"><highlight class="normal"></highlight></codeline>
<codeline lineno="1187"><highlight class="normal"></highlight><highlight class="comment">/******************************************************************************</highlight></codeline>
<codeline lineno="1188"><highlight class="comment">**<sp/><sp/>Function:<sp/><sp/>CFE_SB_MessageStringGet()</highlight></codeline>
<codeline lineno="1189"><highlight class="comment">**</highlight></codeline>
<codeline lineno="1190"><highlight class="comment">**<sp/><sp/>Purpose:</highlight></codeline>
<codeline lineno="1191"><highlight class="comment">**<sp/><sp/><sp/><sp/>Copies<sp/>a<sp/>string<sp/>out<sp/>of<sp/>a<sp/>software<sp/>bus<sp/>message</highlight></codeline>
<codeline lineno="1192"><highlight class="comment">**</highlight></codeline>
<codeline lineno="1193"><highlight class="comment">**<sp/><sp/><sp/><sp/>Strings<sp/>within<sp/>software<sp/>bus<sp/>messages<sp/>have<sp/>a<sp/>defined/fixed<sp/>maximum<sp/>length,<sp/>and</highlight></codeline>
<codeline lineno="1194"><highlight class="comment">**<sp/><sp/><sp/><sp/>may<sp/>not<sp/>necessarily<sp/>be<sp/>null<sp/>terminated<sp/>within<sp/>the<sp/>message.<sp/><sp/>This<sp/>presents<sp/>a<sp/>possible</highlight></codeline>
<codeline lineno="1195"><highlight class="comment">**<sp/><sp/><sp/><sp/>issue<sp/>when<sp/>using<sp/>the<sp/>C<sp/>library<sp/>functions<sp/>to<sp/>copy<sp/>strings<sp/>out<sp/>of<sp/>a<sp/>message.</highlight></codeline>
<codeline lineno="1196"><highlight class="comment">**</highlight></codeline>
<codeline lineno="1197"><highlight class="comment">**<sp/><sp/><sp/><sp/>This<sp/>function<sp/>should<sp/>replace<sp/>use<sp/>of<sp/>C<sp/>library<sp/>functions<sp/>such<sp/>as<sp/>strcpy/strncpy</highlight></codeline>
<codeline lineno="1198"><highlight class="comment">**<sp/><sp/><sp/><sp/>when<sp/>copying<sp/>strings<sp/>out<sp/>of<sp/>software<sp/>bus<sp/>messages<sp/>to<sp/>local<sp/>storage<sp/>buffers.</highlight></codeline>
<codeline lineno="1199"><highlight class="comment">**</highlight></codeline>
<codeline lineno="1200"><highlight class="comment">**<sp/><sp/><sp/><sp/>Up<sp/>to<sp/>[SourceMaxSize]<sp/>or<sp/>[DestMaxSize-1]<sp/>(whichever<sp/>is<sp/>smaller)<sp/>characters<sp/>will<sp/>be</highlight></codeline>
<codeline lineno="1201"><highlight class="comment">**<sp/><sp/><sp/><sp/>coped<sp/>from<sp/>the<sp/>source<sp/>buffer<sp/>to<sp/>the<sp/>destination<sp/>buffer,<sp/>and<sp/>a<sp/>NUL<sp/>termination</highlight></codeline>
<codeline lineno="1202"><highlight class="comment">**<sp/><sp/><sp/><sp/>character<sp/>will<sp/>be<sp/>written<sp/>to<sp/>the<sp/>destination<sp/>buffer<sp/>as<sp/>the<sp/>last<sp/>character.</highlight></codeline>
<codeline lineno="1203"><highlight class="comment">**</highlight></codeline>
<codeline lineno="1204"><highlight class="comment">**<sp/><sp/><sp/><sp/>If<sp/>the<sp/>DefaultString<sp/>pointer<sp/>is<sp/>non-NULL,<sp/>it<sp/>will<sp/>be<sp/>used<sp/>in<sp/>place<sp/>of<sp/>the<sp/>source</highlight></codeline>
<codeline lineno="1205"><highlight class="comment">**<sp/><sp/><sp/><sp/>string<sp/>if<sp/>the<sp/>source<sp/>is<sp/>an<sp/>empty<sp/>string.<sp/><sp/>This<sp/>is<sp/>typically<sp/>a<sp/>string<sp/>constant<sp/>that</highlight></codeline>
<codeline lineno="1206"><highlight class="comment">**<sp/><sp/><sp/><sp/>comes<sp/>from<sp/>the<sp/>platform<sp/>configuration,<sp/>allowing<sp/>default<sp/>values<sp/>to<sp/>be<sp/>assumed<sp/>for</highlight></codeline>
<codeline lineno="1207"><highlight class="comment">**<sp/><sp/><sp/><sp/>fields<sp/>that<sp/>are<sp/>unspecified.</highlight></codeline>
<codeline lineno="1208"><highlight class="comment">**</highlight></codeline>
<codeline lineno="1209"><highlight class="comment">**<sp/><sp/><sp/><sp/>IMPORTANT<sp/>-<sp/>the<sp/>default<sp/>string,<sp/>if<sp/>specified,<sp/>must<sp/>be<sp/>null<sp/>terminated.<sp/><sp/>This<sp/>will</highlight></codeline>
<codeline lineno="1210"><highlight class="comment">**<sp/><sp/><sp/><sp/>be<sp/>the<sp/>case<sp/>if<sp/>a<sp/>string<sp/>literal<sp/>is<sp/>passed<sp/>in<sp/>(the<sp/>typical/expected<sp/>use<sp/>case).</highlight></codeline>
<codeline lineno="1211"><highlight class="comment">**</highlight></codeline>
<codeline lineno="1212"><highlight class="comment">**<sp/><sp/><sp/><sp/>If<sp/>the<sp/>default<sp/>is<sp/>NULL,<sp/>then<sp/>only<sp/>the<sp/>source<sp/>string<sp/>will<sp/>be<sp/>copied,<sp/>and<sp/>the<sp/>result</highlight></codeline>
<codeline lineno="1213"><highlight class="comment">**<sp/><sp/><sp/><sp/>will<sp/>be<sp/>an<sp/>empty<sp/>string<sp/>if<sp/>the<sp/>source<sp/>was<sp/>empty.</highlight></codeline>
<codeline lineno="1214"><highlight class="comment">**</highlight></codeline>
<codeline lineno="1215"><highlight class="comment">**<sp/><sp/><sp/><sp/>If<sp/>the<sp/>destination<sp/>buffer<sp/>is<sp/>too<sp/>small<sp/>to<sp/>store<sp/>the<sp/>entire<sp/>string,<sp/>it<sp/>will<sp/>be</highlight></codeline>
<codeline lineno="1216"><highlight class="comment">**<sp/><sp/><sp/><sp/>truncated,<sp/>but<sp/>it<sp/>will<sp/>still<sp/>be<sp/>null<sp/>terminated.</highlight></codeline>
<codeline lineno="1217"><highlight class="comment">**</highlight></codeline>
<codeline lineno="1218"><highlight class="comment">**<sp/><sp/>Arguments:</highlight></codeline>
<codeline lineno="1219"><highlight class="comment">**<sp/><sp/><sp/><sp/>DestStringPtr<sp/>-<sp/>pointer<sp/>to<sp/>destination<sp/>buffer</highlight></codeline>
<codeline lineno="1220"><highlight class="comment">**<sp/><sp/><sp/><sp/>SourceStringPtr<sp/>-<sp/>pointer<sp/>to<sp/>source<sp/>buffer<sp/>(component<sp/>of<sp/>SB<sp/>message<sp/>definition)</highlight></codeline>
<codeline lineno="1221"><highlight class="comment">**<sp/><sp/><sp/><sp/>DefaultString<sp/>-<sp/>alternative<sp/>string<sp/>to<sp/>use<sp/>if<sp/>the<sp/>source<sp/>is<sp/>an<sp/>empty<sp/>string</highlight></codeline>
<codeline lineno="1222"><highlight class="comment">**<sp/><sp/><sp/><sp/>DestMaxSize<sp/>-<sp/>size<sp/>of<sp/>the<sp/>destination<sp/>storage<sp/>buffer<sp/>(must<sp/>be<sp/>at<sp/>least<sp/>2)</highlight></codeline>
<codeline lineno="1223"><highlight class="comment">**<sp/><sp/><sp/><sp/>SourceMaxSize<sp/>-<sp/>size<sp/>of<sp/>the<sp/>source<sp/>buffer<sp/>as<sp/>defined<sp/>by<sp/>the<sp/>message<sp/>definition</highlight></codeline>
<codeline lineno="1224"><highlight class="comment">**</highlight></codeline>
<codeline lineno="1225"><highlight class="comment">**<sp/><sp/>Returns:</highlight></codeline>
<codeline lineno="1226"><highlight class="comment">**<sp/><sp/><sp/><sp/>Length<sp/>of<sp/>result<sp/>-<sp/>number<sp/>of<sp/>characters<sp/>copied,<sp/>not<sp/>including<sp/>the<sp/>terminating<sp/>NUL.</highlight></codeline>
<codeline lineno="1227"><highlight class="comment">**<sp/><sp/><sp/><sp/><sp/><sp/><sp/>This<sp/>should<sp/>match<sp/>the<sp/>value<sp/>that<sp/>would<sp/>be<sp/>returned<sp/>by<sp/>&quot;strlen(DestStringPtr)&quot;</highlight></codeline>
<codeline lineno="1228"><highlight class="comment">**</highlight></codeline>
<codeline lineno="1229"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1230"><highlight class="normal"><ref refid="common__types_8h_1a5eb512da689eec1a7472ab97e2ab6be3" kindref="member">int32</ref><sp/><ref refid="cfe__sb_8h_1afec4600af61cf4be7c6b979fb249bf8a" kindref="member">CFE_SB_MessageStringGet</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*DestStringPtr,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*SourceStringPtr,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*DefaultString,<sp/><ref refid="common__types_8h_1a9560e25c315bae45d1ed4e2ce49ce55a" kindref="member">uint32</ref><sp/>DestMaxSize,<sp/><ref refid="common__types_8h_1a9560e25c315bae45d1ed4e2ce49ce55a" kindref="member">uint32</ref><sp/>SourceMaxSize);</highlight></codeline>
<codeline lineno="1231"><highlight class="normal"></highlight></codeline>
<codeline lineno="1232"><highlight class="normal"></highlight><highlight class="comment">/******************************************************************************</highlight></codeline>
<codeline lineno="1233"><highlight class="comment">**<sp/><sp/>Function:<sp/><sp/>CFE_SB_MessageStringSet()</highlight></codeline>
<codeline lineno="1234"><highlight class="comment">**</highlight></codeline>
<codeline lineno="1235"><highlight class="comment">**<sp/><sp/>Purpose:</highlight></codeline>
<codeline lineno="1236"><highlight class="comment">**<sp/><sp/><sp/><sp/>Copies<sp/>a<sp/>string<sp/>into<sp/>a<sp/>software<sp/>bus<sp/>message</highlight></codeline>
<codeline lineno="1237"><highlight class="comment">**</highlight></codeline>
<codeline lineno="1238"><highlight class="comment">**<sp/><sp/><sp/><sp/>Strings<sp/>within<sp/>software<sp/>bus<sp/>messages<sp/>have<sp/>a<sp/>defined/fixed<sp/>maximum<sp/>length,<sp/>and</highlight></codeline>
<codeline lineno="1239"><highlight class="comment">**<sp/><sp/><sp/><sp/>may<sp/>not<sp/>necessarily<sp/>be<sp/>null<sp/>terminated<sp/>within<sp/>the<sp/>message.<sp/><sp/>This<sp/>presents<sp/>a<sp/>possible</highlight></codeline>
<codeline lineno="1240"><highlight class="comment">**<sp/><sp/><sp/><sp/>issue<sp/>when<sp/>using<sp/>the<sp/>C<sp/>library<sp/>functions<sp/>to<sp/>copy<sp/>strings<sp/>out<sp/>of<sp/>a<sp/>message.</highlight></codeline>
<codeline lineno="1241"><highlight class="comment">**</highlight></codeline>
<codeline lineno="1242"><highlight class="comment">**<sp/><sp/><sp/><sp/>This<sp/>performs<sp/>a<sp/>very<sp/>similar<sp/>function<sp/>to<sp/>&quot;strncpy()&quot;<sp/>except<sp/>that<sp/>the<sp/>sizes</highlight></codeline>
<codeline lineno="1243"><highlight class="comment">**<sp/><sp/><sp/><sp/>of<sp/>_both_<sp/>buffers<sp/>are<sp/>passed<sp/>in.<sp/><sp/>Neither<sp/>buffer<sp/>is<sp/>required<sp/>to<sp/>be<sp/>null-terminated,</highlight></codeline>
<codeline lineno="1244"><highlight class="comment">**<sp/><sp/><sp/><sp/>but<sp/>copying<sp/>will<sp/>stop<sp/>after<sp/>the<sp/>first<sp/>termination<sp/>character<sp/>is<sp/>encountered.</highlight></codeline>
<codeline lineno="1245"><highlight class="comment">**</highlight></codeline>
<codeline lineno="1246"><highlight class="comment">**<sp/><sp/><sp/><sp/>If<sp/>the<sp/>destination<sp/>buffer<sp/>is<sp/>not<sp/>completely<sp/>filled<sp/>by<sp/>the<sp/>source<sp/>data<sp/>(such<sp/>as<sp/>if</highlight></codeline>
<codeline lineno="1247"><highlight class="comment">**<sp/><sp/><sp/><sp/>the<sp/>supplied<sp/>string<sp/>was<sp/>shorter<sp/>than<sp/>the<sp/>allotted<sp/>length)<sp/>the<sp/>destination<sp/>buffer</highlight></codeline>
<codeline lineno="1248"><highlight class="comment">**<sp/><sp/><sp/><sp/>will<sp/>be<sp/>padded<sp/>with<sp/>NUL<sp/>characters<sp/>up<sp/>to<sp/>the<sp/>size<sp/>of<sp/>the<sp/>buffer,<sp/>similar<sp/>to<sp/>what</highlight></codeline>
<codeline lineno="1249"><highlight class="comment">**<sp/><sp/><sp/><sp/>strncpy()<sp/>does.<sp/><sp/>This<sp/>ensures<sp/>that<sp/>the<sp/>entire<sp/>destination<sp/>buffer<sp/>is<sp/>set.</highlight></codeline>
<codeline lineno="1250"><highlight class="comment">**</highlight></codeline>
<codeline lineno="1251"><highlight class="comment">**<sp/><sp/><sp/><sp/>NOTE<sp/>-<sp/>if<sp/>the<sp/>source<sp/>string<sp/>buffer<sp/>is<sp/>already<sp/>guaranteed<sp/>to<sp/>be<sp/>null<sp/>terminated,</highlight></codeline>
<codeline lineno="1252"><highlight class="comment">**<sp/><sp/><sp/><sp/>then<sp/>there<sp/>is<sp/>no<sp/>difference<sp/>between<sp/>the<sp/>C<sp/>library<sp/>&quot;strncpy()&quot;<sp/>function<sp/>and<sp/>this</highlight></codeline>
<codeline lineno="1253"><highlight class="comment">**<sp/><sp/><sp/><sp/>implementation.<sp/><sp/>It<sp/>is<sp/>only<sp/>necessary<sp/>to<sp/>use<sp/>this<sp/>when<sp/>termination<sp/>of<sp/>the<sp/>source</highlight></codeline>
<codeline lineno="1254"><highlight class="comment">**<sp/><sp/><sp/><sp/>buffer<sp/>is<sp/>not<sp/>guaranteed.</highlight></codeline>
<codeline lineno="1255"><highlight class="comment">**</highlight></codeline>
<codeline lineno="1256"><highlight class="comment">**<sp/><sp/>Arguments:</highlight></codeline>
<codeline lineno="1257"><highlight class="comment">**<sp/><sp/><sp/><sp/>DestStringPtr<sp/>-<sp/>pointer<sp/>to<sp/>destination<sp/>buffer</highlight></codeline>
<codeline lineno="1258"><highlight class="comment">**<sp/><sp/><sp/><sp/>SourceStringPtr<sp/>-<sp/>pointer<sp/>to<sp/>source<sp/>buffer<sp/>(component<sp/>of<sp/>SB<sp/>message<sp/>definition)</highlight></codeline>
<codeline lineno="1259"><highlight class="comment">**<sp/><sp/><sp/><sp/>DestMaxSize<sp/>-<sp/>size<sp/>of<sp/>the<sp/>destination<sp/>storage<sp/>buffer<sp/>(must<sp/>be<sp/>at<sp/>least<sp/>2)</highlight></codeline>
<codeline lineno="1260"><highlight class="comment">**<sp/><sp/><sp/><sp/>SourceMaxSize<sp/>-<sp/>size<sp/>of<sp/>the<sp/>source<sp/>buffer<sp/>as<sp/>defined<sp/>by<sp/>the<sp/>message<sp/>definition</highlight></codeline>
<codeline lineno="1261"><highlight class="comment">**</highlight></codeline>
<codeline lineno="1262"><highlight class="comment">**<sp/><sp/>Returns:</highlight></codeline>
<codeline lineno="1263"><highlight class="comment">**<sp/><sp/><sp/><sp/>Length<sp/>of<sp/>result<sp/>-<sp/>number<sp/>of<sp/>actual<sp/>data<sp/>characters<sp/>copied</highlight></codeline>
<codeline lineno="1264"><highlight class="comment">**<sp/><sp/><sp/><sp/><sp/><sp/><sp/>This<sp/>should<sp/>match<sp/>the<sp/>value<sp/>that<sp/>would<sp/>be<sp/>returned<sp/>by<sp/>&quot;strlen(DestStringPtr)&quot;</highlight></codeline>
<codeline lineno="1265"><highlight class="comment">**</highlight></codeline>
<codeline lineno="1266"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1267"><highlight class="normal"><ref refid="common__types_8h_1a5eb512da689eec1a7472ab97e2ab6be3" kindref="member">int32</ref><sp/><ref refid="cfe__sb_8h_1afa44859f8be6de2925ece59ba6cda9b4" kindref="member">CFE_SB_MessageStringSet</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*DestStringPtr,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*SourceStringPtr,<sp/><ref refid="common__types_8h_1a9560e25c315bae45d1ed4e2ce49ce55a" kindref="member">uint32</ref><sp/>DestMaxSize,<sp/><ref refid="common__types_8h_1a9560e25c315bae45d1ed4e2ce49ce55a" kindref="member">uint32</ref><sp/>SourceMaxSize);</highlight></codeline>
<codeline lineno="1268"><highlight class="normal"></highlight></codeline>
<codeline lineno="1269"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1270"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1271"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1272"><highlight class="normal"></highlight></codeline>
<codeline lineno="1273"><highlight class="normal"></highlight></codeline>
<codeline lineno="1274"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">/*<sp/>_cfesb_<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1275"><highlight class="normal"></highlight><highlight class="comment">/*****************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="inc/cfe_sb.h"/>
  </compounddef>
</doxygen>
