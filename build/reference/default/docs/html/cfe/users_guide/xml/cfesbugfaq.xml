<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="cfesbugfaq" kind="page">
    <compoundname>cfesbugfaq</compoundname>
    <title>Frequently Asked Questions about Software Bus</title>
    <detaileddescription>
<para><table rows="18" cols="2"><row>
<entry thead="no"><para><bold>(Q) How is the memory pool handle (sent in SB housekeeping telemetry) intended to be used? </bold></para></entry></row>
<row>
<entry thead="no"><para><nonbreakablespace/> </para></entry><entry thead="no"><para>The memory pool handle is used to analyze the SB memory pool statistics. The cFE ES command (<ref refid="cfe__es__msg_8h_1a2b1c39432940423ef68c4c183abce3d8" kindref="member">CFE_ES_TLM_POOL_STATS_CC</ref>) to dump the memory pool statistics takes the pool handle as a parameter. These statistics tell how the SB memory pool is configured and gives details on margin. An improperly configured SB memory pool may inhibit communication. This may occur if there is not enough margin to create a block of the size needed for a transfer. Refer to the ES memory pool users guide for more details. <ref refid="cfeesugmempoolsrv" kindref="compound">Memory Pool Service</ref> <linebreak/>
 </para></entry></row>
<row>
<entry thead="no"><para><bold>(Q) When sending a message, what message header fields are critical for routing the message? </bold></para></entry></row>
<row>
<entry thead="no"><para><nonbreakablespace/> </para></entry><entry thead="no"><para>To route the message properly, the software bus uses only the Message ID and packet length fields from the header of the message. If the packet length field is incorrect, then the buffer allocation for the message will also be incorrect. This may appear to the receiver as a truncated message or a message with unknown data added to the end of the message. </para></entry></row>
<row>
<entry thead="no"><para><bold>(Q) How many copies of the message are performed in a typical message delivery? </bold></para></entry></row>
<row>
<entry thead="no"><para><nonbreakablespace/> </para></entry><entry thead="no"><para>There is a single copy of the message performed during a typical delivery. During the <ref refid="cfe__sb_8h_1a91b4b63f7d168bd78dc92d894ad7f77d" kindref="member">CFE_SB_SendMsg</ref> API, the software bus copies the message from the callers memory space to the software bus memory space. The <ref refid="cfe__sb_8h_1a54840fe06aeb08b1e2c8df420474780d" kindref="member">CFE_SB_RcvMsg</ref> API gives the user a pointer to the message in the software bus memory space. This is equivalent to the copy mode send and pointer mode receive in the heritage software bus used on WMAP, ST5, SDO etc. </para></entry></row>
<row>
<entry thead="no"><para><bold>(Q) When does the software bus free the message buffer during a typical message delivery process? Or how long is the message, and the pointer to the message in the <ref refid="cfe__sb_8h_1a54840fe06aeb08b1e2c8df420474780d" kindref="member">CFE_SB_RcvMsg</ref> valid? </bold></para></entry></row>
<row>
<entry thead="no"><para><nonbreakablespace/> </para></entry><entry thead="no"><para>After receiving a message by calling <ref refid="cfe__sb_8h_1a54840fe06aeb08b1e2c8df420474780d" kindref="member">CFE_SB_RcvMsg</ref>, the message received stays in the software bus memory until the next call to <ref refid="cfe__sb_8h_1a54840fe06aeb08b1e2c8df420474780d" kindref="member">CFE_SB_RcvMsg</ref> with the same Pipe Id. This means that the message pointer given by the software bus to the caller of <ref refid="cfe__sb_8h_1a54840fe06aeb08b1e2c8df420474780d" kindref="member">CFE_SB_RcvMsg</ref> is valid until the next call to <ref refid="cfe__sb_8h_1a54840fe06aeb08b1e2c8df420474780d" kindref="member">CFE_SB_RcvMsg</ref> with the same pipe id. If the caller needs the message longer than the next call to <ref refid="cfe__sb_8h_1a54840fe06aeb08b1e2c8df420474780d" kindref="member">CFE_SB_RcvMsg</ref>, the caller must copy the message to its memory space. </para></entry></row>
<row>
<entry thead="no"><para><bold>(Q) The first parameter in the <ref refid="cfe__sb_8h_1a54840fe06aeb08b1e2c8df420474780d" kindref="member">CFE_SB_RcvMsg</ref> API is a pointer to a pointer which can get confusing. How can I be sure that the correct address is given for this parameter. </bold></para></entry></row>
<row>
<entry thead="no"><para><nonbreakablespace/> </para></entry><entry thead="no"><para>Typically a caller declares a ptr of type <ref refid="union_c_f_e___s_b___msg__t" kindref="compound">CFE_SB_Msg_t</ref> (i.e. <ref refid="union_c_f_e___s_b___msg__t" kindref="compound">CFE_SB_Msg_t</ref> *Ptr) then gives the address of that pointer (&amp;Ptr) as this parameter. After a successful call to <ref refid="cfe__sb_8h_1a54840fe06aeb08b1e2c8df420474780d" kindref="member">CFE_SB_RcvMsg</ref>, Ptr will point to the first byte of the software bus message header. This should be used as a read-only pointer. In systems with an MMU, writes to this pointer may cause a memory protection fault. </para></entry></row>
<row>
<entry thead="no"><para><bold>(Q) Why am I not seeing expected Message Limit error events or Pipe Overflow events? </bold></para></entry></row>
<row>
<entry thead="no"><para><nonbreakablespace/> </para></entry><entry thead="no"><para>It is possible the events are being filtered by cFE Event Services. The filtering for this event may be specified in the platform configuration file or it may have been commanded after the system initializes.<linebreak/>
 There is a corresponding counter for each of these conditions. First verify that the condition is happening by viewing the counter in SB HK telemetry. If the condition is happening, you can view the SB filter information through the EVS App Data Main page by clicking the &apos;go to&apos; button for SB. The event Id for these events can be learned through a previous event or from the <ref refid="cfe__sb__events_8h" kindref="compound">cfe_sb_events.h</ref> file. </para></entry></row>
<row>
<entry thead="no"><para><bold>(Q) Why does the SB provide event filtering through the platform configuration file? </bold></para></entry></row>
<row>
<entry thead="no"><para><nonbreakablespace/> </para></entry><entry thead="no"><para>To give the user the ability to filter events before an EVS command can be sent. During system initialization, there are many conditions occurring that can cause a flood of SB events such as No Subscribers, Pipe Overflow and MsgId to Pipe errors. This gives the user a way to limit these events. </para></entry></row>
<row>
<entry thead="no"><para><bold>(Q) Why does SB have so many debug event messages? </bold></para></entry></row>
<row>
<entry thead="no"><para><nonbreakablespace/> </para></entry><entry thead="no"><para>The SB debug messages are positive acknowledgments that an action (like receiving a cmd, creating a pipe or subscribing to a message) has occurred. They are intended to help isolate system problems. For instance, if an expected response to a command is not happening, it may be possible to repeat the scenario with the debug event turned on to verify that the command was successfully received. </para></entry></row>
<row>
<entry thead="no"><para><bold>(Q) How is the QOS parameter in the <ref refid="cfe__sb_8h_1a5939c3681044a3d953d0fe72dd577889" kindref="member">CFE_SB_SubscribeEx</ref> used by the software bus? </bold></para></entry></row>
<row>
<entry thead="no"><para><nonbreakablespace/> </para></entry><entry thead="no"><para>The QOS parameter is currently unused by the software bus. It is a placeholder to be used with the future software bus capability of inter-processor communication. Setting the QOS value to the SB defined <ref refid="cfe__sb_8h_1aa20e8d7fe06a65514dd39e65a7be5ca5" kindref="member">CFE_SB_Default_Qos</ref> (QOS.Priority=0,QOS.Reliability=0) will ensure seamless integration when the software bus is expanded to support inter-processor communication. </para></entry></row>
</table>
</para><para>Prev: <ref refid="cfesbugops" kindref="compound">Operation of the SB Software</ref> <linebreak/>
 Up To: <ref refid="cfesbovr" kindref="compound">cFE Software Bus Overview</ref> </para>    </detaileddescription>
  </compounddef>
</doxygen>
