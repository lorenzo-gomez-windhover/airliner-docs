<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="cfe__time_8h" kind="file" language="C++">
    <compoundname>cfe_time.h</compoundname>
    <includes refid="common__types_8h" local="yes">common_types.h</includes>
    <includedby refid="cfe__evs_8h" local="yes">inc/cfe_evs.h</includedby>
    <includedby refid="cfe__evs__msg_8h" local="yes">inc/cfe_evs_msg.h</includedby>
    <includedby refid="cfe__sb_8h" local="yes">inc/cfe_sb.h</includedby>
    <includedby refid="cfe__fs_8h" local="yes">inc/cfe_fs.h</includedby>
    <includedby refid="cfe_8h" local="yes">inc/cfe.h</includedby>
    <includedby refid="cfe__tbl_8h" local="yes">inc/cfe_tbl.h</includedby>
    <includedby refid="cfe__es__erlog__typedef_8h" local="no">inc/private/cfe_es_erlog_typedef.h</includedby>
    <includedby refid="cfe__es__resetdata__typedef_8h" local="no">inc/private/cfe_es_resetdata_typedef.h</includedby>
    <includedby refid="cfe__sb__priv_8h" local="yes">sb/cfe_sb_priv.h</includedby>
    <incdepgraph>
      <node id="605">
        <label>common_types.h</label>
        <link refid="common__types_8h"/>
      </node>
      <node id="604">
        <label>inc/cfe_time.h</label>
        <link refid="cfe_time.h"/>
        <childnode refid="605" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="611">
        <label>inc/cfe_tbl_filedef.h</label>
        <link refid="cfe__tbl__filedef_8h"/>
      </node>
      <node id="612">
        <label>inc/cfe_tbl_msg.h</label>
        <link refid="cfe__tbl__msg_8h"/>
      </node>
      <node id="619">
        <label>es/cfe_es_log.h</label>
        <link refid="cfe__es__log_8h"/>
      </node>
      <node id="622">
        <label>inc/private/cfe_es_resetdata_typedef.h</label>
        <link refid="cfe__es__resetdata__typedef_8h"/>
      </node>
      <node id="615">
        <label>es/cfe_es_cds_mempool.h</label>
        <link refid="cfe__es__cds__mempool_8h"/>
        <childnode refid="616" relation="include">
        </childnode>
      </node>
      <node id="606">
        <label>inc/cfe_time.h</label>
        <link refid="cfe_time.h"/>
        <childnode refid="607" relation="include">
        </childnode>
        <childnode refid="620" relation="include">
        </childnode>
        <childnode refid="623" relation="include">
        </childnode>
        <childnode refid="625" relation="include">
        </childnode>
        <childnode refid="608" relation="include">
        </childnode>
        <childnode refid="626" relation="include">
        </childnode>
        <childnode refid="627" relation="include">
        </childnode>
        <childnode refid="622" relation="include">
        </childnode>
        <childnode refid="618" relation="include">
        </childnode>
      </node>
      <node id="620">
        <label>inc/cfe_evs_msg.h</label>
        <link refid="cfe__evs__msg_8h"/>
        <childnode refid="607" relation="include">
        </childnode>
        <childnode refid="621" relation="include">
        </childnode>
        <childnode refid="617" relation="include">
        </childnode>
      </node>
      <node id="618">
        <label>sb/cfe_sb_priv.h</label>
        <link refid="cfe__sb__priv_8h"/>
      </node>
      <node id="610">
        <label>es/cfe_es_perf.h</label>
        <link refid="cfe__es__perf_8h"/>
      </node>
      <node id="621">
        <label>inc/private/cfe_evs_log_typedef.h</label>
        <link refid="cfe__evs__log__typedef_8h"/>
        <childnode refid="622" relation="include">
        </childnode>
        <childnode refid="617" relation="include">
        </childnode>
      </node>
      <node id="617">
        <label>evs/cfe_evs_task.h</label>
        <link refid="cfe__evs__task_8h"/>
      </node>
      <node id="627">
        <label>inc/private/cfe_es_erlog_typedef.h</label>
        <link refid="cfe__es__erlog__typedef_8h"/>
        <childnode refid="622" relation="include">
        </childnode>
      </node>
      <node id="616">
        <label>es/cfe_es_cds.h</label>
        <link refid="cfe__es__cds_8h"/>
      </node>
      <node id="623">
        <label>inc/cfe_sb.h</label>
        <link refid="cfe__sb_8h"/>
        <childnode refid="620" relation="include">
        </childnode>
        <childnode refid="607" relation="include">
        </childnode>
        <childnode refid="608" relation="include">
        </childnode>
        <childnode refid="624" relation="include">
        </childnode>
        <childnode refid="610" relation="include">
        </childnode>
        <childnode refid="617" relation="include">
        </childnode>
        <childnode refid="618" relation="include">
        </childnode>
      </node>
      <node id="608">
        <label>inc/cfe.h</label>
        <link refid="cfe_8h"/>
        <childnode refid="609" relation="include">
        </childnode>
        <childnode refid="611" relation="include">
        </childnode>
        <childnode refid="612" relation="include">
        </childnode>
        <childnode refid="613" relation="include">
        </childnode>
        <childnode refid="614" relation="include">
        </childnode>
        <childnode refid="619" relation="include">
        </childnode>
      </node>
      <node id="607">
        <label>inc/cfe_evs.h</label>
        <link refid="cfe__evs_8h"/>
        <childnode refid="608" relation="include">
        </childnode>
        <childnode refid="610" relation="include">
        </childnode>
        <childnode refid="617" relation="include">
        </childnode>
      </node>
      <node id="625">
        <label>inc/cfe_fs.h</label>
        <link refid="cfe__fs_8h"/>
        <childnode refid="608" relation="include">
        </childnode>
      </node>
      <node id="614">
        <label>inc/private/cfe_private.h</label>
        <link refid="cfe__private_8h"/>
        <childnode refid="615" relation="include">
        </childnode>
        <childnode refid="617" relation="include">
        </childnode>
        <childnode refid="618" relation="include">
        </childnode>
      </node>
      <node id="626">
        <label>inc/cfe_tbl.h</label>
        <link refid="cfe__tbl_8h"/>
        <childnode refid="608" relation="include">
        </childnode>
      </node>
      <node id="613">
        <label>inc/cfe_time_msg.h</label>
        <link refid="cfe__time__msg_8h"/>
      </node>
      <node id="624">
        <label>inc/cfe_sb_msg.h</label>
        <link refid="cfe__sb__msg_8h"/>
        <childnode refid="618" relation="include">
        </childnode>
      </node>
      <node id="609">
        <label>inc/cfe_es_msg.h</label>
        <link refid="cfe__es__msg_8h"/>
        <childnode refid="610" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="struct_c_f_e___t_i_m_e___sys_time__t" prot="public">CFE_TIME_SysTime_t</innerclass>
    <innerclass refid="struct_c_f_e___t_i_m_e___reset_vars__t" prot="public">CFE_TIME_ResetVars_t</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="cfe__time_8h_1af5d977124fb02b03b842af4cf188907b" prot="public" static="no">
        <name>CFE_TIME_PRINTED_STRING_SIZE</name>
        <initializer>24</initializer>
        <briefdescription>
<para>Required size of buffer to be passed into <ref refid="cfe__time_8h_1a008e7b0c99cc1aac24a73b5cd032eee7" kindref="member">CFE_TIME_Print</ref> (includes null terminator) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/cfe_time.h" line="65" column="9" bodyfile="inc/cfe_time.h" bodystart="65" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="cfe__time_8h_1a5bf8c5abfd59abee6d95c5eeafb1c79f" prot="public" static="no">
        <name>CFE_TIME_ClockState_t</name>
        <enumvalue id="cfe__time_8h_1a5bf8c5abfd59abee6d95c5eeafb1c79fa87b97b070dab56e5bbc88627042d3c0e" prot="public">
          <name>CFE_TIME_INVALID</name>
          <initializer>= -1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The spacecraft time has not been set since the last clock reset. Times returned by clock routines have no relationship to any ground-based time reference. </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="cfe__time_8h_1a5bf8c5abfd59abee6d95c5eeafb1c79fa75460b13bb03a3989fc930d7be6f6f07" prot="public">
          <name>CFE_TIME_VALID</name>
          <initializer>=  0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The spacecraft time has been set at least once since the last clock reset, and it is synchronized with the primary on-board time base. Times returned by clock routines can be trusted. </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="cfe__time_8h_1a5bf8c5abfd59abee6d95c5eeafb1c79fa6aa24a0f37f5f9aefca926c667de0137" prot="public">
          <name>CFE_TIME_FLYWHEEL</name>
          <initializer>=  1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The spacecraft time has been set at least once since the last clock reset, but it is not currently synchronized with the primary on-board time base. Times returned by clock routines are a &quot;best guess&quot; based on a non-optimal oscillator. </para>          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Enumerated types identifying the quality of the current time. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Description</title><para>The <ref refid="cfe__time_8h_1a5bf8c5abfd59abee6d95c5eeafb1c79f" kindref="member">CFE_TIME_ClockState_t</ref> enumerations identify the three recognized states of the current time. If the clock has never been successfully synchronized with the primary onboard clock source, the time is conisdered to be <ref refid="cfe__time_8h_1a5bf8c5abfd59abee6d95c5eeafb1c79fa87b97b070dab56e5bbc88627042d3c0e" kindref="member">CFE_TIME_INVALID</ref>. If the time is currently synchronized (i.e. - the primary synchronization mechanism has not been dropped for any significant amount of time), then the current time is considered to be <ref refid="cfe__time_8h_1a5bf8c5abfd59abee6d95c5eeafb1c79fa75460b13bb03a3989fc930d7be6f6f07" kindref="member">CFE_TIME_VALID</ref>. If the time had, at some point in the past, been synchronized, but the synchronization with the primary onboard clock has since been lost, then the time is considered to be <ref refid="cfe__time_8h_1a5bf8c5abfd59abee6d95c5eeafb1c79fa6aa24a0f37f5f9aefca926c667de0137" kindref="member">CFE_TIME_FLYWHEEL</ref>. Since different clocks drift at different rates from one another, the accuracy of the time while in <ref refid="cfe__time_8h_1a5bf8c5abfd59abee6d95c5eeafb1c79fa6aa24a0f37f5f9aefca926c667de0137" kindref="member">CFE_TIME_FLYWHEEL</ref> is dependent upon the time spent in that state. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/cfe_time.h" line="105" column="1" bodyfile="inc/cfe_time.h" bodystart="104" bodyend="119"/>
      </memberdef>
      <memberdef kind="enum" id="cfe__time_8h_1a7db3d8878781fdce28aa67bcf981fd0f" prot="public" static="no">
        <name>CFE_TIME_Compare_t</name>
        <enumvalue id="cfe__time_8h_1a7db3d8878781fdce28aa67bcf981fd0faaa95f3abeed2fc9e89057464b95f7038" prot="public">
          <name>CFE_TIME_A_LT_B</name>
          <initializer>= -1</initializer>
          <briefdescription>
<para>The first specified time is considered to be before the second specified time. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="cfe__time_8h_1a7db3d8878781fdce28aa67bcf981fd0fa5bfe2555e735df286570d2463bb46848" prot="public">
          <name>CFE_TIME_EQUAL</name>
          <initializer>=  0</initializer>
          <briefdescription>
<para>The two specified times are considered to be equal. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="cfe__time_8h_1a7db3d8878781fdce28aa67bcf981fd0fabf10f1a2986fd27bd13c95d91aae66b3" prot="public">
          <name>CFE_TIME_A_GT_B</name>
          <initializer>=  1</initializer>
          <briefdescription>
<para>The first specified time is considered to be after the second specified time. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Enumerated types identifying the relative relationships of two times. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Description</title><para>Since time fields contain numbers that are relative to an epoch time, then it is possible for a time value to be &quot;negative&quot;. This can lead to some confusion about what relationship exists between two time values. To resolve this confusion, the cFE provides the API <ref refid="cfe__time_8h_1abd11fb8c23847440915308528c2e4470" kindref="member">CFE_TIME_Compare</ref> which returns these enumerated values. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/cfe_time.h" line="133" column="1" bodyfile="inc/cfe_time.h" bodystart="132" bodyend="137"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="cfe__time_8h_1a41a981b67b2962a20e985b96e39fc39e" prot="public" static="no">
        <type><ref refid="common__types_8h_1a5eb512da689eec1a7472ab97e2ab6be3" kindref="member">int32</ref>(*</type>
        <definition>typedef int32(* CFE_TIME_SynchCallbackPtr_t) (void)</definition>
        <argsstring>)(void)</argsstring>
        <name>CFE_TIME_SynchCallbackPtr_t</name>
        <briefdescription>
<para>Time Synchronization Callback Function Ptr Type. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Description</title><para>Applications that wish to get direct notification of the receipt of the cFE Time Synchronization signal (typically a 1 Hz signal), must register a callback function with the following prototype via the <ref refid="cfe__time_8h_1ae13a973062a2174417e4a30465a12146" kindref="member">CFE_TIME_RegisterSynchCallback</ref> API. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/cfe_time.h" line="169" column="1" bodyfile="inc/cfe_time.h" bodystart="169" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="cfe__time_8h_1abf540f01ef8e0b2c7f2ec755148b6ac6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_c_f_e___t_i_m_e___sys_time__t" kindref="compound">CFE_TIME_SysTime_t</ref></type>
        <definition>CFE_TIME_SysTime_t CFE_TIME_GetTime</definition>
        <argsstring>(void)</argsstring>
        <name>CFE_TIME_GetTime</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get the current spacecraft time. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Description</title><para>This routine returns the current spacecraft time. The time returned is either TAI (no leap seconds) or UTC (including leap seconds). This choice is made in the mission configuration file by defining either <ref refid="cfe__mission__cfg_8h_1a9407c65fd64a9918ae07287b82adf320" kindref="member">CFE_TIME_CFG_DEFAULT_TAI</ref> or <ref refid="cfe__mission__cfg_8h_1a5f97e271186900711dda18e60e17cd15" kindref="member">CFE_TIME_CFG_DEFAULT_UTC</ref> as TRUE at compile time. To maintain re-usability across missions, most applications should be using this function (or <ref refid="cfe__time_8h_1abf540f01ef8e0b2c7f2ec755148b6ac6" kindref="member">CFE_TIME_GetTime</ref>) rather than the specific routines for getting UTC/TAI directly.</para></simplesect>
<simplesect kind="par"><title>Assumptions, External Events, and Notes:</title><para>None</para></simplesect>
<simplesect kind="return"><para><table rows="1" cols="2"><row>
<entry thead="no"><para><ref refid="struct_c_f_e___t_i_m_e___sys_time__t" kindref="compound">CFE_TIME_SysTime_t</ref> </para></entry><entry thead="no"><para>The current spacecraft time  </para></entry></row>
</table>
</para></simplesect>
<simplesect kind="see"><para><ref refid="cfe__time_8h_1aad660f7e6d8b9f8fe502178f210b90c1" kindref="member">CFE_TIME_GetTAI</ref>, <ref refid="cfe__time_8h_1a8b05d5ce1362fe3f5d7978b810eb2f76" kindref="member">CFE_TIME_GetUTC</ref>, <ref refid="cfe__time_8h_1ad27faa0574e0d4dbec7269be1233da1e" kindref="member">CFE_TIME_GetMET</ref>, <ref refid="cfe__time_8h_1a30bd5373cc66b2b67e1ce5eb45333122" kindref="member">CFE_TIME_GetMETseconds</ref>, <ref refid="cfe__time_8h_1a00c542243c0845b0773d51fe4ba83393" kindref="member">CFE_TIME_GetMETsubsecs</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/cfe_time.h" line="197" column="1"/>
      </memberdef>
      <memberdef kind="function" id="cfe__time_8h_1aad660f7e6d8b9f8fe502178f210b90c1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_c_f_e___t_i_m_e___sys_time__t" kindref="compound">CFE_TIME_SysTime_t</ref></type>
        <definition>CFE_TIME_SysTime_t CFE_TIME_GetTAI</definition>
        <argsstring>(void)</argsstring>
        <name>CFE_TIME_GetTAI</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get the current TAI time. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Description</title><para>This routine returns the current TAI time to the caller. TAI is an international time standard that does not include leap seconds. This routine should only be used in situations where TAI is absolutely required. Applications that call <ref refid="cfe__time_8h_1aad660f7e6d8b9f8fe502178f210b90c1" kindref="member">CFE_TIME_GetTAI()</ref> may not be portable to all missions. Maintenance of correct TAI in flight is not guaranteed under all mission operations scenarios. To maintain re-usability across missions, most applications should be using <ref refid="cfe__time_8h_1abf540f01ef8e0b2c7f2ec755148b6ac6" kindref="member">CFE_TIME_GetTime()</ref>, rather than the specific routines for getting UTC/TAI directly.</para></simplesect>
<simplesect kind="par"><title>Assumptions, External Events, and Notes:</title><para><orderedlist>
<listitem><para>The &quot;TAI&quot; time returned is referenced to the mission-defined time epoch, which may or may not be the same as the standard TAI epoch.</para></listitem><listitem><para>Even though TAI does not include leap seconds, the time returned by this function can still jump forward or backward without warning when the spacecraft clock is set or adjusted by operators. Applications using this function must be able to handle these time discontinuities gracefully.</para></listitem></orderedlist>
</para></simplesect>
<simplesect kind="return"><para><table rows="1" cols="2"><row>
<entry thead="no"><para><ref refid="struct_c_f_e___t_i_m_e___sys_time__t" kindref="compound">CFE_TIME_SysTime_t</ref> </para></entry><entry thead="no"><para>The current TAI time  </para></entry></row>
</table>
</para></simplesect>
<simplesect kind="see"><para><ref refid="cfe__time_8h_1abf540f01ef8e0b2c7f2ec755148b6ac6" kindref="member">CFE_TIME_GetTime</ref>, <ref refid="cfe__time_8h_1a8b05d5ce1362fe3f5d7978b810eb2f76" kindref="member">CFE_TIME_GetUTC</ref>, <ref refid="cfe__time_8h_1ad27faa0574e0d4dbec7269be1233da1e" kindref="member">CFE_TIME_GetMET</ref>, <ref refid="cfe__time_8h_1a30bd5373cc66b2b67e1ce5eb45333122" kindref="member">CFE_TIME_GetMETseconds</ref>, <ref refid="cfe__time_8h_1a00c542243c0845b0773d51fe4ba83393" kindref="member">CFE_TIME_GetMETsubsecs</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/cfe_time.h" line="229" column="1"/>
      </memberdef>
      <memberdef kind="function" id="cfe__time_8h_1a8b05d5ce1362fe3f5d7978b810eb2f76" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_c_f_e___t_i_m_e___sys_time__t" kindref="compound">CFE_TIME_SysTime_t</ref></type>
        <definition>CFE_TIME_SysTime_t CFE_TIME_GetUTC</definition>
        <argsstring>(void)</argsstring>
        <name>CFE_TIME_GetUTC</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get the current UTC time. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Description</title><para>This routine returns the current UTC time to the caller. This routine should only be used in situations where UTC is absolutely required. Applications that call <ref refid="cfe__time_8h_1a8b05d5ce1362fe3f5d7978b810eb2f76" kindref="member">CFE_TIME_GetUTC()</ref> may not be portable to all missions. Maintenance of correct UTC in flight is not guaranteed under all mission operations scenarios. If UTC is maintained in flight, it will jump backwards occasionally due to leap second adjustments. To maintain re-usability across missions, most applications should be using <ref refid="cfe__time_8h_1abf540f01ef8e0b2c7f2ec755148b6ac6" kindref="member">CFE_TIME_GetTime()</ref>, rather than the specific routines for getting UTC/TAI directly.</para></simplesect>
<simplesect kind="par"><title>Assumptions, External Events, and Notes:</title><para>Note: The &quot;UTC&quot; time returned is referenced to the mission-defined time epoch, which may or may not be the same as the standard UTC epoch.</para></simplesect>
<simplesect kind="return"><para><table rows="1" cols="2"><row>
<entry thead="no"><para><ref refid="struct_c_f_e___t_i_m_e___sys_time__t" kindref="compound">CFE_TIME_SysTime_t</ref> </para></entry><entry thead="no"><para>The current UTC time  </para></entry></row>
</table>
</para></simplesect>
<simplesect kind="see"><para><ref refid="cfe__time_8h_1abf540f01ef8e0b2c7f2ec755148b6ac6" kindref="member">CFE_TIME_GetTime</ref>, <ref refid="cfe__time_8h_1aad660f7e6d8b9f8fe502178f210b90c1" kindref="member">CFE_TIME_GetTAI</ref>, <ref refid="cfe__time_8h_1ad27faa0574e0d4dbec7269be1233da1e" kindref="member">CFE_TIME_GetMET</ref>, <ref refid="cfe__time_8h_1a30bd5373cc66b2b67e1ce5eb45333122" kindref="member">CFE_TIME_GetMETseconds</ref>, <ref refid="cfe__time_8h_1a00c542243c0845b0773d51fe4ba83393" kindref="member">CFE_TIME_GetMETsubsecs</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/cfe_time.h" line="258" column="1"/>
      </memberdef>
      <memberdef kind="function" id="cfe__time_8h_1a67937a937d85d8c0f839fd12badc3315" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_c_f_e___t_i_m_e___sys_time__t" kindref="compound">CFE_TIME_SysTime_t</ref></type>
        <definition>CFE_TIME_SysTime_t CFE_TIME_MET2SCTime</definition>
        <argsstring>(CFE_TIME_SysTime_t METTime)</argsstring>
        <name>CFE_TIME_MET2SCTime</name>
        <param>
          <type><ref refid="struct_c_f_e___t_i_m_e___sys_time__t" kindref="compound">CFE_TIME_SysTime_t</ref></type>
          <declname>METTime</declname>
        </param>
        <briefdescription>
<para>Convert specified MET into Spacecraft Time. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Description</title><para>This function returns Spacecraft Time given MET. Note that Spacecraft Time is returned as either UTC or TAI depeneding on whether the mission configuration parameter <ref refid="cfe__mission__cfg_8h_1a5f97e271186900711dda18e60e17cd15" kindref="member">CFE_TIME_CFG_DEFAULT_UTC</ref> or <ref refid="cfe__mission__cfg_8h_1a9407c65fd64a9918ae07287b82adf320" kindref="member">CFE_TIME_CFG_DEFAULT_TAI</ref> was set to TRUE at compile time.</para></simplesect>
<simplesect kind="par"><title>Assumptions, External Events, and Notes:</title><para>None</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">METTime</parametername>
</parameternamelist>
<parameterdescription>
<para>The MET to be converted.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><table rows="1" cols="2"><row>
<entry thead="no"><para><ref refid="struct_c_f_e___t_i_m_e___sys_time__t" kindref="compound">CFE_TIME_SysTime_t</ref> </para></entry><entry thead="no"><para>Spacecraft Time (UTC or TAI) corresponding to the specified MET  </para></entry></row>
</table>
</para></simplesect>
<simplesect kind="see"><para><ref refid="cfe__time_8h_1ad27faa0574e0d4dbec7269be1233da1e" kindref="member">CFE_TIME_GetMET</ref>, <ref refid="cfe__time_8h_1a30bd5373cc66b2b67e1ce5eb45333122" kindref="member">CFE_TIME_GetMETseconds</ref>, <ref refid="cfe__time_8h_1a00c542243c0845b0773d51fe4ba83393" kindref="member">CFE_TIME_GetMETsubsecs</ref>, <ref refid="cfe__time_8h_1a6262446f4ca15369dec1ca68c8c15f54" kindref="member">CFE_TIME_Sub2MicroSecs</ref>, <ref refid="cfe__time_8h_1adf4e24a86a37b1ff7fdcbf38aff3a481" kindref="member">CFE_TIME_Micro2SubSecs</ref>, <ref refid="cfe__time_8h_1a8a93559be09b93af1821c22d6a02f7d6" kindref="member">CFE_TIME_CFE2FSSeconds</ref>, <ref refid="cfe__time_8h_1a0f8b1968e967bd7596b0e5dd353dc35d" kindref="member">CFE_TIME_FS2CFESeconds</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/cfe_time.h" line="283" column="1"/>
      </memberdef>
      <memberdef kind="function" id="cfe__time_8h_1adc71d23dcdef62c628f48a58d5c822d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_c_f_e___t_i_m_e___sys_time__t" kindref="compound">CFE_TIME_SysTime_t</ref></type>
        <definition>CFE_TIME_SysTime_t CFE_TIME_GetSTCF</definition>
        <argsstring>(void)</argsstring>
        <name>CFE_TIME_GetSTCF</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get the current value of the spacecraft time correction factor (STCF). </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Description</title><para>This routine returns the current value of the spacecraft time correction factor. This is the delta time between the MET and the TAI time. Applications cannot set or adjust the STCF; that can only be done through ground commands. However, science applications may want to include the STCF in their data products to aid in time correlation during downstream science data processing.</para></simplesect>
<simplesect kind="par"><title>Assumptions, External Events, and Notes:</title><para>None</para></simplesect>
<simplesect kind="return"><para><table rows="1" cols="2"><row>
<entry thead="no"><para><ref refid="struct_c_f_e___t_i_m_e___sys_time__t" kindref="compound">CFE_TIME_SysTime_t</ref> </para></entry><entry thead="no"><para>The current STCF  </para></entry></row>
</table>
</para></simplesect>
<simplesect kind="see"><para><ref refid="cfe__time_8h_1afbac2684eb7401dbc9c600139804f58d" kindref="member">CFE_TIME_GetLeapSeconds</ref>, <ref refid="cfe__time_8h_1af8131cc659f1e3c4e589f3f4b1935542" kindref="member">CFE_TIME_GetClockState</ref>, <ref refid="cfe__time_8h_1a9610a9cb24718d159d44a87029957d87" kindref="member">CFE_TIME_GetClockInfo</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/cfe_time.h" line="311" column="1"/>
      </memberdef>
      <memberdef kind="function" id="cfe__time_8h_1ad27faa0574e0d4dbec7269be1233da1e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_c_f_e___t_i_m_e___sys_time__t" kindref="compound">CFE_TIME_SysTime_t</ref></type>
        <definition>CFE_TIME_SysTime_t CFE_TIME_GetMET</definition>
        <argsstring>(void)</argsstring>
        <name>CFE_TIME_GetMET</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get the current value of the Mission Elapsed Time (MET). </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Description</title><para>This routine returns the current mission-elapsed time (MET). MET is usually derived from a hardware-based clock that is not adjusted during normal operations. Callers of this routine should not assume that the MET return value has any specific relationship to any ground-based time standard.</para></simplesect>
<simplesect kind="par"><title>Assumptions, External Events, and Notes:</title><para>None</para></simplesect>
<simplesect kind="return"><para><table rows="1" cols="2"><row>
<entry thead="no"><para><ref refid="struct_c_f_e___t_i_m_e___sys_time__t" kindref="compound">CFE_TIME_SysTime_t</ref> </para></entry><entry thead="no"><para>The current MET  </para></entry></row>
</table>
</para></simplesect>
<simplesect kind="see"><para><ref refid="cfe__time_8h_1abf540f01ef8e0b2c7f2ec755148b6ac6" kindref="member">CFE_TIME_GetTime</ref>, <ref refid="cfe__time_8h_1aad660f7e6d8b9f8fe502178f210b90c1" kindref="member">CFE_TIME_GetTAI</ref>, <ref refid="cfe__time_8h_1a8b05d5ce1362fe3f5d7978b810eb2f76" kindref="member">CFE_TIME_GetUTC</ref>, <ref refid="cfe__time_8h_1a30bd5373cc66b2b67e1ce5eb45333122" kindref="member">CFE_TIME_GetMETseconds</ref>, <ref refid="cfe__time_8h_1a00c542243c0845b0773d51fe4ba83393" kindref="member">CFE_TIME_GetMETsubsecs</ref>, <ref refid="cfe__time_8h_1a67937a937d85d8c0f839fd12badc3315" kindref="member">CFE_TIME_MET2SCTime</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/cfe_time.h" line="335" column="1"/>
      </memberdef>
      <memberdef kind="function" id="cfe__time_8h_1a30bd5373cc66b2b67e1ce5eb45333122" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="common__types_8h_1a9560e25c315bae45d1ed4e2ce49ce55a" kindref="member">uint32</ref></type>
        <definition>uint32 CFE_TIME_GetMETseconds</definition>
        <argsstring>(void)</argsstring>
        <name>CFE_TIME_GetMETseconds</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get the current seconds count of the mission-elapsed time. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Description</title><para>This routine is the same as <ref refid="cfe__time_8h_1ad27faa0574e0d4dbec7269be1233da1e" kindref="member">CFE_TIME_GetMET()</ref>, except that it returns only the integer seconds portion of the MET time.</para></simplesect>
<simplesect kind="par"><title>Assumptions, External Events, and Notes:</title><para>None</para></simplesect>
<simplesect kind="return"><para><table rows="1" cols="2"><row>
<entry thead="no"><para>The current MET seconds  </para></entry></row>
</table>
</para></simplesect>
<simplesect kind="see"><para><ref refid="cfe__time_8h_1abf540f01ef8e0b2c7f2ec755148b6ac6" kindref="member">CFE_TIME_GetTime</ref>, <ref refid="cfe__time_8h_1aad660f7e6d8b9f8fe502178f210b90c1" kindref="member">CFE_TIME_GetTAI</ref>, <ref refid="cfe__time_8h_1a8b05d5ce1362fe3f5d7978b810eb2f76" kindref="member">CFE_TIME_GetUTC</ref>, <ref refid="cfe__time_8h_1ad27faa0574e0d4dbec7269be1233da1e" kindref="member">CFE_TIME_GetMET</ref>, <ref refid="cfe__time_8h_1a00c542243c0845b0773d51fe4ba83393" kindref="member">CFE_TIME_GetMETsubsecs</ref>, <ref refid="cfe__time_8h_1a67937a937d85d8c0f839fd12badc3315" kindref="member">CFE_TIME_MET2SCTime</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/cfe_time.h" line="357" column="1"/>
      </memberdef>
      <memberdef kind="function" id="cfe__time_8h_1a00c542243c0845b0773d51fe4ba83393" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="common__types_8h_1a9560e25c315bae45d1ed4e2ce49ce55a" kindref="member">uint32</ref></type>
        <definition>uint32 CFE_TIME_GetMETsubsecs</definition>
        <argsstring>(void)</argsstring>
        <name>CFE_TIME_GetMETsubsecs</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get the current sub-seconds count of the mission-elapsed time. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Description</title><para>This routine is the same as <ref refid="cfe__time_8h_1ad27faa0574e0d4dbec7269be1233da1e" kindref="member">CFE_TIME_GetMET()</ref>, except that it returns only the integer sub-seconds portion of the MET time. Each count is equal to 2^(-32) seconds.</para></simplesect>
<simplesect kind="par"><title>Assumptions, External Events, and Notes:</title><para>None</para></simplesect>
<simplesect kind="return"><para><table rows="1" cols="2"><row>
<entry thead="no"><para>The current MET sub-seconds  </para></entry></row>
</table>
</para></simplesect>
<simplesect kind="see"><para><ref refid="cfe__time_8h_1abf540f01ef8e0b2c7f2ec755148b6ac6" kindref="member">CFE_TIME_GetTime</ref>, <ref refid="cfe__time_8h_1aad660f7e6d8b9f8fe502178f210b90c1" kindref="member">CFE_TIME_GetTAI</ref>, <ref refid="cfe__time_8h_1a8b05d5ce1362fe3f5d7978b810eb2f76" kindref="member">CFE_TIME_GetUTC</ref>, <ref refid="cfe__time_8h_1ad27faa0574e0d4dbec7269be1233da1e" kindref="member">CFE_TIME_GetMET</ref>, <ref refid="cfe__time_8h_1a30bd5373cc66b2b67e1ce5eb45333122" kindref="member">CFE_TIME_GetMETseconds</ref>, <ref refid="cfe__time_8h_1a67937a937d85d8c0f839fd12badc3315" kindref="member">CFE_TIME_MET2SCTime</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/cfe_time.h" line="379" column="1"/>
      </memberdef>
      <memberdef kind="function" id="cfe__time_8h_1afbac2684eb7401dbc9c600139804f58d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="common__types_8h_1adf957e9fa8c95c188ffacb8197aa8725" kindref="member">int16</ref></type>
        <definition>int16 CFE_TIME_GetLeapSeconds</definition>
        <argsstring>(void)</argsstring>
        <name>CFE_TIME_GetLeapSeconds</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get the current value of the leap seconds counter. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Description</title><para>This routine returns the current value of the leap seconds counter. This is the delta seconds between international atomic time (TAI) and universal coordinated time (UTC). Applications cannot set or adjust the leap seconds; that can only be done through ground commands. However, science applications may want to include the leap seconds counter in their data products to aid in time correlation during downstream science data processing. Note that some mission operations teams do not maintain the leap seconds count, preferring to adjust the STCF instead. Users of this function should check with their mission ops team to see how they are planning to handle leap seconds.</para></simplesect>
<simplesect kind="par"><title>Assumptions, External Events, and Notes:</title><para>None</para></simplesect>
<simplesect kind="return"><para><table rows="1" cols="2"><row>
<entry thead="no"><para>The current leap seconds.  </para></entry></row>
</table>
</para></simplesect>
<simplesect kind="see"><para><ref refid="cfe__time_8h_1adc71d23dcdef62c628f48a58d5c822d1" kindref="member">CFE_TIME_GetSTCF</ref>, <ref refid="cfe__time_8h_1af8131cc659f1e3c4e589f3f4b1935542" kindref="member">CFE_TIME_GetClockState</ref>, <ref refid="cfe__time_8h_1a9610a9cb24718d159d44a87029957d87" kindref="member">CFE_TIME_GetClockInfo</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/cfe_time.h" line="407" column="1"/>
      </memberdef>
      <memberdef kind="function" id="cfe__time_8h_1af8131cc659f1e3c4e589f3f4b1935542" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="cfe__time_8h_1a5bf8c5abfd59abee6d95c5eeafb1c79f" kindref="member">CFE_TIME_ClockState_t</ref></type>
        <definition>CFE_TIME_ClockState_t CFE_TIME_GetClockState</definition>
        <argsstring>(void)</argsstring>
        <name>CFE_TIME_GetClockState</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get the current state of the spacecraft clock. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Description</title><para>This routine returns the spacecraft clock state. Applications that are highly dependent on valid time may want to call this routine before taking actions based on the times returned by the various clock routines</para></simplesect>
<simplesect kind="par"><title>Assumptions, External Events, and Notes:</title><para>None</para></simplesect>
<simplesect kind="return"><para><table rows="1" cols="2"><row>
<entry thead="no"><para><ref refid="cfe__time_8h_1a5bf8c5abfd59abee6d95c5eeafb1c79f" kindref="member">CFE_TIME_ClockState_t</ref> </para></entry><entry thead="no"><para>The current spacecraft clock state  </para></entry></row>
</table>
</para></simplesect>
<simplesect kind="see"><para><ref refid="cfe__time_8h_1adc71d23dcdef62c628f48a58d5c822d1" kindref="member">CFE_TIME_GetSTCF</ref>, <ref refid="cfe__time_8h_1afbac2684eb7401dbc9c600139804f58d" kindref="member">CFE_TIME_GetLeapSeconds</ref>, <ref refid="cfe__time_8h_1a9610a9cb24718d159d44a87029957d87" kindref="member">CFE_TIME_GetClockInfo</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/cfe_time.h" line="433" column="1"/>
      </memberdef>
      <memberdef kind="function" id="cfe__time_8h_1a9610a9cb24718d159d44a87029957d87" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="common__types_8h_1a2e00abb078d312d1d8c4fbcd6be343d8" kindref="member">uint16</ref></type>
        <definition>uint16 CFE_TIME_GetClockInfo</definition>
        <argsstring>(void)</argsstring>
        <name>CFE_TIME_GetClockInfo</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Provides information about the spacecraft clock. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Description</title><para>This routine returns information on the spacecraft clock in a bit mask.</para></simplesect>
<simplesect kind="par"><title>Assumptions, External Events, and Notes:</title><para>None</para></simplesect>
<simplesect kind="return"><para><table rows="13" cols="2"><row>
<entry thead="no"><para>Spacecraft clock information. To extract the information from the returned value, the following masks can be used as in the following: <linebreak/>
 <computeroutput> if ((ReturnValue &amp; CFE_TIME_FLAG_xxxxxx) == CFE_TIME_FLAG_xxxxxx)</computeroutput> then the following definition of the <computeroutput>CFE_TIME_FLAG_xxxxxx</computeroutput> is true. <linebreak/>
  </para></entry></row>
<row>
<entry thead="no"><para><ref refid="cfe__time__msg_8h_1a2bbe889dc4b8f7299da1a2589b7be5c3" kindref="member">CFE_TIME_FLAG_CLKSET</ref> </para></entry><entry thead="no"><para>The spacecraft time has been set.   </para></entry></row>
<row>
<entry thead="no"><para><ref refid="cfe__time__msg_8h_1a6c60b3248b4971aca39e93f81adf76ff" kindref="member">CFE_TIME_FLAG_FLYING</ref> </para></entry><entry thead="no"><para>This instance of Time Services is flywheeling.   </para></entry></row>
<row>
<entry thead="no"><para><ref refid="cfe__time__msg_8h_1af356d945e6a7fe32b708d1063fec93dc" kindref="member">CFE_TIME_FLAG_SRCINT</ref> </para></entry><entry thead="no"><para>The clock source is set to &quot;internal&quot;.   </para></entry></row>
<row>
<entry thead="no"><para><ref refid="cfe__time__msg_8h_1a62a75a897b2ec4202c48d6377cb065ea" kindref="member">CFE_TIME_FLAG_SIGPRI</ref> </para></entry><entry thead="no"><para>The clock signal is set to &quot;primary&quot;.   </para></entry></row>
<row>
<entry thead="no"><para><ref refid="cfe__time__msg_8h_1a75e176dca054f85073cc2dd47f3c81d9" kindref="member">CFE_TIME_FLAG_SRVFLY</ref> </para></entry><entry thead="no"><para>The Time Server is in flywheel mode.   </para></entry></row>
<row>
<entry thead="no"><para><ref refid="cfe__time__msg_8h_1a9d935775a6cae355bca43ec05ed5e54c" kindref="member">CFE_TIME_FLAG_CMDFLY</ref> </para></entry><entry thead="no"><para>This instance of Time Services was commanded into flywheel mode.   </para></entry></row>
<row>
<entry thead="no"><para><ref refid="cfe__time__msg_8h_1a39ca12bc465c6c81f597923390ba34a8" kindref="member">CFE_TIME_FLAG_ADDADJ</ref> </para></entry><entry thead="no"><para>One time STCF Adjustment is to be done in positive direction.   </para></entry></row>
<row>
<entry thead="no"><para><ref refid="cfe__time__msg_8h_1a3135a414e103dc83fce02e8d2bfd4ac6" kindref="member">CFE_TIME_FLAG_ADD1HZ</ref> </para></entry><entry thead="no"><para>1 Hz STCF Adjustment is to be done in a positive direction   </para></entry></row>
<row>
<entry thead="no"><para><ref refid="cfe__time__msg_8h_1a77971a92d200ec705525c25691f09831" kindref="member">CFE_TIME_FLAG_ADDTCL</ref> </para></entry><entry thead="no"><para>Time Client Latency is applied in a positive direction.   </para></entry></row>
<row>
<entry thead="no"><para><ref refid="cfe__time__msg_8h_1a9fb45cbf8274a981d465f84453f5eda5" kindref="member">CFE_TIME_FLAG_SERVER</ref> </para></entry><entry thead="no"><para>This instance of Time Services is a Time Server.   </para></entry></row>
<row>
<entry thead="no"><para><ref refid="cfe__time__msg_8h_1a0702217ba26b86180a4667a7e56253a5" kindref="member">CFE_TIME_FLAG_GDTONE</ref> </para></entry><entry thead="no"><para>The tone received is good compared to the last tone received.   </para></entry></row>
<row>
<entry thead="no"><para><ref refid="cfe__time__msg_8h_1ad6939063373cadda9539de5d300e1b5e" kindref="member">CFE_TIME_FLAG_UNUSED</ref> </para></entry><entry thead="no"><para>Reserved flags - should be zero.   </para></entry></row>
</table>
</para></simplesect>
<simplesect kind="see"><para><ref refid="cfe__time_8h_1adc71d23dcdef62c628f48a58d5c822d1" kindref="member">CFE_TIME_GetSTCF</ref>, <ref refid="cfe__time_8h_1afbac2684eb7401dbc9c600139804f58d" kindref="member">CFE_TIME_GetLeapSeconds</ref>, <ref refid="cfe__time_8h_1af8131cc659f1e3c4e589f3f4b1935542" kindref="member">CFE_TIME_GetClockState</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/cfe_time.h" line="467" column="1"/>
      </memberdef>
      <memberdef kind="function" id="cfe__time_8h_1a37506ce0f1156266a217b2f406440673" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_c_f_e___t_i_m_e___sys_time__t" kindref="compound">CFE_TIME_SysTime_t</ref></type>
        <definition>CFE_TIME_SysTime_t CFE_TIME_Add</definition>
        <argsstring>(CFE_TIME_SysTime_t Time1, CFE_TIME_SysTime_t Time2)</argsstring>
        <name>CFE_TIME_Add</name>
        <param>
          <type><ref refid="struct_c_f_e___t_i_m_e___sys_time__t" kindref="compound">CFE_TIME_SysTime_t</ref></type>
          <declname>Time1</declname>
        </param>
        <param>
          <type><ref refid="struct_c_f_e___t_i_m_e___sys_time__t" kindref="compound">CFE_TIME_SysTime_t</ref></type>
          <declname>Time2</declname>
        </param>
        <briefdescription>
<para>Adds two time values. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Description</title><para>This routine adds the two specified times and returns the result. Normally, at least one of the input times should be a value representing a delta time. Adding two absolute times together will not cause an error, but the result will probably be meaningless.</para></simplesect>
<simplesect kind="par"><title>Assumptions, External Events, and Notes:</title><para>None</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">Time1</parametername>
</parameternamelist>
<parameterdescription>
<para>The first time to be added.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">Time2</parametername>
</parameternamelist>
<parameterdescription>
<para>The second time to be added.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><table rows="1" cols="2"><row>
<entry thead="no"><para>The sum of the two times, in the <ref refid="struct_c_f_e___t_i_m_e___sys_time__t" kindref="compound">CFE_TIME_SysTime_t</ref> format described above. If the sum is greater than the maximum value that can be stored in a <ref refid="struct_c_f_e___t_i_m_e___sys_time__t" kindref="compound">CFE_TIME_SysTime_t</ref>, the result will roll over (this is not considered an error).  </para></entry></row>
</table>
</para></simplesect>
<simplesect kind="see"><para><ref refid="cfe__time_8h_1a50e8edf09dc85ff930021cfa69b445f6" kindref="member">CFE_TIME_Subtract</ref>, <ref refid="cfe__time_8h_1abd11fb8c23847440915308528c2e4470" kindref="member">CFE_TIME_Compare</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/cfe_time.h" line="500" column="1"/>
      </memberdef>
      <memberdef kind="function" id="cfe__time_8h_1a50e8edf09dc85ff930021cfa69b445f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_c_f_e___t_i_m_e___sys_time__t" kindref="compound">CFE_TIME_SysTime_t</ref></type>
        <definition>CFE_TIME_SysTime_t CFE_TIME_Subtract</definition>
        <argsstring>(CFE_TIME_SysTime_t Time1, CFE_TIME_SysTime_t Time2)</argsstring>
        <name>CFE_TIME_Subtract</name>
        <param>
          <type><ref refid="struct_c_f_e___t_i_m_e___sys_time__t" kindref="compound">CFE_TIME_SysTime_t</ref></type>
          <declname>Time1</declname>
        </param>
        <param>
          <type><ref refid="struct_c_f_e___t_i_m_e___sys_time__t" kindref="compound">CFE_TIME_SysTime_t</ref></type>
          <declname>Time2</declname>
        </param>
        <briefdescription>
<para>Subtracts two time values. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Description</title><para>This routine subtracts time2 from time1 and returns the result. The time values can represent either absolute or delta times, but not all combinations make sense.<itemizedlist>
<listitem><para>AbsTime - AbsTime = DeltaTime</para></listitem><listitem><para>AbsTime - DeltaTime = AbsTime</para></listitem><listitem><para>DeltaTime - DeltaTime = DeltaTime</para></listitem><listitem><para>DeltaTime - AbsTime = garbage</para></listitem></itemizedlist>
</para></simplesect>
<simplesect kind="par"><title>Assumptions, External Events, and Notes:</title><para>None</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">Time1</parametername>
</parameternamelist>
<parameterdescription>
<para>The base time.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">Time2</parametername>
</parameternamelist>
<parameterdescription>
<para>The time to be subtracted from the base time.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><table rows="1" cols="2"><row>
<entry thead="no"><para>The result of subtracting the two times, in the <ref refid="struct_c_f_e___t_i_m_e___sys_time__t" kindref="compound">CFE_TIME_SysTime_t</ref> format. If the subtraction results in an underflow, the result will roll over (this is not considered an error).  </para></entry></row>
</table>
</para></simplesect>
<simplesect kind="see"><para><ref refid="cfe__time_8h_1a37506ce0f1156266a217b2f406440673" kindref="member">CFE_TIME_Add</ref>, <ref refid="cfe__time_8h_1abd11fb8c23847440915308528c2e4470" kindref="member">CFE_TIME_Compare</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/cfe_time.h" line="531" column="1"/>
      </memberdef>
      <memberdef kind="function" id="cfe__time_8h_1abd11fb8c23847440915308528c2e4470" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="cfe__time_8h_1a7db3d8878781fdce28aa67bcf981fd0f" kindref="member">CFE_TIME_Compare_t</ref></type>
        <definition>CFE_TIME_Compare_t CFE_TIME_Compare</definition>
        <argsstring>(CFE_TIME_SysTime_t TimeA, CFE_TIME_SysTime_t TimeB)</argsstring>
        <name>CFE_TIME_Compare</name>
        <param>
          <type><ref refid="struct_c_f_e___t_i_m_e___sys_time__t" kindref="compound">CFE_TIME_SysTime_t</ref></type>
          <declname>TimeA</declname>
        </param>
        <param>
          <type><ref refid="struct_c_f_e___t_i_m_e___sys_time__t" kindref="compound">CFE_TIME_SysTime_t</ref></type>
          <declname>TimeB</declname>
        </param>
        <briefdescription>
<para>Compares two time values. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Description</title><para>This routine compares two time values to see which is &quot;greater&quot;. It is important that applications use this function rather than trying to directly compare the component pieces of times. This function will handle roll-over cases seamlessly, which may not be intuitively obvious. The cFE&apos;s internal representation of time &quot;rolls over&quot; when the 32 bit seconds count reaches 0xFFFFFFFF. Also, subtracting a delta time from an absolute time close to the epoch could result in &quot;roll under&quot;. The strange cases that result from these situations can be handled by defining the comparison function for times as follows: Plot the two times on the circumference of a circle where 0 is at the top and 0x80000000 is at the bottom. If the shortest arc from time A to time B runs clockwise around the circle, then time A is less than time B. If the shortest arc from A to B runs counter-clockwise, then time A is greater than time B.</para></simplesect>
<simplesect kind="par"><title>Assumptions, External Events, and Notes:</title><para>None</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">TimeA</parametername>
</parameternamelist>
<parameterdescription>
<para>The first time to compare.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">TimeB</parametername>
</parameternamelist>
<parameterdescription>
<para>The second time to compare.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><table rows="4" cols="2"><row>
<entry thead="no"><para>The result of comparing the two times, one of:  </para></entry></row>
<row>
<entry thead="no"><para><ref refid="cfe__time_8h_1a7db3d8878781fdce28aa67bcf981fd0fa5bfe2555e735df286570d2463bb46848" kindref="member">CFE_TIME_EQUAL</ref> </para></entry><entry thead="no"><para>The two specified times are considered to be equal.   </para></entry></row>
<row>
<entry thead="no"><para><ref refid="cfe__time_8h_1a7db3d8878781fdce28aa67bcf981fd0fabf10f1a2986fd27bd13c95d91aae66b3" kindref="member">CFE_TIME_A_GT_B</ref> </para></entry><entry thead="no"><para>The first specified time is considered to be after the second specified time.   </para></entry></row>
<row>
<entry thead="no"><para><ref refid="cfe__time_8h_1a7db3d8878781fdce28aa67bcf981fd0faaa95f3abeed2fc9e89057464b95f7038" kindref="member">CFE_TIME_A_LT_B</ref> </para></entry><entry thead="no"><para>The first specified time is considered to be before the second specified time.   </para></entry></row>
</table>
</para></simplesect>
<simplesect kind="see"><para><ref refid="cfe__time_8h_1a37506ce0f1156266a217b2f406440673" kindref="member">CFE_TIME_Add</ref>, <ref refid="cfe__time_8h_1a50e8edf09dc85ff930021cfa69b445f6" kindref="member">CFE_TIME_Subtract</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/cfe_time.h" line="570" column="1"/>
      </memberdef>
      <memberdef kind="function" id="cfe__time_8h_1a6262446f4ca15369dec1ca68c8c15f54" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="common__types_8h_1a9560e25c315bae45d1ed4e2ce49ce55a" kindref="member">uint32</ref></type>
        <definition>uint32 CFE_TIME_Sub2MicroSecs</definition>
        <argsstring>(uint32 SubSeconds)</argsstring>
        <name>CFE_TIME_Sub2MicroSecs</name>
        <param>
          <type><ref refid="common__types_8h_1a9560e25c315bae45d1ed4e2ce49ce55a" kindref="member">uint32</ref></type>
          <declname>SubSeconds</declname>
        </param>
        <briefdescription>
<para>Converts a sub-seconds count to an equivalent number of microseconds. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Description</title><para>This routine converts from a sub-seconds count (each tick is 1 / 2^32 seconds) to microseconds (each tick is 1e-06 seconds).</para></simplesect>
<simplesect kind="par"><title>Assumptions, External Events, and Notes:</title><para>None</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">SubSeconds</parametername>
</parameternamelist>
<parameterdescription>
<para>The sub-seconds count to convert.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><table rows="1" cols="2"><row>
<entry thead="no"><para>The equivalent number of microseconds.  </para></entry></row>
</table>
</para></simplesect>
<simplesect kind="see"><para><ref refid="cfe__time_8h_1a67937a937d85d8c0f839fd12badc3315" kindref="member">CFE_TIME_MET2SCTime</ref>, <ref refid="cfe__time_8h_1adf4e24a86a37b1ff7fdcbf38aff3a481" kindref="member">CFE_TIME_Micro2SubSecs</ref>, <ref refid="cfe__time_8h_1a8a93559be09b93af1821c22d6a02f7d6" kindref="member">CFE_TIME_CFE2FSSeconds</ref>, <ref refid="cfe__time_8h_1a0f8b1968e967bd7596b0e5dd353dc35d" kindref="member">CFE_TIME_FS2CFESeconds</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/cfe_time.h" line="597" column="1"/>
      </memberdef>
      <memberdef kind="function" id="cfe__time_8h_1adf4e24a86a37b1ff7fdcbf38aff3a481" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="common__types_8h_1a9560e25c315bae45d1ed4e2ce49ce55a" kindref="member">uint32</ref></type>
        <definition>uint32 CFE_TIME_Micro2SubSecs</definition>
        <argsstring>(uint32 MicroSeconds)</argsstring>
        <name>CFE_TIME_Micro2SubSecs</name>
        <param>
          <type><ref refid="common__types_8h_1a9560e25c315bae45d1ed4e2ce49ce55a" kindref="member">uint32</ref></type>
          <declname>MicroSeconds</declname>
        </param>
        <briefdescription>
<para>Converts a number of microseconds to an equivalent sub-seconds count. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Description</title><para>This routine converts from microseconds (each tick is 1e-06 seconds) to a subseconds count (each tick is 1 / 2^32 seconds).</para></simplesect>
<simplesect kind="par"><title>Assumptions, External Events, and Notes:</title><para>None</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">MicroSeconds</parametername>
</parameternamelist>
<parameterdescription>
<para>The sub-seconds count to convert.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><table rows="1" cols="2"><row>
<entry thead="no"><para>The equivalent number of subseconds. If the number of microseconds passed in is greater than one second, (i.e. &gt; 999,999), the return value is equal to <computeroutput>0xffffffff</computeroutput>.  </para></entry></row>
</table>
</para></simplesect>
<simplesect kind="see"><para><ref refid="cfe__time_8h_1a67937a937d85d8c0f839fd12badc3315" kindref="member">CFE_TIME_MET2SCTime</ref>, <ref refid="cfe__time_8h_1a6262446f4ca15369dec1ca68c8c15f54" kindref="member">CFE_TIME_Sub2MicroSecs</ref>, <ref refid="cfe__time_8h_1a8a93559be09b93af1821c22d6a02f7d6" kindref="member">CFE_TIME_CFE2FSSeconds</ref>, <ref refid="cfe__time_8h_1a0f8b1968e967bd7596b0e5dd353dc35d" kindref="member">CFE_TIME_FS2CFESeconds</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/cfe_time.h" line="622" column="1"/>
      </memberdef>
      <memberdef kind="function" id="cfe__time_8h_1a8a93559be09b93af1821c22d6a02f7d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="common__types_8h_1a9560e25c315bae45d1ed4e2ce49ce55a" kindref="member">uint32</ref></type>
        <definition>uint32 CFE_TIME_CFE2FSSeconds</definition>
        <argsstring>(uint32 SecondsCFE)</argsstring>
        <name>CFE_TIME_CFE2FSSeconds</name>
        <param>
          <type><ref refid="common__types_8h_1a9560e25c315bae45d1ed4e2ce49ce55a" kindref="member">uint32</ref></type>
          <declname>SecondsCFE</declname>
        </param>
        <briefdescription>
<para>Converts cFE seconds into the File System&apos;s seconds. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Description</title><para>File systems use specific time epochs for their time tagging of files. Since spacecraft systems rarely use an epoch that matches a particular file system, this function provides a mechanism to translate a given spacecraft time (in seconds) to the file system&apos;s time. The conversion is controlled by the configuration parameter <ref refid="cfe__mission__cfg_8h_1a766ae923ab17c0eebbea8987b8dd6165" kindref="member">CFE_TIME_FS_FACTOR</ref> which is set equal to the number of seconds between the spacecraft&apos;s epoch and the file system&apos;s epoch.</para></simplesect>
<simplesect kind="par"><title>Assumptions, External Events, and Notes:</title><para>None</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">SecondsCFE</parametername>
</parameternamelist>
<parameterdescription>
<para>The spacecraft time, in seconds, to be converted.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><table rows="1" cols="2"><row>
<entry thead="no"><para>The equivalent time, in seconds, for the file system.  </para></entry></row>
</table>
</para></simplesect>
<simplesect kind="see"><para><ref refid="cfe__time_8h_1a67937a937d85d8c0f839fd12badc3315" kindref="member">CFE_TIME_MET2SCTime</ref>, <ref refid="cfe__time_8h_1a6262446f4ca15369dec1ca68c8c15f54" kindref="member">CFE_TIME_Sub2MicroSecs</ref>, <ref refid="cfe__time_8h_1adf4e24a86a37b1ff7fdcbf38aff3a481" kindref="member">CFE_TIME_Micro2SubSecs</ref>, <ref refid="cfe__time_8h_1a0f8b1968e967bd7596b0e5dd353dc35d" kindref="member">CFE_TIME_FS2CFESeconds</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/cfe_time.h" line="654" column="1"/>
      </memberdef>
      <memberdef kind="function" id="cfe__time_8h_1a0f8b1968e967bd7596b0e5dd353dc35d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="common__types_8h_1a9560e25c315bae45d1ed4e2ce49ce55a" kindref="member">uint32</ref></type>
        <definition>uint32 CFE_TIME_FS2CFESeconds</definition>
        <argsstring>(uint32 SecondsFS)</argsstring>
        <name>CFE_TIME_FS2CFESeconds</name>
        <param>
          <type><ref refid="common__types_8h_1a9560e25c315bae45d1ed4e2ce49ce55a" kindref="member">uint32</ref></type>
          <declname>SecondsFS</declname>
        </param>
        <briefdescription>
<para>Converts a file system&apos;s seconds into cFE seconds. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Description</title><para>File systems use specific time epochs for their time tagging of files. Since spacecraft systems rarely use an epoch that matches a particular file system, this function provides a mechanism to translate a file system time (in seconds) into the spacecraft time (in seconds). The conversion is controlled by the configuration parameter <ref refid="cfe__mission__cfg_8h_1a766ae923ab17c0eebbea8987b8dd6165" kindref="member">CFE_TIME_FS_FACTOR</ref> which is set equal to the number of seconds between the spacecraft&apos;s epoch and the file system&apos;s epoch.</para></simplesect>
<simplesect kind="par"><title>Assumptions, External Events, and Notes:</title><para>None</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">SecondsFS</parametername>
</parameternamelist>
<parameterdescription>
<para>The file system time, in seconds, to be converted.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><table rows="1" cols="2"><row>
<entry thead="no"><para>The equivalent time, in seconds, for the spacecraft.  </para></entry></row>
</table>
</para></simplesect>
<simplesect kind="see"><para><ref refid="cfe__time_8h_1a67937a937d85d8c0f839fd12badc3315" kindref="member">CFE_TIME_MET2SCTime</ref>, <ref refid="cfe__time_8h_1a6262446f4ca15369dec1ca68c8c15f54" kindref="member">CFE_TIME_Sub2MicroSecs</ref>, <ref refid="cfe__time_8h_1adf4e24a86a37b1ff7fdcbf38aff3a481" kindref="member">CFE_TIME_Micro2SubSecs</ref>, <ref refid="cfe__time_8h_1a8a93559be09b93af1821c22d6a02f7d6" kindref="member">CFE_TIME_CFE2FSSeconds</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/cfe_time.h" line="682" column="1"/>
      </memberdef>
      <memberdef kind="function" id="cfe__time_8h_1a008e7b0c99cc1aac24a73b5cd032eee7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CFE_TIME_Print</definition>
        <argsstring>(char *PrintBuffer, CFE_TIME_SysTime_t TimeToPrint)</argsstring>
        <name>CFE_TIME_Print</name>
        <param>
          <type>char *</type>
          <declname>PrintBuffer</declname>
        </param>
        <param>
          <type><ref refid="struct_c_f_e___t_i_m_e___sys_time__t" kindref="compound">CFE_TIME_SysTime_t</ref></type>
          <declname>TimeToPrint</declname>
        </param>
        <briefdescription>
<para>Print a time value as a string. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Description</title><para>This routine prints the specified time to the specified string buffer in the following format: <linebreak/>
 <linebreak/>
 <computeroutput>yyyy-ddd-hh</computeroutput>:mm:ss.xxxxx\0 <linebreak/>
 <linebreak/>
 where:<itemizedlist>
<listitem><para><computeroutput>yyyy</computeroutput> = year</para></listitem><listitem><para><computeroutput>ddd</computeroutput> = Julian day of the year</para></listitem><listitem><para><computeroutput>hh</computeroutput> = hour of the day (0 to 23)</para></listitem><listitem><para><computeroutput>mm</computeroutput> = minute (0 to 59)</para></listitem><listitem><para><computeroutput>ss</computeroutput> = second (0 to 59)</para></listitem><listitem><para><computeroutput>xxxxx</computeroutput> = subsecond formatted as a decimal fraction (1/4 second = 0.25000)</para></listitem><listitem><para><computeroutput>\0</computeroutput> = trailing null</para></listitem></itemizedlist>
</para></simplesect>
<simplesect kind="par"><title>Assumptions, External Events, and Notes:</title><para>None</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">PrintBuffer</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a character array of at least <ref refid="cfe__time_8h_1af5d977124fb02b03b842af4cf188907b" kindref="member">CFE_TIME_PRINTED_STRING_SIZE</ref> characters in length</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">TimeToPrint</parametername>
</parameternamelist>
<parameterdescription>
<para>The time to print into the character array.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">*PrintBuffer</parametername>
</parameternamelist>
<parameterdescription>
<para>The time as a character string as described above.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/cfe_time.h" line="718" column="1"/>
      </memberdef>
      <memberdef kind="function" id="cfe__time_8h_1a8cc4d14a6ba7409c62051367ad6eeb2d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CFE_TIME_ExternalTone</definition>
        <argsstring>(void)</argsstring>
        <name>CFE_TIME_ExternalTone</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Provides the 1 Hz signal from an external source. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Description</title><para>This routine provides a method for cFE TIME software to be notified of the occurance of the 1Hz tone signal without knowledge of the specific hardware design. Regardless of the source of the tone, this routine should be called as soon as possible after detection to allow cFE TIME software the opportunity to latch the local clock as close as possible to the instant of the tone.</para></simplesect>
<simplesect kind="par"><title>Assumptions, External Events, and Notes:</title><para><itemizedlist>
<listitem><para>This routine may be called directly from within the context of an interrupt handler.</para></listitem></itemizedlist>
</para></simplesect>
<simplesect kind="see"><para><ref refid="cfe__time_8h_1a393a242255790e6983c6a34583540f8e" kindref="member">CFE_TIME_ExternalMET</ref>, <ref refid="cfe__time_8h_1a50dde800616c087e70d782f24c031076" kindref="member">CFE_TIME_ExternalGPS</ref>, <ref refid="cfe__time_8h_1a4f25a38e9da41e473b30b2b07c9cb3da" kindref="member">CFE_TIME_ExternalTime</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/cfe_time.h" line="743" column="1"/>
      </memberdef>
      <memberdef kind="function" id="cfe__time_8h_1a393a242255790e6983c6a34583540f8e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CFE_TIME_ExternalMET</definition>
        <argsstring>(CFE_TIME_SysTime_t NewMET)</argsstring>
        <name>CFE_TIME_ExternalMET</name>
        <param>
          <type><ref refid="struct_c_f_e___t_i_m_e___sys_time__t" kindref="compound">CFE_TIME_SysTime_t</ref></type>
          <declname>NewMET</declname>
        </param>
        <briefdescription>
<para>Provides the Mission Elapsed Time from an external source. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Description</title><para>This routine provides a method to provide cFE TIME with MET acquired from an external source. There is a presumption that this function will be called at the appropriate time (relative to the tone) such that this call may be used by cFE TIME as the signal to generate the &quot;time at the tone&quot; data command. The &quot;time at the tone&quot; data command must arrive within the configuration parameter specified window for tone signal and data packet verification. <linebreak/>
 <linebreak/>
 The MET value at the tone &quot;should&quot; have zero subseconds. Although the interface accepts non-zero values for sub-seconds, it may be harmful to other applications that expect zero subseconds at the moment of the tone. Any decision to use non-zero subseconds should be carefully considered.</para></simplesect>
<simplesect kind="par"><title>Assumptions, External Events, and Notes:</title><para><itemizedlist>
<listitem><para>This routine is included in the API only when 3 specific configuration parameters are set to TRUE. The first is #CFE_TIME_CFG_SERVER which defines this instantiation of cFE TIME as a time server (not a client). The second required configuration parameter is #CFE_TIME_CFG_SOURCE which enables time source selection commands to the cFE TIME task, and further enables configuration definitions for the selected type of external time data. The third configuration parameter required for this routine is #CFE_TIME_CFG_SRC_MET, which indicates that the external time data consists of MET.</para></listitem></itemizedlist>
</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">NewMET</parametername>
</parameternamelist>
<parameterdescription>
<para>The MET value at the next (or previous) 1 Hz tone signal.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="cfe__time_8h_1a8cc4d14a6ba7409c62051367ad6eeb2d" kindref="member">CFE_TIME_ExternalTone</ref>, <ref refid="cfe__time_8h_1a50dde800616c087e70d782f24c031076" kindref="member">CFE_TIME_ExternalGPS</ref>, <ref refid="cfe__time_8h_1a4f25a38e9da41e473b30b2b07c9cb3da" kindref="member">CFE_TIME_ExternalTime</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/cfe_time.h" line="795" column="1"/>
      </memberdef>
      <memberdef kind="function" id="cfe__time_8h_1a50dde800616c087e70d782f24c031076" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CFE_TIME_ExternalGPS</definition>
        <argsstring>(CFE_TIME_SysTime_t NewTime, int16 NewLeaps)</argsstring>
        <name>CFE_TIME_ExternalGPS</name>
        <param>
          <type><ref refid="struct_c_f_e___t_i_m_e___sys_time__t" kindref="compound">CFE_TIME_SysTime_t</ref></type>
          <declname>NewTime</declname>
        </param>
        <param>
          <type><ref refid="common__types_8h_1adf957e9fa8c95c188ffacb8197aa8725" kindref="member">int16</ref></type>
          <declname>NewLeaps</declname>
        </param>
        <briefdescription>
<para>Provide the time from an external source that has data common to GPS receivers. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Description</title><para>This routine provides a method to provide cFE TIME with current time data acquired from an external source. There is a presumption that this function will be called at the appropriate time (relative to the tone) such that this call may be used by cFE TIME as the signal to generate the &quot;time at the tone&quot; data command. The &quot;time at the tone&quot; data command must arrive within the configuration parameter specified window for tone signal and data packet verification. <linebreak/>
 <linebreak/>
 Internally, cFE TIME will calculate a new STCF as the difference between this new time value and the spacecraft MET value at the tone. This allows cFE TIME to always calculate time as the sum of MET and STCF. The value of STCF will change only as much as the drift factor between spacecraft MET and the external time source.</para></simplesect>
<simplesect kind="par"><title>Assumptions, External Events, and Notes:</title><para><itemizedlist>
<listitem><para>This routine is included in the API only when 3 specific configuration parameters are set to TRUE. The first is #CFE_TIME_CFG_SERVER which defines this instantiation of cFE TIME as a time server (not a client). The second required configuration parameter is #CFE_TIME_CFG_SOURCE which enables time source selection commands to the cFE TIME task, and further enables configuration definitions for the selected type of external time data. The third configuration parameter required for this routine is #CFE_TIME_CFG_SRC_GPS, which indicates that the external time data consists of a time value relative to a known epoch, plus a leap seconds value.</para></listitem></itemizedlist>
</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">NewTime</parametername>
</parameternamelist>
<parameterdescription>
<para>The MET value at the next (or previous) 1 Hz tone signal.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">NewLeaps</parametername>
</parameternamelist>
<parameterdescription>
<para>The Leap Seconds value used to calculate time as UTC.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="cfe__time_8h_1a8cc4d14a6ba7409c62051367ad6eeb2d" kindref="member">CFE_TIME_ExternalTone</ref>, <ref refid="cfe__time_8h_1a393a242255790e6983c6a34583540f8e" kindref="member">CFE_TIME_ExternalMET</ref>, <ref refid="cfe__time_8h_1a4f25a38e9da41e473b30b2b07c9cb3da" kindref="member">CFE_TIME_ExternalTime</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/cfe_time.h" line="834" column="1"/>
      </memberdef>
      <memberdef kind="function" id="cfe__time_8h_1a4f25a38e9da41e473b30b2b07c9cb3da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CFE_TIME_ExternalTime</definition>
        <argsstring>(CFE_TIME_SysTime_t NewTime)</argsstring>
        <name>CFE_TIME_ExternalTime</name>
        <param>
          <type><ref refid="struct_c_f_e___t_i_m_e___sys_time__t" kindref="compound">CFE_TIME_SysTime_t</ref></type>
          <declname>NewTime</declname>
        </param>
        <briefdescription>
<para>Provide the time from an external source that measures time relative to a known epoch. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Description</title><para>This routine provides a method to provide cFE TIME with current time data acquired from an external source. There is a presumption that this function will be called at the appropriate time (relative to the tone) such that this call may be used by cFE TIME as the signal to generate the &quot;time at the tone&quot; data command. The &quot;time at the tone&quot; data command must arrive within the configuration specified window for tone signal and data packet verification. <linebreak/>
 <linebreak/>
 Internally, cFE TIME will calculate a new STCF as the difference between this new time value and the spacecraft MET value at the tone. This allows cFE TIME to always calculate time as the sum of MET and STCF. The value of STCF will change only as much as the drift factor between spacecraft MET and the external time source.</para></simplesect>
<simplesect kind="par"><title>Assumptions, External Events, and Notes:</title><para><itemizedlist>
<listitem><para>This routine is included in the API only when 3 specific configuration parameters are set to TRUE. The first is #CFE_TIME_CFG_SERVER which defines this instanciation of cFE TIME as a time server (not a client). The second required configuration parameter is #CFE_TIME_CFG_SOURCE which enables time source selection commands to the cFE TIME task, and further enables configuration definitions for the selected type of external time data. The third configuration parameter required for this routine is #CFE_TIME_CFG_SRC_TIME, which indicates that the external time data consists of a time value relative to a known epoch.</para></listitem></itemizedlist>
</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">NewTime</parametername>
</parameternamelist>
<parameterdescription>
<para>The MET value at the next (or previous) 1 Hz tone signal.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="cfe__time_8h_1a8cc4d14a6ba7409c62051367ad6eeb2d" kindref="member">CFE_TIME_ExternalTone</ref>, <ref refid="cfe__time_8h_1a393a242255790e6983c6a34583540f8e" kindref="member">CFE_TIME_ExternalMET</ref>, <ref refid="cfe__time_8h_1a50dde800616c087e70d782f24c031076" kindref="member">CFE_TIME_ExternalGPS</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/cfe_time.h" line="872" column="1"/>
      </memberdef>
      <memberdef kind="function" id="cfe__time_8h_1ae13a973062a2174417e4a30465a12146" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="common__types_8h_1a5eb512da689eec1a7472ab97e2ab6be3" kindref="member">int32</ref></type>
        <definition>int32 CFE_TIME_RegisterSynchCallback</definition>
        <argsstring>(CFE_TIME_SynchCallbackPtr_t CallbackFuncPtr)</argsstring>
        <name>CFE_TIME_RegisterSynchCallback</name>
        <param>
          <type><ref refid="cfe__time_8h_1a41a981b67b2962a20e985b96e39fc39e" kindref="member">CFE_TIME_SynchCallbackPtr_t</ref></type>
          <declname>CallbackFuncPtr</declname>
        </param>
        <briefdescription>
<para>Registers a callback function that is called whenever time synchronization occurs. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Description</title><para>This routine passes a callback function pointer for an Application that wishes to be notified whenever a legitimate time synchronization signal (typically a 1 Hz) is received.</para></simplesect>
<simplesect kind="par"><title>Assumptions, External Events, and Notes:</title><para>None</para></simplesect>
<simplesect kind="return"><para><table rows="3" cols="2"><row>
<entry thead="no"><para><ref refid="cfe__error_8h_1ab2b6b188c32c70b8ca0578b7a7bc091b" kindref="member">CFE_SUCCESS</ref> </para></entry><entry thead="no"><para>Operation was performed successfully  </para></entry></row>
<row>
<entry thead="no"><para><ref refid="cfe__error_8h_1aa47b2d3a700f4ca499cb71745a661bb9" kindref="member">CFE_TIME_TOO_MANY_SYNCH_CALLBACKS</ref> </para></entry><entry thead="no"><para>An attempt to register too many cFE Time Services Synchronization callbacks has been made. Adjust the #CFE_TIME_MAX_NUM_SYNCH_FUNCS configuration parameter, recompile and try again.  </para></entry></row>
<row>
<entry thead="no"><para><ref refid="cfe__error_8h_1a20d9f25d56c85be712a7e10c1d9efb85" kindref="member">CFE_ES_ERR_APPID</ref> </para></entry><entry thead="no"><para>The given application ID does not reflect a currently active application.  </para></entry></row>
</table>
</para></simplesect>
<simplesect kind="see"><para><ref refid="cfe__time_8h_1ad858c0f4363c7e3e44692dd522483026" kindref="member">CFE_TIME_UnregisterSynchCallback</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/cfe_time.h" line="895" column="1"/>
      </memberdef>
      <memberdef kind="function" id="cfe__time_8h_1ad858c0f4363c7e3e44692dd522483026" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="common__types_8h_1a5eb512da689eec1a7472ab97e2ab6be3" kindref="member">int32</ref></type>
        <definition>int32 CFE_TIME_UnregisterSynchCallback</definition>
        <argsstring>(CFE_TIME_SynchCallbackPtr_t CallbackFuncPtr)</argsstring>
        <name>CFE_TIME_UnregisterSynchCallback</name>
        <param>
          <type><ref refid="cfe__time_8h_1a41a981b67b2962a20e985b96e39fc39e" kindref="member">CFE_TIME_SynchCallbackPtr_t</ref></type>
          <declname>CallbackFuncPtr</declname>
        </param>
        <briefdescription>
<para>Unregisters a callback function that is called whenever time synchronization occurs. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Description</title><para>This routine removes the specified callback function pointer from the list of Callback functions that are called whenever a time synchronization (typically the 1Hz signal) is received.</para></simplesect>
<simplesect kind="par"><title>Assumptions, External Events, and Notes:</title><para>None</para></simplesect>
<simplesect kind="return"><para><table rows="3" cols="2"><row>
<entry thead="no"><para><ref refid="cfe__error_8h_1ab2b6b188c32c70b8ca0578b7a7bc091b" kindref="member">CFE_SUCCESS</ref> </para></entry><entry thead="no"><para>Operation was performed successfully  </para></entry></row>
<row>
<entry thead="no"><para><ref refid="cfe__error_8h_1a9f33e4be44f5bcac9f56907edb8bffab" kindref="member">CFE_TIME_CALLBACK_NOT_REGISTERED</ref> </para></entry><entry thead="no"><para>An attempt to unregister a cFE Time Services Synchronization callback has failed because the specified callback function was not located in the Synchronization Callback Registry.  </para></entry></row>
<row>
<entry thead="no"><para><ref refid="cfe__error_8h_1a20d9f25d56c85be712a7e10c1d9efb85" kindref="member">CFE_ES_ERR_APPID</ref> </para></entry><entry thead="no"><para>The given application ID does not reflect a currently active application.  </para></entry></row>
</table>
</para></simplesect>
<simplesect kind="see"><para><ref refid="cfe__time_8h_1ae13a973062a2174417e4a30465a12146" kindref="member">CFE_TIME_RegisterSynchCallback</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/cfe_time.h" line="919" column="1"/>
      </memberdef>
      <memberdef kind="function" id="cfe__time_8h_1a1f6506551e709bd6b8388990e1856c90" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CFE_TIME_Local1HzISR</definition>
        <argsstring>(void)</argsstring>
        <name>CFE_TIME_Local1HzISR</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>This function should be called from the system PSP layer once per second. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Description</title><para>Drives the time processing logic from the system PSP layer. This must be called once per second based on a hardware interrupt or OS kernel signal.</para></simplesect>
<simplesect kind="par"><title>Assumptions, External Events, and Notes:</title><para>This will update the global data structures accordingly, incrementing each by the 1Hz amount. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/cfe_time.h" line="936" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment">**<sp/>$Id:<sp/>cfe_time.h<sp/>1.6<sp/>2014/08/17<sp/>17:23:30GMT-05:00<sp/>sstrege<sp/>Exp<sp/><sp/>$</highlight></codeline>
<codeline lineno="3"><highlight class="comment">**</highlight></codeline>
<codeline lineno="4"><highlight class="comment">**<sp/>Purpose:<sp/><sp/>cFE<sp/>Time<sp/>Services<sp/>(TIME)<sp/>library<sp/>API<sp/>header<sp/>file</highlight></codeline>
<codeline lineno="5"><highlight class="comment">**</highlight></codeline>
<codeline lineno="6"><highlight class="comment">**<sp/>Author:<sp/><sp/><sp/>S.Walling/Microtel</highlight></codeline>
<codeline lineno="7"><highlight class="comment">**</highlight></codeline>
<codeline lineno="8"><highlight class="comment">**<sp/>Notes:</highlight></codeline>
<codeline lineno="9"><highlight class="comment">**</highlight></codeline>
<codeline lineno="10"><highlight class="comment">**<sp/>$Log:<sp/>cfe_time.h<sp/><sp/>$</highlight></codeline>
<codeline lineno="11"><highlight class="comment">**<sp/>Revision<sp/>1.6<sp/>2014/08/17<sp/>17:23:30GMT-05:00<sp/>sstrege<sp/></highlight></codeline>
<codeline lineno="12"><highlight class="comment">**<sp/>Fixed<sp/>doxygen<sp/>compiler<sp/>warnings.</highlight></codeline>
<codeline lineno="13"><highlight class="comment">**<sp/>Revision<sp/>1.5<sp/>2011/11/30<sp/>15:10:46EST<sp/>jmdagost<sp/></highlight></codeline>
<codeline lineno="14"><highlight class="comment">**<sp/>Replaced<sp/>ifdef/ifndef<sp/>preprocessor<sp/>tests<sp/>with<sp/>if...==TRUE/if...!=TRUE<sp/>tests</highlight></codeline>
<codeline lineno="15"><highlight class="comment">**<sp/>Revision<sp/>1.4<sp/>2008/12/08<sp/>12:07:21EST<sp/>dkobe<sp/></highlight></codeline>
<codeline lineno="16"><highlight class="comment">**<sp/>Updates<sp/>to<sp/>correct<sp/>doxygen<sp/>errors</highlight></codeline>
<codeline lineno="17"><highlight class="comment">**<sp/>Revision<sp/>1.3<sp/>2008/08/07<sp/>09:17:43EDT<sp/>dkobe<sp/></highlight></codeline>
<codeline lineno="18"><highlight class="comment">**<sp/>Doxygen<sp/>comments<sp/>corrected<sp/>for<sp/>CFE_TIME_RegisterSynchCallback<sp/></highlight></codeline>
<codeline lineno="19"><highlight class="comment">**<sp/>and<sp/>CFE_TIME_UnregisterSynchCallback</highlight></codeline>
<codeline lineno="20"><highlight class="comment">**<sp/>Revision<sp/>1.2<sp/>2008/08/06<sp/>22:42:28EDT<sp/>dkobe<sp/></highlight></codeline>
<codeline lineno="21"><highlight class="comment">**<sp/>Added<sp/>CFE_TIME_RegisterSynchCallback,<sp/>CFE_TIME_UnregisterSynchCallback<sp/>and<sp/>CFE_TIME_CleanUpApp</highlight></codeline>
<codeline lineno="22"><highlight class="comment">**<sp/>Revision<sp/>1.1<sp/>2008/04/17<sp/>08:05:25EDT<sp/>ruperera<sp/></highlight></codeline>
<codeline lineno="23"><highlight class="comment">**<sp/>Initial<sp/>revision</highlight></codeline>
<codeline lineno="24"><highlight class="comment">**<sp/>Member<sp/>added<sp/>to<sp/>project<sp/>c:/MKSDATA/MKS-REPOSITORY/MKS-CFE-PROJECT/fsw/cfe-core/src/inc/project.pj</highlight></codeline>
<codeline lineno="25"><highlight class="comment">**<sp/>Revision<sp/>1.9<sp/>2007/05/23<sp/>11:22:00EDT<sp/>David<sp/>Kobe<sp/>(dlkobe)<sp/></highlight></codeline>
<codeline lineno="26"><highlight class="comment">**<sp/>Added<sp/>doxygen<sp/>formatting</highlight></codeline>
<codeline lineno="27"><highlight class="comment">**<sp/>Revision<sp/>1.8<sp/>2007/03/07<sp/>12:03:35EST<sp/>njyanchik<sp/></highlight></codeline>
<codeline lineno="28"><highlight class="comment">**<sp/>There<sp/>were<sp/>errors<sp/>in<sp/>the<sp/>previous<sp/>change<sp/>package,<sp/>so<sp/>I<sp/>fixed<sp/>them</highlight></codeline>
<codeline lineno="29"><highlight class="comment">**<sp/>Revision<sp/>1.7<sp/>2007/03/07<sp/>10:43:45EST<sp/>njyanchik<sp/></highlight></codeline>
<codeline lineno="30"><highlight class="comment">**<sp/>I<sp/>made<sp/>a<sp/>new<sp/>API<sp/>called<sp/>CFE_TIME_GetClockInfo<sp/>that<sp/>is<sp/>functionally<sp/>equivilant<sp/>to<sp/>CFE_TIME_GetStateFlags.<sp/>The<sp/>reason<sp/>I<sp/>made<sp/>a<sp/>new<sp/>function<sp/>is<sp/>because<sp/>this<sp/>function</highlight></codeline>
<codeline lineno="31"><highlight class="comment">**<sp/>will<sp/>get<sp/>changed<sp/>in<sp/>a<sp/>future<sp/>DCR<sp/>(3191).</highlight></codeline>
<codeline lineno="32"><highlight class="comment">**<sp/>Revision<sp/>1.5<sp/>2006/11/21<sp/>15:58:50EST<sp/>rjmcgraw<sp/></highlight></codeline>
<codeline lineno="33"><highlight class="comment">**<sp/>Added<sp/>#define<sp/>CFE_TIME_PRINTED_STRING_SIZE<sp/>24</highlight></codeline>
<codeline lineno="34"><highlight class="comment">**<sp/>Revision<sp/>1.4<sp/>2006/11/09<sp/>15:25:04EST<sp/>wfmoleski<sp/></highlight></codeline>
<codeline lineno="35"><highlight class="comment">**<sp/>Modified<sp/>the<sp/>function<sp/>prototypes<sp/>for<sp/>ExternalMET,<sp/>ExternalGPS<sp/>and<sp/>ExternalTime<sp/>from<sp/>int32<sp/>to<sp/>void.</highlight></codeline>
<codeline lineno="36"><highlight class="comment">**<sp/>Revision<sp/>1.3<sp/>2006/05/04<sp/>09:29:00EDT<sp/>njyanchik<sp/></highlight></codeline>
<codeline lineno="37"><highlight class="comment">**<sp/>Added<sp/>MET<sp/>to<sp/>default<sp/>spacecraft<sp/>time<sp/>conversion</highlight></codeline>
<codeline lineno="38"><highlight class="comment">**<sp/>API<sp/>is<sp/>CFE_TIME_SysTime_t<sp/>CFE_TIME_MET2SCTime<sp/>(CFE_TIME_SysTime_t<sp/>METTime)</highlight></codeline>
<codeline lineno="39"><highlight class="comment">**<sp/>Revision<sp/>1.2<sp/>2005/07/21<sp/>15:28:21EDT<sp/>lswalling<sp/></highlight></codeline>
<codeline lineno="40"><highlight class="comment">**<sp/>Add<sp/>Time<sp/>print<sp/>API<sp/>function</highlight></codeline>
<codeline lineno="41"><highlight class="comment">**<sp/>Revision<sp/>1.1<sp/>2005/06/09<sp/>10:57:51EDT<sp/>rperera<sp/></highlight></codeline>
<codeline lineno="42"><highlight class="comment">**<sp/>Initial<sp/>revision</highlight></codeline>
<codeline lineno="43"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="46"><highlight class="comment">**<sp/>Ensure<sp/>that<sp/>header<sp/>is<sp/>included<sp/>only<sp/>once...</highlight></codeline>
<codeline lineno="47"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>_cfe_time_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_cfe_time_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="57"><highlight class="comment">**<sp/>Required<sp/>header<sp/>files...</highlight></codeline>
<codeline lineno="58"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="common__types_8h" kindref="compound">common_types.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="63"><highlight class="comment">**<sp/>Defines</highlight></codeline>
<codeline lineno="64"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65" refid="cfe__time_8h_1af5d977124fb02b03b842af4cf188907b" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CFE_TIME_PRINTED_STRING_SIZE<sp/><sp/><sp/><sp/><sp/><sp/>24<sp/></highlight></codeline>
<codeline lineno="67"><highlight class="preprocessor"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="68"><highlight class="comment">**<sp/>Type<sp/>definition<sp/>(system<sp/>time)...</highlight></codeline>
<codeline lineno="69"><highlight class="comment">*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="81" refid="struct_c_f_e___t_i_m_e___sys_time__t" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal">{</highlight></codeline>
<codeline lineno="83" refid="struct_c_f_e___t_i_m_e___sys_time__t_1ac10c014228075ee87ea7938348a98c1c" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="common__types_8h_1a9560e25c315bae45d1ed4e2ce49ce55a" kindref="member">uint32</ref><sp/><sp/><ref refid="struct_c_f_e___t_i_m_e___sys_time__t_1ac10c014228075ee87ea7938348a98c1c" kindref="member">Seconds</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="84" refid="struct_c_f_e___t_i_m_e___sys_time__t_1a2af2ad470fa81d8eb5c23f68b54ab81a" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="common__types_8h_1a9560e25c315bae45d1ed4e2ce49ce55a" kindref="member">uint32</ref><sp/><sp/><ref refid="struct_c_f_e___t_i_m_e___sys_time__t_1a2af2ad470fa81d8eb5c23f68b54ab81a" kindref="member">Subseconds</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="85"><highlight class="normal">}<sp/><ref refid="struct_c_f_e___t_i_m_e___sys_time__t" kindref="compound">CFE_TIME_SysTime_t</ref>;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="88"><highlight class="comment">**<sp/>Type<sp/>definition<sp/>(clock<sp/>state)...</highlight></codeline>
<codeline lineno="89"><highlight class="comment">*/</highlight></codeline>
<codeline lineno="104" refid="cfe__time_8h_1a5bf8c5abfd59abee6d95c5eeafb1c79f" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="105"><highlight class="normal">{</highlight></codeline>
<codeline lineno="106" refid="cfe__time_8h_1a5bf8c5abfd59abee6d95c5eeafb1c79fa87b97b070dab56e5bbc88627042d3c0e" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="cfe__time_8h_1a5bf8c5abfd59abee6d95c5eeafb1c79fa87b97b070dab56e5bbc88627042d3c0e" kindref="member">CFE_TIME_INVALID</ref><sp/><sp/>=<sp/>-1,<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="110" refid="cfe__time_8h_1a5bf8c5abfd59abee6d95c5eeafb1c79fa75460b13bb03a3989fc930d7be6f6f07" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="cfe__time_8h_1a5bf8c5abfd59abee6d95c5eeafb1c79fa75460b13bb03a3989fc930d7be6f6f07" kindref="member">CFE_TIME_VALID</ref><sp/><sp/><sp/><sp/>=<sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="114" refid="cfe__time_8h_1a5bf8c5abfd59abee6d95c5eeafb1c79fa6aa24a0f37f5f9aefca926c667de0137" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="cfe__time_8h_1a5bf8c5abfd59abee6d95c5eeafb1c79fa6aa24a0f37f5f9aefca926c667de0137" kindref="member">CFE_TIME_FLYWHEEL</ref><sp/>=<sp/><sp/>1<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="119"><highlight class="normal">}<sp/><ref refid="cfe__time_8h_1a5bf8c5abfd59abee6d95c5eeafb1c79f" kindref="member">CFE_TIME_ClockState_t</ref>;</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="122"><highlight class="comment">**<sp/>Type<sp/>definition<sp/>(time<sp/>comparison<sp/>results)...</highlight></codeline>
<codeline lineno="123"><highlight class="comment">*/</highlight></codeline>
<codeline lineno="132" refid="cfe__time_8h_1a7db3d8878781fdce28aa67bcf981fd0f" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="133"><highlight class="normal">{</highlight></codeline>
<codeline lineno="134" refid="cfe__time_8h_1a7db3d8878781fdce28aa67bcf981fd0faaa95f3abeed2fc9e89057464b95f7038" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="cfe__time_8h_1a7db3d8878781fdce28aa67bcf981fd0faaa95f3abeed2fc9e89057464b95f7038" kindref="member">CFE_TIME_A_LT_B</ref><sp/><sp/>=<sp/>-1,<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="135" refid="cfe__time_8h_1a7db3d8878781fdce28aa67bcf981fd0fa5bfe2555e735df286570d2463bb46848" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="cfe__time_8h_1a7db3d8878781fdce28aa67bcf981fd0fa5bfe2555e735df286570d2463bb46848" kindref="member">CFE_TIME_EQUAL</ref><sp/><sp/><sp/>=<sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="136" refid="cfe__time_8h_1a7db3d8878781fdce28aa67bcf981fd0fabf10f1a2986fd27bd13c95d91aae66b3" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="cfe__time_8h_1a7db3d8878781fdce28aa67bcf981fd0fabf10f1a2986fd27bd13c95d91aae66b3" kindref="member">CFE_TIME_A_GT_B</ref><sp/><sp/>=<sp/><sp/>1<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="137"><highlight class="normal">}<sp/><ref refid="cfe__time_8h_1a7db3d8878781fdce28aa67bcf981fd0f" kindref="member">CFE_TIME_Compare_t</ref>;</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="140"><highlight class="comment">**<sp/>Type<sp/>definition<sp/>(time<sp/>portion<sp/>the<sp/>ES<sp/>Reset<sp/>data<sp/>structure)</highlight></codeline>
<codeline lineno="141"><highlight class="comment">*/</highlight></codeline>
<codeline lineno="150" refid="struct_c_f_e___t_i_m_e___reset_vars__t" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal">{</highlight></codeline>
<codeline lineno="152" refid="struct_c_f_e___t_i_m_e___reset_vars__t_1ab55b8169ed59a1dff24fbd95bfdea085" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="common__types_8h_1a9560e25c315bae45d1ed4e2ce49ce55a" kindref="member">uint32</ref><sp/><ref refid="struct_c_f_e___t_i_m_e___reset_vars__t_1ab55b8169ed59a1dff24fbd95bfdea085" kindref="member">Signature</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="153" refid="struct_c_f_e___t_i_m_e___reset_vars__t_1aac4abcfd0f54ec95e1ebbf4127671575" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="common__types_8h_1adf957e9fa8c95c188ffacb8197aa8725" kindref="member">int16</ref><sp/><sp/><ref refid="struct_c_f_e___t_i_m_e___reset_vars__t_1aac4abcfd0f54ec95e1ebbf4127671575" kindref="member">LeapSeconds</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="154" refid="struct_c_f_e___t_i_m_e___reset_vars__t_1a388f2fe2bda8787b02176a386ce83ea7" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="common__types_8h_1a2e00abb078d312d1d8c4fbcd6be343d8" kindref="member">uint16</ref><sp/><ref refid="struct_c_f_e___t_i_m_e___reset_vars__t_1a388f2fe2bda8787b02176a386ce83ea7" kindref="member">ClockSignal</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="155" refid="struct_c_f_e___t_i_m_e___reset_vars__t_1abfb413016b39c1960931a7123d740136" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="struct_c_f_e___t_i_m_e___sys_time__t" kindref="compound">CFE_TIME_SysTime_t</ref><sp/><ref refid="struct_c_f_e___t_i_m_e___reset_vars__t_1abfb413016b39c1960931a7123d740136" kindref="member">CurrentMET</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="156" refid="struct_c_f_e___t_i_m_e___reset_vars__t_1aa824ac6d568acc1f15f1e88e6dbcc2ca" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="struct_c_f_e___t_i_m_e___sys_time__t" kindref="compound">CFE_TIME_SysTime_t</ref><sp/><ref refid="struct_c_f_e___t_i_m_e___reset_vars__t_1aa824ac6d568acc1f15f1e88e6dbcc2ca" kindref="member">CurrentSTCF</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="157" refid="struct_c_f_e___t_i_m_e___reset_vars__t_1aaac645da8ceadf27d2dcdebe48d5755f" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="struct_c_f_e___t_i_m_e___sys_time__t" kindref="compound">CFE_TIME_SysTime_t</ref><sp/><ref refid="struct_c_f_e___t_i_m_e___reset_vars__t_1aaac645da8ceadf27d2dcdebe48d5755f" kindref="member">CurrentDelay</ref>;<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="159"><highlight class="normal">}<sp/><ref refid="struct_c_f_e___t_i_m_e___reset_vars__t" kindref="compound">CFE_TIME_ResetVars_t</ref>;</highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="169" refid="cfe__time_8h_1a41a981b67b2962a20e985b96e39fc39e" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="common__types_8h_1a5eb512da689eec1a7472ab97e2ab6be3" kindref="member">int32</ref><sp/>(*<ref refid="cfe__time_8h_1a41a981b67b2962a20e985b96e39fc39e" kindref="member">CFE_TIME_SynchCallbackPtr_t</ref>)(void);</highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="172"><highlight class="comment">**<sp/>Function<sp/>prototypes<sp/>(get<sp/>time)...</highlight></codeline>
<codeline lineno="173"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight><highlight class="comment">/*****************************************************************************/</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><ref refid="struct_c_f_e___t_i_m_e___sys_time__t" kindref="compound">CFE_TIME_SysTime_t</ref><sp/><sp/><ref refid="cfe__time_8h_1abf540f01ef8e0b2c7f2ec755148b6ac6" kindref="member">CFE_TIME_GetTime</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>returns<sp/>default<sp/>time<sp/>(see<sp/>default<sp/>time<sp/>selection<sp/>above)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight><highlight class="comment">/*****************************************************************************/</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><ref refid="struct_c_f_e___t_i_m_e___sys_time__t" kindref="compound">CFE_TIME_SysTime_t</ref><sp/><sp/><ref refid="cfe__time_8h_1aad660f7e6d8b9f8fe502178f210b90c1" kindref="member">CFE_TIME_GetTAI</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>returns<sp/>time<sp/>computed<sp/>as<sp/>TAI<sp/>(MET<sp/>+<sp/>STCF)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight><highlight class="comment">/*****************************************************************************/</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><ref refid="struct_c_f_e___t_i_m_e___sys_time__t" kindref="compound">CFE_TIME_SysTime_t</ref><sp/><sp/><ref refid="cfe__time_8h_1a8b05d5ce1362fe3f5d7978b810eb2f76" kindref="member">CFE_TIME_GetUTC</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>returns<sp/>time<sp/>computed<sp/>as<sp/>UTC<sp/>(MET<sp/>+<sp/>STCF<sp/>-<sp/>Leap<sp/>Seconds)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight><highlight class="comment">/*****************************************************************************/</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><ref refid="struct_c_f_e___t_i_m_e___sys_time__t" kindref="compound">CFE_TIME_SysTime_t</ref><sp/><ref refid="cfe__time_8h_1a67937a937d85d8c0f839fd12badc3315" kindref="member">CFE_TIME_MET2SCTime</ref><sp/>(<ref refid="struct_c_f_e___t_i_m_e___sys_time__t" kindref="compound">CFE_TIME_SysTime_t</ref><sp/>METTime);<sp/></highlight><highlight class="comment">/*<sp/>returns<sp/>given<sp/>MET<sp/>time<sp/>as<sp/>the<sp/>default<sp/>spacecraft<sp/>time<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="286"><highlight class="comment">**<sp/>Function<sp/>prototypes<sp/>(get<sp/>parts<sp/>of<sp/>time)...</highlight></codeline>
<codeline lineno="287"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight><highlight class="comment">/*****************************************************************************/</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><ref refid="struct_c_f_e___t_i_m_e___sys_time__t" kindref="compound">CFE_TIME_SysTime_t</ref><sp/><sp/><ref refid="cfe__time_8h_1adc71d23dcdef62c628f48a58d5c822d1" kindref="member">CFE_TIME_GetSTCF</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>returns<sp/>STCF<sp/>(does<sp/>not<sp/>include<sp/>leap<sp/>seconds<sp/>calculation)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight><highlight class="comment">/*****************************************************************************/</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><ref refid="struct_c_f_e___t_i_m_e___sys_time__t" kindref="compound">CFE_TIME_SysTime_t</ref><sp/><sp/><ref refid="cfe__time_8h_1ad27faa0574e0d4dbec7269be1233da1e" kindref="member">CFE_TIME_GetMET</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>returns<sp/>MET<sp/>(both<sp/>seconds<sp/>and<sp/>sub-seconds)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight><highlight class="comment">/*****************************************************************************/</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><ref refid="common__types_8h_1a9560e25c315bae45d1ed4e2ce49ce55a" kindref="member">uint32</ref><sp/><sp/><ref refid="cfe__time_8h_1a30bd5373cc66b2b67e1ce5eb45333122" kindref="member">CFE_TIME_GetMETseconds</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>returns<sp/>MET<sp/>&quot;seconds&quot;<sp/>portion<sp/>of<sp/>current<sp/>time<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight><highlight class="comment">/*****************************************************************************/</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><ref refid="common__types_8h_1a9560e25c315bae45d1ed4e2ce49ce55a" kindref="member">uint32</ref><sp/><sp/><ref refid="cfe__time_8h_1a00c542243c0845b0773d51fe4ba83393" kindref="member">CFE_TIME_GetMETsubsecs</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>returns<sp/>MET<sp/>&quot;sub-seconds&quot;<sp/>portion<sp/>of<sp/>current<sp/>time<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight><highlight class="comment">/*****************************************************************************/</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><ref refid="common__types_8h_1adf957e9fa8c95c188ffacb8197aa8725" kindref="member">int16</ref><sp/><sp/><sp/><ref refid="cfe__time_8h_1afbac2684eb7401dbc9c600139804f58d" kindref="member">CFE_TIME_GetLeapSeconds</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>returns<sp/>Leap<sp/>Seconds<sp/>portion<sp/>of<sp/>current<sp/>time<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="410"><highlight class="comment">**<sp/>Function<sp/>prototypes<sp/>(get<sp/>time<sp/>status)...</highlight></codeline>
<codeline lineno="411"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal"></highlight><highlight class="comment">/*****************************************************************************/</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><ref refid="cfe__time_8h_1a5bf8c5abfd59abee6d95c5eeafb1c79f" kindref="member">CFE_TIME_ClockState_t</ref><sp/><sp/><ref refid="cfe__time_8h_1af8131cc659f1e3c4e589f3f4b1935542" kindref="member">CFE_TIME_GetClockState</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>returns<sp/>current<sp/>spacecraft<sp/>clock<sp/>state<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"></highlight><highlight class="comment">/*****************************************************************************/</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><ref refid="common__types_8h_1a2e00abb078d312d1d8c4fbcd6be343d8" kindref="member">uint16</ref><sp/><ref refid="cfe__time_8h_1a9610a9cb24718d159d44a87029957d87" kindref="member">CFE_TIME_GetClockInfo</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);<sp/></highlight><highlight class="comment">/*<sp/>returns<sp/>clock<sp/>information<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="468"><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="normal"></highlight></codeline>
<codeline lineno="470"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="471"><highlight class="comment">**<sp/>Function<sp/>prototypes<sp/>(add/subtract/compare<sp/>time)...</highlight></codeline>
<codeline lineno="472"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="473"><highlight class="normal"></highlight></codeline>
<codeline lineno="474"><highlight class="normal"></highlight><highlight class="comment">/*****************************************************************************/</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><ref refid="struct_c_f_e___t_i_m_e___sys_time__t" kindref="compound">CFE_TIME_SysTime_t</ref><sp/><sp/><ref refid="cfe__time_8h_1a37506ce0f1156266a217b2f406440673" kindref="member">CFE_TIME_Add</ref>(<ref refid="struct_c_f_e___t_i_m_e___sys_time__t" kindref="compound">CFE_TIME_SysTime_t</ref><sp/>Time1,<sp/><ref refid="struct_c_f_e___t_i_m_e___sys_time__t" kindref="compound">CFE_TIME_SysTime_t</ref><sp/>Time2);<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>(Time1<sp/>+<sp/>Time2)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="501"><highlight class="normal"></highlight></codeline>
<codeline lineno="502"><highlight class="normal"></highlight><highlight class="comment">/*****************************************************************************/</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><ref refid="struct_c_f_e___t_i_m_e___sys_time__t" kindref="compound">CFE_TIME_SysTime_t</ref><sp/><sp/><ref refid="cfe__time_8h_1a50e8edf09dc85ff930021cfa69b445f6" kindref="member">CFE_TIME_Subtract</ref>(<ref refid="struct_c_f_e___t_i_m_e___sys_time__t" kindref="compound">CFE_TIME_SysTime_t</ref><sp/>Time1,<sp/><ref refid="struct_c_f_e___t_i_m_e___sys_time__t" kindref="compound">CFE_TIME_SysTime_t</ref><sp/>Time2);<sp/><sp/></highlight><highlight class="comment">/*<sp/>(Time1<sp/>-<sp/>Time2)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="532"><highlight class="normal"></highlight></codeline>
<codeline lineno="533"><highlight class="normal"></highlight><highlight class="comment">/*****************************************************************************/</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><ref refid="cfe__time_8h_1a7db3d8878781fdce28aa67bcf981fd0f" kindref="member">CFE_TIME_Compare_t</ref><sp/><sp/><ref refid="cfe__time_8h_1abd11fb8c23847440915308528c2e4470" kindref="member">CFE_TIME_Compare</ref>(<ref refid="struct_c_f_e___t_i_m_e___sys_time__t" kindref="compound">CFE_TIME_SysTime_t</ref><sp/>TimeA,<sp/><ref refid="struct_c_f_e___t_i_m_e___sys_time__t" kindref="compound">CFE_TIME_SysTime_t</ref><sp/>TimeB);<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>(TimeA<sp/>&lt;=&gt;<sp/>TimeB)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="571"><highlight class="normal"></highlight></codeline>
<codeline lineno="572"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="573"><highlight class="comment">**<sp/>Function<sp/>prototypes<sp/>(convert<sp/>sub-seconds)...</highlight></codeline>
<codeline lineno="574"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="575"><highlight class="normal"></highlight></codeline>
<codeline lineno="576"><highlight class="normal"></highlight><highlight class="comment">/*****************************************************************************/</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><ref refid="common__types_8h_1a9560e25c315bae45d1ed4e2ce49ce55a" kindref="member">uint32</ref><sp/><sp/><ref refid="cfe__time_8h_1a6262446f4ca15369dec1ca68c8c15f54" kindref="member">CFE_TIME_Sub2MicroSecs</ref>(<ref refid="common__types_8h_1a9560e25c315bae45d1ed4e2ce49ce55a" kindref="member">uint32</ref><sp/>SubSeconds);<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>convert<sp/>sub-seconds<sp/>(1/2^32)<sp/>to<sp/>micro-seconds<sp/>(1/1000000)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="598"><highlight class="normal"></highlight></codeline>
<codeline lineno="599"><highlight class="normal"></highlight><highlight class="comment">/*****************************************************************************/</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><ref refid="common__types_8h_1a9560e25c315bae45d1ed4e2ce49ce55a" kindref="member">uint32</ref><sp/><sp/><ref refid="cfe__time_8h_1adf4e24a86a37b1ff7fdcbf38aff3a481" kindref="member">CFE_TIME_Micro2SubSecs</ref>(<ref refid="common__types_8h_1a9560e25c315bae45d1ed4e2ce49ce55a" kindref="member">uint32</ref><sp/>MicroSeconds);<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>convert<sp/>micro-seconds<sp/>(1/1000000)<sp/>to<sp/>sub-seconds<sp/>(1/2^32)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="623"><highlight class="normal"></highlight></codeline>
<codeline lineno="624"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="625"><highlight class="comment">**<sp/>Function<sp/>prototypes<sp/>(convert<sp/>cFE<sp/>and<sp/>file<sp/>system<sp/>time<sp/>formats)...</highlight></codeline>
<codeline lineno="626"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="627"><highlight class="normal"></highlight></codeline>
<codeline lineno="628"><highlight class="normal"></highlight><highlight class="comment">/*****************************************************************************/</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><ref refid="common__types_8h_1a9560e25c315bae45d1ed4e2ce49ce55a" kindref="member">uint32</ref><sp/><ref refid="cfe__time_8h_1a8a93559be09b93af1821c22d6a02f7d6" kindref="member">CFE_TIME_CFE2FSSeconds</ref>(<ref refid="common__types_8h_1a9560e25c315bae45d1ed4e2ce49ce55a" kindref="member">uint32</ref><sp/>SecondsCFE);</highlight></codeline>
<codeline lineno="655"><highlight class="normal"></highlight></codeline>
<codeline lineno="656"><highlight class="normal"></highlight><highlight class="comment">/*****************************************************************************/</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><ref refid="common__types_8h_1a9560e25c315bae45d1ed4e2ce49ce55a" kindref="member">uint32</ref><sp/><ref refid="cfe__time_8h_1a0f8b1968e967bd7596b0e5dd353dc35d" kindref="member">CFE_TIME_FS2CFESeconds</ref>(<ref refid="common__types_8h_1a9560e25c315bae45d1ed4e2ce49ce55a" kindref="member">uint32</ref><sp/>SecondsFS);</highlight></codeline>
<codeline lineno="683"><highlight class="normal"></highlight></codeline>
<codeline lineno="684"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="685"><highlight class="comment">**<sp/>Function<sp/>prototypes<sp/>(convert<sp/>time<sp/>to<sp/>string)...</highlight></codeline>
<codeline lineno="686"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="687"><highlight class="normal"></highlight></codeline>
<codeline lineno="688"><highlight class="normal"></highlight><highlight class="comment">/*****************************************************************************/</highlight></codeline>
<codeline lineno="718"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="cfe__time_8h_1a008e7b0c99cc1aac24a73b5cd032eee7" kindref="member">CFE_TIME_Print</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*PrintBuffer,<sp/><ref refid="struct_c_f_e___t_i_m_e___sys_time__t" kindref="compound">CFE_TIME_SysTime_t</ref><sp/>TimeToPrint);</highlight></codeline>
<codeline lineno="719"><highlight class="normal"></highlight></codeline>
<codeline lineno="720"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="721"><highlight class="comment">**<sp/>Function<sp/>prototypes<sp/>(1hz<sp/>tone<sp/>signal<sp/>processor)...</highlight></codeline>
<codeline lineno="722"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="723"><highlight class="normal"></highlight></codeline>
<codeline lineno="724"><highlight class="normal"></highlight><highlight class="comment">/*****************************************************************************/</highlight></codeline>
<codeline lineno="743"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><ref refid="cfe__time_8h_1a8cc4d14a6ba7409c62051367ad6eeb2d" kindref="member">CFE_TIME_ExternalTone</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);<sp/></highlight><highlight class="comment">/*<sp/>OK<sp/>to<sp/>call<sp/>from<sp/>ISR<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="744"><highlight class="normal"></highlight></codeline>
<codeline lineno="745"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="746"><highlight class="comment">**<sp/>Function<sp/>prototypes<sp/>(external<sp/>time<sp/>source)...</highlight></codeline>
<codeline lineno="747"><highlight class="comment">**</highlight></codeline>
<codeline lineno="748"><highlight class="comment">**<sp/>If<sp/>a<sp/>Time<sp/>Server<sp/>has<sp/>been<sp/>configured<sp/>to<sp/>accept<sp/>external<sp/>time</highlight></codeline>
<codeline lineno="749"><highlight class="comment">**<sp/><sp/><sp/><sp/>data,<sp/>then<sp/>one<sp/>of<sp/>the<sp/>following<sp/>functions<sp/>will<sp/>be<sp/>enabled.</highlight></codeline>
<codeline lineno="750"><highlight class="comment">**</highlight></codeline>
<codeline lineno="751"><highlight class="comment">**<sp/>If<sp/>the<sp/>Time<sp/>Server<sp/>has<sp/>also<sp/>been<sp/>commanded<sp/>to<sp/>use<sp/>the<sp/>external</highlight></codeline>
<codeline lineno="752"><highlight class="comment">**<sp/><sp/><sp/><sp/>time<sp/>data<sp/>(as<sp/>opposed<sp/>to<sp/>getting<sp/>time<sp/>data<sp/>from<sp/>a<sp/>local<sp/>MET)</highlight></codeline>
<codeline lineno="753"><highlight class="comment">**<sp/><sp/><sp/><sp/>then<sp/>the<sp/>Time<sp/>Server<sp/>will<sp/>use<sp/>the<sp/>external<sp/>data<sp/>in<sp/>computing</highlight></codeline>
<codeline lineno="754"><highlight class="comment">**<sp/><sp/><sp/><sp/>time.</highlight></codeline>
<codeline lineno="755"><highlight class="comment">**</highlight></codeline>
<codeline lineno="756"><highlight class="comment">**<sp/>However,<sp/>regardless<sp/>whether<sp/>the<sp/>external<sp/>time<sp/>data<sp/>is<sp/>accepted</highlight></codeline>
<codeline lineno="757"><highlight class="comment">**<sp/><sp/><sp/><sp/>by<sp/>the<sp/>Time<sp/>Server,<sp/>these<sp/>functions<sp/>also<sp/>act<sp/>as<sp/>the<sp/>signal<sp/>to</highlight></codeline>
<codeline lineno="758"><highlight class="comment">**<sp/><sp/><sp/><sp/>create<sp/>and<sp/>distribute<sp/>the<sp/>&quot;time<sp/>at<sp/>the<sp/>tone&quot;<sp/>command<sp/>packet.</highlight></codeline>
<codeline lineno="759"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="760"><highlight class="normal"></highlight></codeline>
<codeline lineno="761"><highlight class="normal"></highlight></codeline>
<codeline lineno="762"><highlight class="normal"></highlight><highlight class="comment">/*****************************************************************************/</highlight></codeline>
<codeline lineno="795"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="cfe__time_8h_1a393a242255790e6983c6a34583540f8e" kindref="member">CFE_TIME_ExternalMET</ref>(<ref refid="struct_c_f_e___t_i_m_e___sys_time__t" kindref="compound">CFE_TIME_SysTime_t</ref><sp/>NewMET);</highlight></codeline>
<codeline lineno="796"><highlight class="normal"></highlight></codeline>
<codeline lineno="797"><highlight class="normal"></highlight></codeline>
<codeline lineno="798"><highlight class="normal"></highlight><highlight class="comment">/*****************************************************************************/</highlight></codeline>
<codeline lineno="834"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="cfe__time_8h_1a50dde800616c087e70d782f24c031076" kindref="member">CFE_TIME_ExternalGPS</ref>(<ref refid="struct_c_f_e___t_i_m_e___sys_time__t" kindref="compound">CFE_TIME_SysTime_t</ref><sp/>NewTime,<sp/><ref refid="common__types_8h_1adf957e9fa8c95c188ffacb8197aa8725" kindref="member">int16</ref><sp/>NewLeaps);</highlight></codeline>
<codeline lineno="835"><highlight class="normal"></highlight></codeline>
<codeline lineno="836"><highlight class="normal"></highlight></codeline>
<codeline lineno="837"><highlight class="normal"></highlight></codeline>
<codeline lineno="838"><highlight class="normal"></highlight><highlight class="comment">/*****************************************************************************/</highlight></codeline>
<codeline lineno="872"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="cfe__time_8h_1a4f25a38e9da41e473b30b2b07c9cb3da" kindref="member">CFE_TIME_ExternalTime</ref>(<ref refid="struct_c_f_e___t_i_m_e___sys_time__t" kindref="compound">CFE_TIME_SysTime_t</ref><sp/>NewTime);</highlight></codeline>
<codeline lineno="873"><highlight class="normal"></highlight></codeline>
<codeline lineno="874"><highlight class="normal"></highlight><highlight class="comment">/*****************************************************************************/</highlight></codeline>
<codeline lineno="895"><highlight class="normal"><ref refid="common__types_8h_1a5eb512da689eec1a7472ab97e2ab6be3" kindref="member">int32</ref><sp/><sp/><ref refid="cfe__time_8h_1ae13a973062a2174417e4a30465a12146" kindref="member">CFE_TIME_RegisterSynchCallback</ref>(<ref refid="cfe__time_8h_1a41a981b67b2962a20e985b96e39fc39e" kindref="member">CFE_TIME_SynchCallbackPtr_t</ref><sp/>CallbackFuncPtr);<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="896"><highlight class="normal"></highlight></codeline>
<codeline lineno="897"><highlight class="normal"></highlight></codeline>
<codeline lineno="898"><highlight class="normal"></highlight><highlight class="comment">/*****************************************************************************/</highlight></codeline>
<codeline lineno="919"><highlight class="normal"><ref refid="common__types_8h_1a5eb512da689eec1a7472ab97e2ab6be3" kindref="member">int32</ref><sp/><sp/><ref refid="cfe__time_8h_1ad858c0f4363c7e3e44692dd522483026" kindref="member">CFE_TIME_UnregisterSynchCallback</ref>(<ref refid="cfe__time_8h_1a41a981b67b2962a20e985b96e39fc39e" kindref="member">CFE_TIME_SynchCallbackPtr_t</ref><sp/>CallbackFuncPtr);<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="920"><highlight class="normal"></highlight></codeline>
<codeline lineno="921"><highlight class="normal"></highlight></codeline>
<codeline lineno="922"><highlight class="normal"></highlight><highlight class="comment">/*****************************************************************************/</highlight></codeline>
<codeline lineno="936"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="cfe__time_8h_1a1f6506551e709bd6b8388990e1856c90" kindref="member">CFE_TIME_Local1HzISR</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="937"><highlight class="normal"></highlight></codeline>
<codeline lineno="938"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="939"><highlight class="normal">}</highlight></codeline>
<codeline lineno="940"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="941"><highlight class="normal"></highlight></codeline>
<codeline lineno="942"><highlight class="normal"></highlight></codeline>
<codeline lineno="943"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>_cfe_time_<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="944"><highlight class="normal"></highlight></codeline>
<codeline lineno="945"><highlight class="normal"></highlight><highlight class="comment">/************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="946"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/>End<sp/>of<sp/>File<sp/>Comment<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="947"><highlight class="normal"></highlight><highlight class="comment">/************************/</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="inc/cfe_time.h"/>
  </compounddef>
</doxygen>
