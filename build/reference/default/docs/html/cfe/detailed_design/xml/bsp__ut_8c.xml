<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="bsp__ut_8c" kind="file" language="C++">
    <compoundname>bsp_ut.c</compoundname>
    <includes local="no">stdio.h</includes>
    <includes local="no">stdlib.h</includes>
    <includes local="no">unistd.h</includes>
    <includes local="no">fcntl.h</includes>
    <includes local="no">sys/types.h</includes>
    <includes local="no">sys/stat.h</includes>
    <includes local="yes">utbsp.h</includes>
    <includes local="yes">uttest.h</includes>
    <incdepgraph>
      <node id="9637">
        <label>sys/stat.h</label>
      </node>
      <node id="9638">
        <label>utbsp.h</label>
      </node>
      <node id="9639">
        <label>uttest.h</label>
      </node>
      <node id="9633">
        <label>stdlib.h</label>
      </node>
      <node id="9631">
        <label>/home/vagrant/airliner/core/psp/fsw/pc-linux-wh/unit_test/bsp_ut.c</label>
        <link refid="bsp_ut.c"/>
        <childnode refid="9632" relation="include">
        </childnode>
        <childnode refid="9633" relation="include">
        </childnode>
        <childnode refid="9634" relation="include">
        </childnode>
        <childnode refid="9635" relation="include">
        </childnode>
        <childnode refid="9636" relation="include">
        </childnode>
        <childnode refid="9637" relation="include">
        </childnode>
        <childnode refid="9638" relation="include">
        </childnode>
        <childnode refid="9639" relation="include">
        </childnode>
      </node>
      <node id="9635">
        <label>fcntl.h</label>
      </node>
      <node id="9636">
        <label>sys/types.h</label>
      </node>
      <node id="9634">
        <label>unistd.h</label>
      </node>
      <node id="9632">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="var">
      <memberdef kind="variable" id="bsp__ut_8c_1ac01b7db4ed89912ddfc1dc72c740c5e4" prot="public" static="yes" mutable="no">
        <type><ref refid="common__types_8h_1a9560e25c315bae45d1ed4e2ce49ce55a" kindref="member">uint32</ref></type>
        <definition>uint32 CurrVerbosity</definition>
        <argsstring></argsstring>
        <name>CurrVerbosity</name>
        <initializer>= (2 &lt;&lt; UTASSERT_CASETYPE_PASS) - 1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vagrant/airliner/core/psp/fsw/pc-linux-wh/unit_test/bsp_ut.c" line="46" column="1" bodyfile="/home/vagrant/airliner/core/psp/fsw/pc-linux-wh/unit_test/bsp_ut.c" bodystart="46" bodyend="-1"/>
        <referencedby refid="bsp__ut_8c_1ae5adbd559a6e218185a48262ad6d0b5c" compoundref="bsp__ut_8c" startline="109" endline="166">UT_BSP_DoText</referencedby>
        <referencedby refid="bsp__ut_8c_1aecbc2967030a7171f12c4c694898ebcb" compoundref="bsp__ut_8c" startline="48" endline="78">UT_BSP_ParseCommandLine</referencedby>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="bsp__ut_8c_1a0d26ed3b5853183ab454d71eb02bb706" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void OS_Application_Startup</definition>
        <argsstring>(void)</argsstring>
        <name>OS_Application_Startup</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vagrant/airliner/core/psp/fsw/pc-linux-wh/unit_test/bsp_ut.c" line="40" column="1"/>
        <referencedby refid="bsp__ut_8c_1a0ddf1224851353fc92bfbff6f499fa97" compoundref="bsp__ut_8c" startline="272" endline="291">main</referencedby>
      </memberdef>
      <memberdef kind="function" id="bsp__ut_8c_1aecbc2967030a7171f12c4c694898ebcb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void UT_BSP_ParseCommandLine</definition>
        <argsstring>(int argc, char *argv[])</argsstring>
        <name>UT_BSP_ParseCommandLine</name>
        <param>
          <type>int</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>argv</declname>
          <array>[]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vagrant/airliner/core/psp/fsw/pc-linux-wh/unit_test/bsp_ut.c" line="48" column="1" bodyfile="/home/vagrant/airliner/core/psp/fsw/pc-linux-wh/unit_test/bsp_ut.c" bodystart="48" bodyend="78"/>
        <references refid="bsp__ut_8c_1ac01b7db4ed89912ddfc1dc72c740c5e4" compoundref="bsp__ut_8c" startline="46">CurrVerbosity</references>
        <referencedby refid="bsp__ut_8c_1a0ddf1224851353fc92bfbff6f499fa97" compoundref="bsp__ut_8c" startline="272" endline="291">main</referencedby>
      </memberdef>
      <memberdef kind="function" id="bsp__ut_8c_1ad09d38ba799add8908e48f1ecf4cb545" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void UT_BSP_Setup</definition>
        <argsstring>(const char *Name)</argsstring>
        <name>UT_BSP_Setup</name>
        <param>
          <type>const char *</type>
          <declname>Name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vagrant/airliner/core/psp/fsw/pc-linux-wh/unit_test/bsp_ut.c" line="80" column="1" bodyfile="/home/vagrant/airliner/core/psp/fsw/pc-linux-wh/unit_test/bsp_ut.c" bodystart="80" bodyend="99"/>
        <references refid="bsp__ut_8c_1ae5adbd559a6e218185a48262ad6d0b5c" compoundref="bsp__ut_8c" startline="109" endline="166">UT_BSP_DoText</references>
        <referencedby refid="bsp__ut_8c_1a0ddf1224851353fc92bfbff6f499fa97" compoundref="bsp__ut_8c" startline="272" endline="291">main</referencedby>
      </memberdef>
      <memberdef kind="function" id="bsp__ut_8c_1adc84a388163ed5772ef36223d1ff7007" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void UT_BSP_StartTestSegment</definition>
        <argsstring>(uint32 SegmentNumber, const char *SegmentName)</argsstring>
        <name>UT_BSP_StartTestSegment</name>
        <param>
          <type><ref refid="common__types_8h_1a9560e25c315bae45d1ed4e2ce49ce55a" kindref="member">uint32</ref></type>
          <declname>SegmentNumber</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>SegmentName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vagrant/airliner/core/psp/fsw/pc-linux-wh/unit_test/bsp_ut.c" line="101" column="1" bodyfile="/home/vagrant/airliner/core/psp/fsw/pc-linux-wh/unit_test/bsp_ut.c" bodystart="101" bodyend="107"/>
        <references refid="bsp__ut_8c_1ae5adbd559a6e218185a48262ad6d0b5c" compoundref="bsp__ut_8c" startline="109" endline="166">UT_BSP_DoText</references>
      </memberdef>
      <memberdef kind="function" id="bsp__ut_8c_1ae5adbd559a6e218185a48262ad6d0b5c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void UT_BSP_DoText</definition>
        <argsstring>(uint8 MessageType, const char *OutputMessage)</argsstring>
        <name>UT_BSP_DoText</name>
        <param>
          <type><ref refid="common__types_8h_1adde6aaee8457bee49c2a92621fe22b79" kindref="member">uint8</ref></type>
          <declname>MessageType</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>OutputMessage</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vagrant/airliner/core/psp/fsw/pc-linux-wh/unit_test/bsp_ut.c" line="109" column="1" bodyfile="/home/vagrant/airliner/core/psp/fsw/pc-linux-wh/unit_test/bsp_ut.c" bodystart="109" bodyend="166"/>
        <references refid="bsp__ut_8c_1ac01b7db4ed89912ddfc1dc72c740c5e4" compoundref="bsp__ut_8c" startline="46">CurrVerbosity</references>
        <referencedby refid="bsp__ut_8c_1a6a5c76d887b48e9016f317a44d34e3b9" compoundref="bsp__ut_8c" startline="168" endline="192">UT_BSP_DoReport</referencedby>
        <referencedby refid="bsp__ut_8c_1aee02b601d2d404eb6938d0e7749daace" compoundref="bsp__ut_8c" startline="194" endline="211">UT_BSP_DoTestSegmentReport</referencedby>
        <referencedby refid="bsp__ut_8c_1ad09d38ba799add8908e48f1ecf4cb545" compoundref="bsp__ut_8c" startline="80" endline="99">UT_BSP_Setup</referencedby>
        <referencedby refid="bsp__ut_8c_1adc84a388163ed5772ef36223d1ff7007" compoundref="bsp__ut_8c" startline="101" endline="107">UT_BSP_StartTestSegment</referencedby>
      </memberdef>
      <memberdef kind="function" id="bsp__ut_8c_1a6a5c76d887b48e9016f317a44d34e3b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void UT_BSP_DoReport</definition>
        <argsstring>(const char *File, uint32 LineNum, uint32 SegmentNum, uint32 TestSeq, uint8 MessageType, const char *SubsysName, const char *ShortDesc)</argsstring>
        <name>UT_BSP_DoReport</name>
        <param>
          <type>const char *</type>
          <declname>File</declname>
        </param>
        <param>
          <type><ref refid="common__types_8h_1a9560e25c315bae45d1ed4e2ce49ce55a" kindref="member">uint32</ref></type>
          <declname>LineNum</declname>
        </param>
        <param>
          <type><ref refid="common__types_8h_1a9560e25c315bae45d1ed4e2ce49ce55a" kindref="member">uint32</ref></type>
          <declname>SegmentNum</declname>
        </param>
        <param>
          <type><ref refid="common__types_8h_1a9560e25c315bae45d1ed4e2ce49ce55a" kindref="member">uint32</ref></type>
          <declname>TestSeq</declname>
        </param>
        <param>
          <type><ref refid="common__types_8h_1adde6aaee8457bee49c2a92621fe22b79" kindref="member">uint8</ref></type>
          <declname>MessageType</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>SubsysName</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>ShortDesc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vagrant/airliner/core/psp/fsw/pc-linux-wh/unit_test/bsp_ut.c" line="168" column="1" bodyfile="/home/vagrant/airliner/core/psp/fsw/pc-linux-wh/unit_test/bsp_ut.c" bodystart="168" bodyend="192"/>
        <references refid="bsp__ut_8c_1ae5adbd559a6e218185a48262ad6d0b5c" compoundref="bsp__ut_8c" startline="109" endline="166">UT_BSP_DoText</references>
      </memberdef>
      <memberdef kind="function" id="bsp__ut_8c_1aee02b601d2d404eb6938d0e7749daace" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void UT_BSP_DoTestSegmentReport</definition>
        <argsstring>(const char *SegmentName, const UtAssert_TestCounter_t *TestCounters)</argsstring>
        <name>UT_BSP_DoTestSegmentReport</name>
        <param>
          <type>const char *</type>
          <declname>SegmentName</declname>
        </param>
        <param>
          <type>const UtAssert_TestCounter_t *</type>
          <declname>TestCounters</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vagrant/airliner/core/psp/fsw/pc-linux-wh/unit_test/bsp_ut.c" line="194" column="1" bodyfile="/home/vagrant/airliner/core/psp/fsw/pc-linux-wh/unit_test/bsp_ut.c" bodystart="194" bodyend="211"/>
        <references refid="bsp__ut_8c_1ae5adbd559a6e218185a48262ad6d0b5c" compoundref="bsp__ut_8c" startline="109" endline="166">UT_BSP_DoText</references>
        <referencedby refid="bsp__ut_8c_1a4b34f3705b39191202c6f59518e5aaae" compoundref="bsp__ut_8c" startline="213" endline="257">UT_BSP_EndTest</referencedby>
      </memberdef>
      <memberdef kind="function" id="bsp__ut_8c_1a4b34f3705b39191202c6f59518e5aaae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void UT_BSP_EndTest</definition>
        <argsstring>(const UtAssert_TestCounter_t *TestCounters)</argsstring>
        <name>UT_BSP_EndTest</name>
        <param>
          <type>const UtAssert_TestCounter_t *</type>
          <declname>TestCounters</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vagrant/airliner/core/psp/fsw/pc-linux-wh/unit_test/bsp_ut.c" line="213" column="1" bodyfile="/home/vagrant/airliner/core/psp/fsw/pc-linux-wh/unit_test/bsp_ut.c" bodystart="213" bodyend="257"/>
        <references refid="bsp__ut_8c_1aee02b601d2d404eb6938d0e7749daace" compoundref="bsp__ut_8c" startline="194" endline="211">UT_BSP_DoTestSegmentReport</references>
        <referencedby refid="bsp__ut_8c_1a0ddf1224851353fc92bfbff6f499fa97" compoundref="bsp__ut_8c" startline="272" endline="291">main</referencedby>
      </memberdef>
      <memberdef kind="function" id="bsp__ut_8c_1a0ddf1224851353fc92bfbff6f499fa97" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int main</definition>
        <argsstring>(int argc, char *argv[])</argsstring>
        <name>main</name>
        <param>
          <type>int</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>argv</declname>
          <array>[]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vagrant/airliner/core/psp/fsw/pc-linux-wh/unit_test/bsp_ut.c" line="272" column="1" bodyfile="/home/vagrant/airliner/core/psp/fsw/pc-linux-wh/unit_test/bsp_ut.c" bodystart="272" bodyend="291"/>
        <references refid="bsp__ut_8c_1a0d26ed3b5853183ab454d71eb02bb706">OS_Application_Startup</references>
        <references refid="bsp__ut_8c_1a4b34f3705b39191202c6f59518e5aaae" compoundref="bsp__ut_8c" startline="213" endline="257">UT_BSP_EndTest</references>
        <references refid="bsp__ut_8c_1aecbc2967030a7171f12c4c694898ebcb" compoundref="bsp__ut_8c" startline="48" endline="78">UT_BSP_ParseCommandLine</references>
        <references refid="bsp__ut_8c_1ad09d38ba799add8908e48f1ecf4cb545" compoundref="bsp__ut_8c" startline="80" endline="99">UT_BSP_Setup</references>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/******************************************************************************</highlight></codeline>
<codeline lineno="2"><highlight class="comment">**<sp/>File:<sp/><sp/>bsp_ut.c</highlight></codeline>
<codeline lineno="3"><highlight class="comment">**</highlight></codeline>
<codeline lineno="4"><highlight class="comment">**</highlight></codeline>
<codeline lineno="5"><highlight class="comment">**<sp/><sp/><sp/><sp/><sp/><sp/>This<sp/>is<sp/>governed<sp/>by<sp/>the<sp/>NASA<sp/>Open<sp/>Source<sp/>Agreement<sp/>and<sp/>may<sp/>be<sp/>used,</highlight></codeline>
<codeline lineno="6"><highlight class="comment">**<sp/><sp/><sp/><sp/><sp/><sp/>distributed<sp/>and<sp/>modified<sp/>only<sp/>pursuant<sp/>to<sp/>the<sp/>terms<sp/>of<sp/>that<sp/>agreement.</highlight></codeline>
<codeline lineno="7"><highlight class="comment">**</highlight></codeline>
<codeline lineno="8"><highlight class="comment">**<sp/><sp/><sp/><sp/><sp/><sp/>Copyright<sp/>(c)<sp/>2004-2015,<sp/>United<sp/>States<sp/>government<sp/>as<sp/>represented<sp/>by<sp/>the</highlight></codeline>
<codeline lineno="9"><highlight class="comment">**<sp/><sp/><sp/><sp/><sp/><sp/>administrator<sp/>of<sp/>the<sp/>National<sp/>Aeronautics<sp/>Space<sp/>Administration.</highlight></codeline>
<codeline lineno="10"><highlight class="comment">**<sp/><sp/><sp/><sp/><sp/><sp/>All<sp/>rights<sp/>reserved.</highlight></codeline>
<codeline lineno="11"><highlight class="comment">**</highlight></codeline>
<codeline lineno="12"><highlight class="comment">**</highlight></codeline>
<codeline lineno="13"><highlight class="comment">**<sp/>Purpose:</highlight></codeline>
<codeline lineno="14"><highlight class="comment">**<sp/><sp/><sp/>BSP<sp/>unit<sp/>test<sp/>implementation<sp/>functions.</highlight></codeline>
<codeline lineno="15"><highlight class="comment">**</highlight></codeline>
<codeline lineno="16"><highlight class="comment">**<sp/>History:</highlight></codeline>
<codeline lineno="17"><highlight class="comment">**<sp/><sp/><sp/>Created<sp/>on:<sp/>Feb<sp/>10,<sp/>2015</highlight></codeline>
<codeline lineno="18"><highlight class="comment">**</highlight></codeline>
<codeline lineno="19"><highlight class="comment">******************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>NOTE<sp/>-<sp/>This<sp/>entire<sp/>source<sp/>file<sp/>is<sp/>only<sp/>relevant<sp/>for<sp/>unit<sp/>testing.</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>It<sp/>should<sp/>not<sp/>be<sp/>included<sp/>in<sp/>a<sp/>&quot;normal&quot;<sp/>BSP<sp/>build.</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;unistd.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;fcntl.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sys/types.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sys/stat.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;utbsp.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;uttest.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="38"><highlight class="comment">**<sp/><sp/>External<sp/>Declarations</highlight></codeline>
<codeline lineno="39"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="bsp__ut_8c_1a0d26ed3b5853183ab454d71eb02bb706" kindref="member">OS_Application_Startup</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="44"><highlight class="comment">**<sp/><sp/>Local<sp/>Variables</highlight></codeline>
<codeline lineno="45"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46" refid="bsp__ut_8c_1ac01b7db4ed89912ddfc1dc72c740c5e4" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="common__types_8h_1a9560e25c315bae45d1ed4e2ce49ce55a" kindref="member">uint32</ref><sp/><ref refid="bsp__ut_8c_1ac01b7db4ed89912ddfc1dc72c740c5e4" kindref="member">CurrVerbosity</ref><sp/>=<sp/>(2<sp/>&lt;&lt;<sp/>UTASSERT_CASETYPE_PASS)<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48" refid="bsp__ut_8c_1aecbc2967030a7171f12c4c694898ebcb" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="bsp__ut_8c_1aecbc2967030a7171f12c4c694898ebcb" kindref="member">UT_BSP_ParseCommandLine</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*argv[])</highlight></codeline>
<codeline lineno="49"><highlight class="normal">{</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="common__types_8h_1adde6aaee8457bee49c2a92621fe22b79" kindref="member">uint8</ref><sp/>UserShift;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>opt;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>UserShift<sp/>=<sp/>UTASSERT_CASETYPE_NONE;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((opt<sp/>=<sp/>getopt(argc,<sp/>argv,<sp/></highlight><highlight class="stringliteral">&quot;v:qd&quot;</highlight><highlight class="normal">))<sp/>!=<sp/>-1)</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(opt)<sp/>{</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;d&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UserShift<sp/>=<sp/>UTASSERT_CASETYPE_DEBUG;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;q&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UserShift<sp/>=<sp/>UTASSERT_CASETYPE_FAILURE;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;v&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UserShift<sp/>=<sp/>atoi(optarg);</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/></highlight><highlight class="comment">/*<sp/>&apos;?&apos;<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;Usage:<sp/>%s<sp/>[-v<sp/>verbosity]<sp/>[-d]<sp/>[-q]\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>argv[0]);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit(EXIT_FAILURE);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(UserShift<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>UserShift<sp/>&lt;<sp/>UTASSERT_CASETYPE_MAX)</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="bsp__ut_8c_1ac01b7db4ed89912ddfc1dc72c740c5e4" kindref="member">CurrVerbosity</ref><sp/>=<sp/>(2<sp/>&lt;&lt;<sp/>UserShift)<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal">}</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80" refid="bsp__ut_8c_1ad09d38ba799add8908e48f1ecf4cb545" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="bsp__ut_8c_1ad09d38ba799add8908e48f1ecf4cb545" kindref="member">UT_BSP_Setup</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Name)</highlight></codeline>
<codeline lineno="81"><highlight class="normal">{</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mode;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="bsp__ut_8c_1ae5adbd559a6e218185a48262ad6d0b5c" kindref="member">UT_BSP_DoText</ref>(UTASSERT_CASETYPE_BEGIN,<sp/>Name);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="87"><highlight class="comment"><sp/><sp/><sp/><sp/>**<sp/>Create<sp/>local<sp/>directories<sp/>for<sp/>&quot;disk&quot;<sp/>mount<sp/>points</highlight></codeline>
<codeline lineno="88"><highlight class="comment"><sp/><sp/><sp/><sp/>**<sp/><sp/>See<sp/>bsp_voltab<sp/>for<sp/>the<sp/>values</highlight></codeline>
<codeline lineno="89"><highlight class="comment"><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Making<sp/>directories:<sp/>ram0,<sp/>ram1,<sp/>eeprom1<sp/>for<sp/>OSAL<sp/>mount<sp/>points\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/>mode<sp/>=<sp/>S_IFDIR<sp/>|S_IRWXU<sp/>|<sp/>S_IRWXG<sp/>|<sp/>S_IRWXO;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/>mkdir(</highlight><highlight class="stringliteral">&quot;ram0&quot;</highlight><highlight class="normal">,<sp/>mode);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/>mkdir(</highlight><highlight class="stringliteral">&quot;ram1&quot;</highlight><highlight class="normal">,<sp/>mode);</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>mkdir(</highlight><highlight class="stringliteral">&quot;eeprom1&quot;</highlight><highlight class="normal">,<sp/>mode);</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>For<sp/>unit<sp/>testing,<sp/>the<sp/>ram3/ram4<sp/>mount<sp/>points<sp/>need<sp/>to<sp/>exist<sp/>as<sp/>well<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/>mkdir(</highlight><highlight class="stringliteral">&quot;ram3&quot;</highlight><highlight class="normal">,<sp/>mode);</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/>mkdir(</highlight><highlight class="stringliteral">&quot;ram4&quot;</highlight><highlight class="normal">,<sp/>mode);</highlight></codeline>
<codeline lineno="99"><highlight class="normal">}</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101" refid="bsp__ut_8c_1adc84a388163ed5772ef36223d1ff7007" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="bsp__ut_8c_1adc84a388163ed5772ef36223d1ff7007" kindref="member">UT_BSP_StartTestSegment</ref>(<ref refid="common__types_8h_1a9560e25c315bae45d1ed4e2ce49ce55a" kindref="member">uint32</ref><sp/>SegmentNumber,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*SegmentName)</highlight></codeline>
<codeline lineno="102"><highlight class="normal">{</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>ReportBuffer[128];</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>snprintf(ReportBuffer,</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(ReportBuffer),<sp/></highlight><highlight class="stringliteral">&quot;%02u<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)SegmentNumber,<sp/>SegmentName);</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="bsp__ut_8c_1ae5adbd559a6e218185a48262ad6d0b5c" kindref="member">UT_BSP_DoText</ref>(UTASSERT_CASETYPE_BEGIN,<sp/>ReportBuffer);</highlight></codeline>
<codeline lineno="107"><highlight class="normal">}</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109" refid="bsp__ut_8c_1ae5adbd559a6e218185a48262ad6d0b5c" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="bsp__ut_8c_1ae5adbd559a6e218185a48262ad6d0b5c" kindref="member">UT_BSP_DoText</ref>(<ref refid="common__types_8h_1adde6aaee8457bee49c2a92621fe22b79" kindref="member">uint8</ref><sp/>MessageType,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*OutputMessage)</highlight></codeline>
<codeline lineno="110"><highlight class="normal">{</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Prefix;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((<ref refid="bsp__ut_8c_1ac01b7db4ed89912ddfc1dc72c740c5e4" kindref="member">CurrVerbosity</ref><sp/>&gt;&gt;<sp/>MessageType)<sp/>&amp;<sp/>1)</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(MessageType)</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>UTASSERT_CASETYPE_ABORT:</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Prefix<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;ABORT&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>UTASSERT_CASETYPE_FAILURE:</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Prefix<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;FAIL&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>UTASSERT_CASETYPE_MIR:</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Prefix<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;MIR&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>UTASSERT_CASETYPE_TSF:</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Prefix<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;TSF&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>UTASSERT_CASETYPE_TTF:</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Prefix<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;TTF&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>UTASSERT_CASETYPE_NA:</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Prefix<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;N/A&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>UTASSERT_CASETYPE_BEGIN:</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);<sp/></highlight><highlight class="comment">/*<sp/>add<sp/>a<sp/>bit<sp/>of<sp/>extra<sp/>whitespace<sp/>between<sp/>tests<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Prefix<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;BEGIN&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>UTASSERT_CASETYPE_END:</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Prefix<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;END&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>UTASSERT_CASETYPE_PASS:</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Prefix<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;PASS&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>UTASSERT_CASETYPE_INFO:</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Prefix<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;INFO&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>UTASSERT_CASETYPE_DEBUG:</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Prefix<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;DEBUG&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Prefix<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;OTHER&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;[%5s]<sp/>%s\n&quot;</highlight><highlight class="normal">,Prefix,OutputMessage);</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="159"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/>If<sp/>any<sp/>ABORT<sp/>(major<sp/>failure)<sp/>message<sp/>is<sp/>thrown,</highlight></codeline>
<codeline lineno="160"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/>then<sp/>actually<sp/>call<sp/>abort()<sp/>to<sp/>stop<sp/>the<sp/>test<sp/>and<sp/>dump<sp/>a<sp/>core</highlight></codeline>
<codeline lineno="161"><highlight class="comment"><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(MessageType<sp/>==<sp/>UTASSERT_CASETYPE_ABORT)</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>abort();</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="166"><highlight class="normal">}</highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight></codeline>
<codeline lineno="168" refid="bsp__ut_8c_1a6a5c76d887b48e9016f317a44d34e3b9" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="bsp__ut_8c_1a6a5c76d887b48e9016f317a44d34e3b9" kindref="member">UT_BSP_DoReport</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*File,<sp/><ref refid="common__types_8h_1a9560e25c315bae45d1ed4e2ce49ce55a" kindref="member">uint32</ref><sp/>LineNum,<sp/><ref refid="common__types_8h_1a9560e25c315bae45d1ed4e2ce49ce55a" kindref="member">uint32</ref><sp/>SegmentNum,<sp/><ref refid="common__types_8h_1a9560e25c315bae45d1ed4e2ce49ce55a" kindref="member">uint32</ref><sp/>TestSeq,<sp/><ref refid="common__types_8h_1adde6aaee8457bee49c2a92621fe22b79" kindref="member">uint8</ref><sp/>MessageType,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*SubsysName,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*ShortDesc)</highlight></codeline>
<codeline lineno="169"><highlight class="normal">{</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="common__types_8h_1a9560e25c315bae45d1ed4e2ce49ce55a" kindref="member">uint32</ref><sp/>FileLen;</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*BasePtr;</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>ReportBuffer[128];</highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/>FileLen<sp/>=<sp/>strlen(File);</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/>BasePtr<sp/>=<sp/>File<sp/>+<sp/>FileLen;</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(FileLen<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--BasePtr;</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--FileLen;</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*BasePtr<sp/>==<sp/></highlight><highlight class="charliteral">&apos;/&apos;</highlight><highlight class="normal"><sp/>||<sp/>*BasePtr<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\\&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++BasePtr;</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/>snprintf(ReportBuffer,</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(ReportBuffer),<sp/></highlight><highlight class="stringliteral">&quot;%02u.%03u<sp/>%s:%u<sp/>-<sp/>%s&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)SegmentNum,<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)TestSeq,</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BasePtr,<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)LineNum,<sp/>ShortDesc);</highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="bsp__ut_8c_1ae5adbd559a6e218185a48262ad6d0b5c" kindref="member">UT_BSP_DoText</ref>(MessageType,<sp/>ReportBuffer);</highlight></codeline>
<codeline lineno="192"><highlight class="normal">}</highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight></codeline>
<codeline lineno="194" refid="bsp__ut_8c_1aee02b601d2d404eb6938d0e7749daace" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="bsp__ut_8c_1aee02b601d2d404eb6938d0e7749daace" kindref="member">UT_BSP_DoTestSegmentReport</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*SegmentName,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>UtAssert_TestCounter_t<sp/>*TestCounters)</highlight></codeline>
<codeline lineno="195"><highlight class="normal">{</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>ReportBuffer[128];</highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/>snprintf(ReportBuffer,</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(ReportBuffer),</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;%02u<sp/>%-20s<sp/>TOTAL::%-4u<sp/><sp/>PASS::%-4u<sp/><sp/>FAIL::%-4u<sp/><sp/><sp/>MIR::%-4u<sp/><sp/><sp/>TSF::%-4u<sp/><sp/><sp/>N/A::%-4u\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)TestCounters-&gt;TestSegmentCount,</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SegmentName,</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)TestCounters-&gt;TotalTestCases,</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)TestCounters-&gt;CaseCount[UTASSERT_CASETYPE_PASS],</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)TestCounters-&gt;CaseCount[UTASSERT_CASETYPE_FAILURE],</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)TestCounters-&gt;CaseCount[UTASSERT_CASETYPE_MIR],</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)TestCounters-&gt;CaseCount[UTASSERT_CASETYPE_TSF],</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)TestCounters-&gt;CaseCount[UTASSERT_CASETYPE_NA]);</highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="bsp__ut_8c_1ae5adbd559a6e218185a48262ad6d0b5c" kindref="member">UT_BSP_DoText</ref>(UTASSERT_CASETYPE_END,<sp/>ReportBuffer);</highlight></codeline>
<codeline lineno="211"><highlight class="normal">}</highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="213" refid="bsp__ut_8c_1a4b34f3705b39191202c6f59518e5aaae" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="bsp__ut_8c_1a4b34f3705b39191202c6f59518e5aaae" kindref="member">UT_BSP_EndTest</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>UtAssert_TestCounter_t<sp/>*TestCounters)</highlight></codeline>
<codeline lineno="214"><highlight class="normal">{</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>status<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="218"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/>Only<sp/>output<sp/>a<sp/>&quot;summary&quot;<sp/>if<sp/>there<sp/>is<sp/>more<sp/>than<sp/>one<sp/>test<sp/>Segment.</highlight></codeline>
<codeline lineno="219"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/>Otherwise<sp/>it<sp/>is<sp/>a<sp/>duplicate<sp/>of<sp/>the<sp/>report<sp/>already<sp/>given.</highlight></codeline>
<codeline lineno="220"><highlight class="comment"><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(TestCounters-&gt;TestSegmentCount<sp/>&gt;<sp/>1)</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="bsp__ut_8c_1aee02b601d2d404eb6938d0e7749daace" kindref="member">UT_BSP_DoTestSegmentReport</ref>(</highlight><highlight class="stringliteral">&quot;SUMMARY&quot;</highlight><highlight class="normal">,<sp/>TestCounters);</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;COMPLETE:<sp/>%u<sp/>tests<sp/>Segment(s)<sp/>executed\n\n&quot;</highlight><highlight class="normal">,<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)TestCounters-&gt;TestSegmentCount);</highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="229"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/>The<sp/>Linux<sp/>UT<sp/>BSP<sp/>allows<sp/>at<sp/>least<sp/>a<sp/>7<sp/>bit<sp/>status<sp/>code<sp/>to<sp/>be<sp/>returned<sp/>to<sp/>the<sp/>OS<sp/>(i.e.<sp/>the<sp/>exit<sp/>status</highlight></codeline>
<codeline lineno="230"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/>of<sp/>the<sp/>process).<sp/><sp/>This<sp/>is<sp/>useful<sp/>to<sp/>report<sp/>pass/fail.<sp/><sp/>Because<sp/>we<sp/>have<sp/>multiple<sp/>bits,<sp/>we<sp/>can<sp/>make</highlight></codeline>
<codeline lineno="231"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/>descriptive<sp/>exit<sp/>status<sp/>codes<sp/>to<sp/>indicate<sp/>what<sp/>went<sp/>wrong.<sp/><sp/>Anything<sp/>nonzero<sp/>represents<sp/>failure.</highlight></codeline>
<codeline lineno="232"><highlight class="comment"><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="233"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/>Consider<sp/>Failures<sp/>as<sp/>well<sp/>as<sp/>&quot;TSF&quot;<sp/>(setup<sp/>failures)<sp/>to<sp/>be<sp/>grounds<sp/>for<sp/>returning<sp/>nonzero<sp/>(bad)<sp/>status.</highlight></codeline>
<codeline lineno="234"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/>Also<sp/>the<sp/>lack<sp/>of<sp/>ANY<sp/>test<sp/>cases<sp/>should<sp/>produce<sp/>a<sp/>bad<sp/>status.</highlight></codeline>
<codeline lineno="235"><highlight class="comment"><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="236"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/>&quot;MIR&quot;<sp/>results<sp/>should<sp/>not<sp/>produce<sp/>a<sp/>bad<sp/>status<sp/>--<sp/>these<sp/>may<sp/>have<sp/>worked<sp/>fine,<sp/>we<sp/>do<sp/>not<sp/>know.</highlight></codeline>
<codeline lineno="237"><highlight class="comment"><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="238"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/>Likewise<sp/>&quot;N/A&quot;<sp/>tests<sp/>are<sp/>simply<sp/>not<sp/>applicable,<sp/>so<sp/>we<sp/>just<sp/>ignore<sp/>them.</highlight></codeline>
<codeline lineno="239"><highlight class="comment"><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(TestCounters-&gt;TotalTestCases<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>status<sp/>|=<sp/>0x01;</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(TestCounters-&gt;CaseCount[UTASSERT_CASETYPE_FAILURE]<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>status<sp/>|=<sp/>0x02;</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(TestCounters-&gt;CaseCount[UTASSERT_CASETYPE_TSF]<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>status<sp/>|=<sp/>0x04;</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/>exit(status);</highlight></codeline>
<codeline lineno="257"><highlight class="normal">}</highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight><highlight class="comment">/******************************************************************************</highlight></codeline>
<codeline lineno="260"><highlight class="comment">**<sp/><sp/>Function:<sp/><sp/>main()</highlight></codeline>
<codeline lineno="261"><highlight class="comment">**</highlight></codeline>
<codeline lineno="262"><highlight class="comment">**<sp/><sp/>Purpose:</highlight></codeline>
<codeline lineno="263"><highlight class="comment">**<sp/><sp/><sp/><sp/>BSP<sp/>Unit<sp/>Test<sp/>Application<sp/>entry<sp/>point.</highlight></codeline>
<codeline lineno="264"><highlight class="comment">**</highlight></codeline>
<codeline lineno="265"><highlight class="comment">**<sp/><sp/>Arguments:</highlight></codeline>
<codeline lineno="266"><highlight class="comment">**<sp/><sp/><sp/><sp/>(none)</highlight></codeline>
<codeline lineno="267"><highlight class="comment">**</highlight></codeline>
<codeline lineno="268"><highlight class="comment">**<sp/><sp/>Return:</highlight></codeline>
<codeline lineno="269"><highlight class="comment">**<sp/><sp/><sp/><sp/>(none)</highlight></codeline>
<codeline lineno="270"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight></codeline>
<codeline lineno="272" refid="bsp__ut_8c_1a0ddf1224851353fc92bfbff6f499fa97" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="bsp__ut_8c_1a0ddf1224851353fc92bfbff6f499fa97" kindref="member">main</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*argv[])</highlight></codeline>
<codeline lineno="273"><highlight class="normal">{</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><ref refid="bsp__ut_8c_1ad09d38ba799add8908e48f1ecf4cb545" kindref="member">UT_BSP_Setup</ref>(</highlight><highlight class="stringliteral">&quot;PC-LINUX<sp/>UNIT<sp/>TEST&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="277"><highlight class="comment"><sp/><sp/><sp/>**<sp/>Call<sp/>application<sp/>specific<sp/>entry<sp/>point.</highlight></codeline>
<codeline lineno="278"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><ref refid="bsp__ut_8c_1a0d26ed3b5853183ab454d71eb02bb706" kindref="member">OS_Application_Startup</ref>();</highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><ref refid="bsp__ut_8c_1aecbc2967030a7171f12c4c694898ebcb" kindref="member">UT_BSP_ParseCommandLine</ref>(argc,<sp/>argv);</highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="284"><highlight class="comment"><sp/><sp/><sp/>**<sp/>In<sp/>unit<sp/>test<sp/>mode,<sp/>call<sp/>the<sp/>UtTest_Run<sp/>function<sp/>(part<sp/>of<sp/>UT<sp/>Assert<sp/>library)</highlight></codeline>
<codeline lineno="285"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/>UtTest_Run();</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><ref refid="bsp__ut_8c_1a4b34f3705b39191202c6f59518e5aaae" kindref="member">UT_BSP_EndTest</ref>(UtAssert_GetCounters());</highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Should<sp/>typically<sp/>never<sp/>get<sp/>here<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(EXIT_SUCCESS);</highlight></codeline>
<codeline lineno="291"><highlight class="normal">}</highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/vagrant/airliner/core/psp/fsw/pc-linux-wh/unit_test/bsp_ut.c"/>
  </compounddef>
</doxygen>
