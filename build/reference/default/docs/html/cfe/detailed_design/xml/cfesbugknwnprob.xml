<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="cfesbugknwnprob" kind="page">
    <compoundname>cfesbugknwnprob</compoundname>
    <title>Known Problem</title>
    <detaileddescription>
<para>The software bus may perform unexpectedly under an unlikely corner-case scenario. This scenario was revealed in a stress test. The stress test was designed to deplete the Software Bus memory pool by having a high priority application continuously send 1000 byte packets to a lower priority application until the memory pool code returned an error code and sent the following event. &quot;CFE_ES:getPoolBuf err:Request won&apos;t fit in remaining memory&quot; At this point the higher priority sending application would stop executing. This would allow the lower priority receiving application to begin receiving the 1000 byte packets. After the receiving app processed all of the packets, the memory was restored to the memory pool as expected. The SB memory-in-use telemetry was zero because there were no software bus packets in transit. At this point any attempt to send a new-sized packet on the software bus was be rejected. The ES memory pool stated that the “…Request won&apos;t fit in remaining memory” even though there was currently no memory in use.</para><para>The simplest way to prevent this behavior is to ensure that there is margin when sizing the SB memory pool. To check the margin, monitor the &quot;Peak Memory in Use&quot; vs. the configuration parameter #CFE_SB_BUF_MEMORY_BYTES which indicates the amount allocated.</para><para>Next: <ref refid="cfesbugfaq" kindref="compound">Frequently Asked Questions about Software Bus</ref> <linebreak/>
 Prev: <ref refid="cfesbugqos" kindref="compound">Quality of Service</ref> <linebreak/>
 Up To: <ref refid="cfesbugops" kindref="compound">Operation of the SB Software</ref> </para>    </detaileddescription>
  </compounddef>
</doxygen>
