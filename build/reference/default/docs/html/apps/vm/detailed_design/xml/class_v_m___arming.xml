<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="class_v_m___arming" kind="class" language="C++" prot="public">
    <compoundname>VM_Arming</compoundname>
    <includes refid="vm___arming_8h" local="no">vm_Arming.h</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="class_v_m___arming_1accd94e1e4062fb7dca563a8c97674320" prot="public" static="no" mutable="no">
        <type>VM_ArmingContext</type>
        <definition>VM_ArmingContext VM_Arming::FSM</definition>
        <argsstring></argsstring>
        <name>FSM</name>
        <briefdescription>
<para>Fine State Machine context. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Description</title><para>This is the #VM_ArmingContext class auto generated by SMC from the #VM_Arming.sm file.</para></simplesect>
<simplesect kind="par"><title>Assumptions, External Events, and Notes:</title><para>None </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="apps/vm/fsw/src/vm_Arming.h" line="216" column="1" bodyfile="apps/vm/fsw/src/vm_Arming.h" bodystart="216" bodyend="-1"/>
        <referencedby refid="class_v_m_1a35c7b8c667b18138173d293b5cfc869b" compoundref="vm__app_8cpp" startline="1275" endline="1333">VM::AppMain</referencedby>
        <referencedby refid="class_v_m___arming_1a62ff0907b2f369c7c77d4c8c004a79d4" compoundref="vm___arming_8cpp" startline="185" endline="209">DoAction</referencedby>
        <referencedby refid="class_v_m_1a0491f4b72de26eb3e918abd3ada9b9d1" compoundref="vm__app_8cpp" startline="1502" endline="1881">VM::Execute</referencedby>
        <referencedby refid="class_v_m_1ae788deb61b12f2ea6350474a6e8d6ae0" compoundref="vm__app_8cpp" startline="2041" endline="2053">VM::FlightSessionInit</referencedby>
        <referencedby refid="class_v_m___arming_1a27ddd0639301a34223d2510fc453a9bd" compoundref="vm___arming_8cpp" startline="71" endline="74">GetCurrentStateID</referencedby>
        <referencedby refid="class_v_m_1a373dc74e5bdce3c5cf3db88a9a924f68" compoundref="vm__app_8cpp" startline="809" endline="1100">VM::ProcessAppCmds</referencedby>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_v_m___arming_1ac3378f9e4d88de16f9561487ed2b4799" prot="private" static="no" mutable="no">
        <type><ref refid="class_v_m" kindref="compound">VM</ref> &amp;</type>
        <definition>VM&amp; VM_Arming::App</definition>
        <argsstring></argsstring>
        <name>App</name>
        <briefdescription>
<para>Reference to the <ref refid="class_v_m" kindref="compound">VM</ref> application. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Description</title><para>This is a reference to the parent <ref refid="class_v_m" kindref="compound">VM</ref> application and used internally to access <ref refid="class_v_m" kindref="compound">VM</ref> member functions and attributes.</para></simplesect>
<simplesect kind="par"><title>Assumptions, External Events, and Notes:</title><para>None </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="apps/vm/fsw/src/vm_Arming.h" line="275" column="1" bodyfile="apps/vm/fsw/src/vm_Arming.h" bodystart="275" bodyend="-1"/>
        <referencedby refid="class_v_m___arming_1a62ff0907b2f369c7c77d4c8c004a79d4" compoundref="vm___arming_8cpp" startline="185" endline="209">DoAction</referencedby>
        <referencedby refid="class_v_m___arming_1a765120b9f6daa784e5defc811f8ca3e2" compoundref="vm___arming_8cpp" startline="120" endline="132">EnteredArmed</referencedby>
        <referencedby refid="class_v_m___arming_1ab0f6feadf222701e195a849e9fd4816b" compoundref="vm___arming_8cpp" startline="170" endline="176">EnteredArmedError</referencedby>
        <referencedby refid="class_v_m___arming_1a96f7208c9a671c9e6d62f6a3fd99ad72" compoundref="vm___arming_8cpp" startline="103" endline="111">EnteredStandby</referencedby>
        <referencedby refid="class_v_m___arming_1a584521ad4703b2cbe95857bf721c8ef6" compoundref="vm___arming_8cpp" startline="155" endline="161">EnteredStandbyError</referencedby>
        <referencedby refid="class_v_m___arming_1a96227a86bef3054b87be573f445d62a6" compoundref="vm___arming_8cpp" startline="141" endline="146">ExitedArmed</referencedby>
        <referencedby refid="class_v_m___arming_1a73bbcc225c37ead2a4b57a0f6b13eb0b" compoundref="vm___arming_8cpp" startline="83" endline="94">Init</referencedby>
        <referencedby refid="class_v_m___arming_1a616a59766c1ccc16468500faa880b13c" compoundref="vm___arming_8cpp" startline="218" endline="253">PreFlightCheckCleared</referencedby>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="class_v_m___arming_1a2ff61256446f0cbbcd956c3436b64959" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>VM_Arming::VM_Arming</definition>
        <argsstring>()</argsstring>
        <name>VM_Arming</name>
        <briefdescription>
<para><ref refid="class_v_m___arming" kindref="compound">VM_Arming</ref> default constructor. Don&apos;t use this constructor. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Description</title><para>This is the default constructor of the <ref refid="class_v_m___arming" kindref="compound">VM_Arming</ref> class. Do not use this constructor because it does not set <ref refid="class_v_m" kindref="compound">VM</ref> app reference. The non-default constructor sets the <ref refid="class_v_m" kindref="compound">VM</ref> app reference.</para></simplesect>
<simplesect kind="par"><title>Assumptions, External Events, and Notes:</title><para>None </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="apps/vm/fsw/src/vm_Arming.h" line="57" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_v_m___arming_1ac5603ad74d40d2f351c3f8a30e3b4dc2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>VM_Arming::VM_Arming</definition>
        <argsstring>(VM &amp;inApp)</argsstring>
        <name>VM_Arming</name>
        <param>
          <type><ref refid="class_v_m" kindref="compound">VM</ref> &amp;</type>
          <declname>inApp</declname>
        </param>
        <briefdescription>
<para><ref refid="class_v_m___arming" kindref="compound">VM_Arming</ref> constructor. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Description</title><para>This is the non-default constructor of the <ref refid="class_v_m___arming" kindref="compound">VM_Arming</ref> class that sets the <ref refid="class_v_m" kindref="compound">VM</ref> application reference. Use this constructor rather than the default constructor.</para></simplesect>
<simplesect kind="par"><title>Assumptions, External Events, and Notes:</title><para>None </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="apps/vm/fsw/src/vm_Arming.h" line="72" column="1" bodyfile="apps/vm/fsw/src/vm_Arming.cpp" bodystart="48" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="class_v_m___arming_1ac53959bf022359c111250111e47c42da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>VM_Arming::~VM_Arming</definition>
        <argsstring>()</argsstring>
        <name>~VM_Arming</name>
        <briefdescription>
<para><ref refid="class_v_m___arming" kindref="compound">VM_Arming</ref> destructor. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Description</title><para>This is the <ref refid="class_v_m___arming" kindref="compound">VM_Arming</ref> class destructor.</para></simplesect>
<simplesect kind="par"><title>Assumptions, External Events, and Notes:</title><para>None </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="apps/vm/fsw/src/vm_Arming.h" line="84" column="1" bodyfile="apps/vm/fsw/src/vm_Arming.cpp" bodystart="60" bodyend="62"/>
      </memberdef>
      <memberdef kind="function" id="class_v_m___arming_1a73bbcc225c37ead2a4b57a0f6b13eb0b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void VM_Arming::Init</definition>
        <argsstring>(void)</argsstring>
        <name>Init</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Initialize the <ref refid="class_v_m___arming" kindref="compound">VM_Arming</ref> object. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Description</title><para>This function should be called after object creation, to initialize the <ref refid="class_v_m___arming" kindref="compound">VM_Arming</ref> object.</para></simplesect>
<simplesect kind="par"><title>Assumptions, External Events, and Notes:</title><para>None </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="apps/vm/fsw/src/vm_Arming.h" line="97" column="1" bodyfile="apps/vm/fsw/src/vm_Arming.cpp" bodystart="83" bodyend="94"/>
        <references refid="class_v_m_1a4ed155be7539ee978f49d22aa89cdf75" compoundref="vm__app_8h" startline="185">VM::ActuatorArmedMsg</references>
        <references refid="class_v_m___arming_1ac3378f9e4d88de16f9561487ed2b4799" compoundref="vm___arming_8h" startline="275">App</references>
        <references refid="class_v_m_1a903a316d58ca7aed9dd3f9d045690fe0" compoundref="vm__app_8h" startline="195">VM::VehicleStatusMsg</references>
      </memberdef>
      <memberdef kind="function" id="class_v_m___arming_1a62ff0907b2f369c7c77d4c8c004a79d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void VM_Arming::DoAction</definition>
        <argsstring>(void)</argsstring>
        <name>DoAction</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Execute all stateful behavior. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Description</title><para>This function will execute all stateful behavior defined by the <ref refid="_v_m___arming_8sm" kindref="compound">VM_Arming.sm</ref> SMC state machine definition file and implemented by the auto generated <ref refid="class_v_m___arming" kindref="compound">VM_Arming</ref> context.</para></simplesect>
<simplesect kind="par"><title>Assumptions, External Events, and Notes:</title><para>None </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="apps/vm/fsw/src/vm_Arming.h" line="111" column="1" bodyfile="apps/vm/fsw/src/vm_Arming.cpp" bodystart="185" bodyend="209"/>
        <references refid="class_v_m___arming_1ac3378f9e4d88de16f9561487ed2b4799" compoundref="vm___arming_8h" startline="275">App</references>
        <references refid="cfe__evs_8h_1ad98a59324d59e7f8a2f6162887197832">CFE_EVS_ERROR</references>
        <references refid="cfe__evs_8c_1aab8630735c7be46fb4162323a112d298">CFE_EVS_SendEvent</references>
        <references refid="class_v_m___arming_1accd94e1e4062fb7dca563a8c97674320" compoundref="vm___arming_8h" startline="216">FSM</references>
        <references refid="class_v_m_1a32560bba908e54366252101cfae82f0b" compoundref="vm__app_8cpp" startline="1125" endline="1129">VM::SendActuatorArmedMsg</references>
        <references refid="vm__events_8h_1a4d913fdce483003fc71e5df6d309e930a2efbfcafe6417b1ab6d4ab72de596766" compoundref="vm__events_8h" startline="490">VM_IN_UNKNOWN_STATE_ERR_EID</references>
        <referencedby refid="class_v_m_1a27608a3beb9cdf5ecd14c84f9d144333" compoundref="vm__app_8cpp" startline="483" endline="569">VM::RcvSchPipeMsg</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_v_m___arming_1a27ddd0639301a34223d2510fc453a9bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="common__types_8h_1a9560e25c315bae45d1ed4e2ce49ce55a" kindref="member" external="/home/vagrant/airliner/build/reference/default/docs/html/cfe/detailed_design/cfe.tag">uint32</ref></type>
        <definition>uint32 VM_Arming::GetCurrentStateID</definition>
        <argsstring>(void)</argsstring>
        <name>GetCurrentStateID</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get the current state of the <ref refid="class_v_m___arming" kindref="compound">VM_Arming</ref> state machine. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Description</title><para>This function will return the current state of the <ref refid="class_v_m___arming" kindref="compound">VM_Arming</ref> state machine.</para></simplesect>
<simplesect kind="par"><title>Assumptions, External Events, and Notes:</title><para>None</para></simplesect>
<simplesect kind="return"><para><table rows="0" cols="0"></table>
values are defined by the SMC state machine input file (#VM_Arming.sm) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="apps/vm/fsw/src/vm_Arming.h" line="128" column="1" bodyfile="apps/vm/fsw/src/vm_Arming.cpp" bodystart="71" bodyend="74"/>
        <references refid="class_v_m___arming_1accd94e1e4062fb7dca563a8c97674320" compoundref="vm___arming_8h" startline="216">FSM</references>
        <referencedby refid="class_v_m_1aa1984d4ba6901c14f8a5228e29dc764e" compoundref="vm__app_8cpp" startline="1109" endline="1116">VM::ReportHousekeeping</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_v_m___arming_1a96f7208c9a671c9e6d62f6a3fd99ad72" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void VM_Arming::EnteredStandby</definition>
        <argsstring>(void)</argsstring>
        <name>EnteredStandby</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Function called on entry to the Standby state. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Description</title><para>This function will be called by the <ref refid="class_v_m___arming" kindref="compound">VM_Arming</ref> state machine when the Standby state is entered.</para></simplesect>
<simplesect kind="par"><title>Assumptions, External Events, and Notes:</title><para>None </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="apps/vm/fsw/src/vm_Arming.h" line="140" column="1" bodyfile="apps/vm/fsw/src/vm_Arming.cpp" bodystart="103" bodyend="111"/>
        <references refid="class_v_m_1a4ed155be7539ee978f49d22aa89cdf75" compoundref="vm__app_8h" startline="185">VM::ActuatorArmedMsg</references>
        <references refid="class_v_m___arming_1ac3378f9e4d88de16f9561487ed2b4799" compoundref="vm___arming_8h" startline="275">App</references>
        <references refid="cfe__evs_8h_1a9bc5a36744c852941ce1aa5e07932ff4">CFE_EVS_INFORMATION</references>
        <references refid="cfe__evs_8c_1aab8630735c7be46fb4162323a112d298">CFE_EVS_SendEvent</references>
        <references refid="class_v_m_1a903a316d58ca7aed9dd3f9d045690fe0" compoundref="vm__app_8h" startline="195">VM::VehicleStatusMsg</references>
        <references refid="vm__events_8h_1a4d913fdce483003fc71e5df6d309e930a1fb5778a5c9a78b322dbb906dfc67e88" compoundref="vm__events_8h" startline="305">VM_ARMING_ENTERED_STANDBY_STATE_INFO_EID</references>
      </memberdef>
      <memberdef kind="function" id="class_v_m___arming_1a765120b9f6daa784e5defc811f8ca3e2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void VM_Arming::EnteredArmed</definition>
        <argsstring>(void)</argsstring>
        <name>EnteredArmed</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Function called on entry to the Armed state. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Description</title><para>This function will be called by the <ref refid="class_v_m___arming" kindref="compound">VM_Arming</ref> state machine when the Armed state is entered.</para></simplesect>
<simplesect kind="par"><title>Assumptions, External Events, and Notes:</title><para>None </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="apps/vm/fsw/src/vm_Arming.h" line="152" column="1" bodyfile="apps/vm/fsw/src/vm_Arming.cpp" bodystart="120" bodyend="132"/>
        <references refid="class_v_m_1a4ed155be7539ee978f49d22aa89cdf75" compoundref="vm__app_8h" startline="185">VM::ActuatorArmedMsg</references>
        <references refid="class_v_m___arming_1ac3378f9e4d88de16f9561487ed2b4799" compoundref="vm___arming_8h" startline="275">App</references>
        <references refid="cfe__evs_8h_1a9bc5a36744c852941ce1aa5e07932ff4">CFE_EVS_INFORMATION</references>
        <references refid="cfe__evs_8c_1aab8630735c7be46fb4162323a112d298">CFE_EVS_SendEvent</references>
        <references refid="class_v_m_1a32560bba908e54366252101cfae82f0b" compoundref="vm__app_8cpp" startline="1125" endline="1129">VM::SendActuatorArmedMsg</references>
        <references refid="class_v_m_1ad10ee3ac2966766a0be9ea8fff6f30e8" compoundref="vm__app_8cpp" startline="1190" endline="1194">VM::SendVehicleStatusMsg</references>
        <references refid="class_v_m_1af7b413956eea366aefdbfe8f03ddd391" compoundref="vm__app_8cpp" startline="1383" endline="1423">VM::SetHomePosition</references>
        <references refid="class_v_m_1ae98cdbbec8c9cd73e9c45ecb0ce5b110" compoundref="vm__app_8h" startline="197">VM::VehicleControlModeMsg</references>
        <references refid="class_v_m_1a903a316d58ca7aed9dd3f9d045690fe0" compoundref="vm__app_8h" startline="195">VM::VehicleStatusMsg</references>
        <references refid="vm__events_8h_1a4d913fdce483003fc71e5df6d309e930aec8f1a6c218030831710e2d1e8b3943f" compoundref="vm__events_8h" startline="318">VM_ARMING_ENTERED_ARMED_STATE_INFO_EID</references>
      </memberdef>
      <memberdef kind="function" id="class_v_m___arming_1a616a59766c1ccc16468500faa880b13c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="common__types_8h_1a1a0d7c4c11a131b0d46ebcb64832e293" kindref="member" external="/home/vagrant/airliner/build/reference/default/docs/html/cfe/detailed_design/cfe.tag">osalbool</ref></type>
        <definition>osalbool VM_Arming::PreFlightCheckCleared</definition>
        <argsstring>(void)</argsstring>
        <name>PreFlightCheckCleared</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Check if PreFlight check has cleared. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Description</title><para>This function will return true if the PreFlight check is clear. Passing checks are: Position estimator is initialized Battery is not low Safety switch is not enabled Sensors are initialized</para></simplesect>
<simplesect kind="par"><title>Assumptions, External Events, and Notes:</title><para>None </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="apps/vm/fsw/src/vm_Arming.h" line="168" column="1" bodyfile="apps/vm/fsw/src/vm_Arming.cpp" bodystart="218" bodyend="253"/>
        <references refid="class_v_m___arming_1ac3378f9e4d88de16f9561487ed2b4799" compoundref="vm___arming_8h" startline="275">App</references>
        <references refid="class_v_m_1aac3829d769b1c158ed93bc41c5f2e610" compoundref="vm__app_8h" startline="151">VM::BatteryStatusMsg</references>
        <references refid="cfe__evs_8h_1ad98a59324d59e7f8a2f6162887197832">CFE_EVS_ERROR</references>
        <references refid="cfe__evs_8h_1a9bc5a36744c852941ce1aa5e07932ff4">CFE_EVS_INFORMATION</references>
        <references refid="cfe__evs_8c_1aab8630735c7be46fb4162323a112d298">CFE_EVS_SendEvent</references>
        <references refid="class_v_m_1a7a39a88bbd2069d287aaf4bd9fd95eec" compoundref="vm__app_8h" startline="205">VM::HkTlm</references>
        <references refid="class_v_m_1a046082c5e178827f43d592935619c681" compoundref="vm__app_8h" startline="171">VM::SafetyMsg</references>
        <references refid="struct_v_m___status_flags_1ac0f1451f55aedcdd128d9acbe77b0bf4" compoundref="vm__msg_8h" startline="632">VM_StatusFlags::SensorsInitialized</references>
        <references refid="struct_v_m___hk_tlm__t_1a6c6c1301e2b26546ad9d7e0d98b83f31" compoundref="vm__msg_8h" startline="812">VM_HkTlm_t::StatusFlags</references>
        <references refid="class_v_m_1a5062611ba3bc6f7ba3ca3f9fa5ab83ad" compoundref="vm__app_8h" startline="179">VM::VehicleGlobalPositionMsg</references>
        <references refid="vm__events_8h_1a4d913fdce483003fc71e5df6d309e930ab26a149e6a0e5b50500e852df2203483" compoundref="vm__events_8h" startline="852">VM_NOPE_ERR_EID</references>
        <references refid="vm__events_8h_1a4d913fdce483003fc71e5df6d309e930a621f48ad160a841f0425b5bdf25aac71" compoundref="vm__events_8h" startline="761">VM_PRE_ARM_BAT_CHECK_INFO_EID</references>
        <references refid="vm__events_8h_1a4d913fdce483003fc71e5df6d309e930a7eb17951913558db1c8304a913f96b65" compoundref="vm__events_8h" startline="774">VM_PRE_ARM_SAFETY_CHECK_INFO_EID</references>
        <references refid="vm__events_8h_1a4d913fdce483003fc71e5df6d309e930a91044d4b3d153cb6f887269c80d8287f" compoundref="vm__events_8h" startline="787">VM_PRE_ARM_SENSORS_CHECK_INFO_EID</references>
      </memberdef>
      <memberdef kind="function" id="class_v_m___arming_1a96227a86bef3054b87be573f445d62a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void VM_Arming::ExitedArmed</definition>
        <argsstring>(void)</argsstring>
        <name>ExitedArmed</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Function called on exit from the Armed state. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Description</title><para>This function will be called by the <ref refid="class_v_m___arming" kindref="compound">VM_Arming</ref> state machine when the Armed state is exited.</para></simplesect>
<simplesect kind="par"><title>Assumptions, External Events, and Notes:</title><para>None </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="apps/vm/fsw/src/vm_Arming.h" line="180" column="1" bodyfile="apps/vm/fsw/src/vm_Arming.cpp" bodystart="141" bodyend="146"/>
        <references refid="class_v_m_1a4ed155be7539ee978f49d22aa89cdf75" compoundref="vm__app_8h" startline="185">VM::ActuatorArmedMsg</references>
        <references refid="class_v_m___arming_1ac3378f9e4d88de16f9561487ed2b4799" compoundref="vm___arming_8h" startline="275">App</references>
        <references refid="class_v_m_1a32560bba908e54366252101cfae82f0b" compoundref="vm__app_8cpp" startline="1125" endline="1129">VM::SendActuatorArmedMsg</references>
        <references refid="class_v_m_1ae98cdbbec8c9cd73e9c45ecb0ce5b110" compoundref="vm__app_8h" startline="197">VM::VehicleControlModeMsg</references>
      </memberdef>
      <memberdef kind="function" id="class_v_m___arming_1a584521ad4703b2cbe95857bf721c8ef6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void VM_Arming::EnteredStandbyError</definition>
        <argsstring>(void)</argsstring>
        <name>EnteredStandbyError</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Function called on entry to the StandbyError state. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Description</title><para>This function will be called by the <ref refid="class_v_m___arming" kindref="compound">VM_Arming</ref> state machine when the StandbyError state is entered.</para></simplesect>
<simplesect kind="par"><title>Assumptions, External Events, and Notes:</title><para>None </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="apps/vm/fsw/src/vm_Arming.h" line="192" column="1" bodyfile="apps/vm/fsw/src/vm_Arming.cpp" bodystart="155" bodyend="161"/>
        <references refid="class_v_m___arming_1ac3378f9e4d88de16f9561487ed2b4799" compoundref="vm___arming_8h" startline="275">App</references>
        <references refid="cfe__evs_8h_1a9bc5a36744c852941ce1aa5e07932ff4">CFE_EVS_INFORMATION</references>
        <references refid="cfe__evs_8c_1aab8630735c7be46fb4162323a112d298">CFE_EVS_SendEvent</references>
        <references refid="class_v_m_1a32560bba908e54366252101cfae82f0b" compoundref="vm__app_8cpp" startline="1125" endline="1129">VM::SendActuatorArmedMsg</references>
        <references refid="class_v_m_1a903a316d58ca7aed9dd3f9d045690fe0" compoundref="vm__app_8h" startline="195">VM::VehicleStatusMsg</references>
        <references refid="vm__events_8h_1a4d913fdce483003fc71e5df6d309e930a92f61024059f5e074ecc997c6e39bd1a" compoundref="vm__events_8h" startline="330">VM_ARMING_ENTERED_STANDBY_ERROR_STATE_INFO_EID</references>
      </memberdef>
      <memberdef kind="function" id="class_v_m___arming_1ab0f6feadf222701e195a849e9fd4816b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void VM_Arming::EnteredArmedError</definition>
        <argsstring>(void)</argsstring>
        <name>EnteredArmedError</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Function called on entry to the ArmedError state. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Description</title><para>This function will be called by the <ref refid="class_v_m___arming" kindref="compound">VM_Arming</ref> state machine when the ArmedError state is entered.</para></simplesect>
<simplesect kind="par"><title>Assumptions, External Events, and Notes:</title><para>None </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="apps/vm/fsw/src/vm_Arming.h" line="204" column="1" bodyfile="apps/vm/fsw/src/vm_Arming.cpp" bodystart="170" bodyend="176"/>
        <references refid="class_v_m___arming_1ac3378f9e4d88de16f9561487ed2b4799" compoundref="vm___arming_8h" startline="275">App</references>
        <references refid="cfe__evs_8h_1a9bc5a36744c852941ce1aa5e07932ff4">CFE_EVS_INFORMATION</references>
        <references refid="cfe__evs_8c_1aab8630735c7be46fb4162323a112d298">CFE_EVS_SendEvent</references>
        <references refid="class_v_m_1a32560bba908e54366252101cfae82f0b" compoundref="vm__app_8cpp" startline="1125" endline="1129">VM::SendActuatorArmedMsg</references>
        <references refid="class_v_m_1a903a316d58ca7aed9dd3f9d045690fe0" compoundref="vm__app_8h" startline="195">VM::VehicleStatusMsg</references>
        <references refid="vm__events_8h_1a4d913fdce483003fc71e5df6d309e930ac3e322a1c73c1d29c56477607d017d7d" compoundref="vm__events_8h" startline="343">VM_ARMING_ENTERED_ARMED_ERROR_STATE_INFO_EID</references>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_v_m___arming_1a43356c70c6aa60ca807c64facdec5bc9" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void VM_Arming::Arm</definition>
        <argsstring>(void)</argsstring>
        <name>Arm</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Signal a transition to the Armed state. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Description</title><para>This is an internal function to signal a transition to the Armed state. The SMC auto generated context object defined by the #VM_Arming.sm file. Conditions are enforced by the context. See the state machine definition to determine what conditions, if any, are required to successfully transition.</para></simplesect>
<simplesect kind="par"><title>Assumptions, External Events, and Notes:</title><para>None </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="apps/vm/fsw/src/vm_Arming.h" line="232" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_v_m___arming_1ab3a6e69b7395e5b4f53d368d3f0f92c1" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void VM_Arming::Disarm</definition>
        <argsstring>(void)</argsstring>
        <name>Disarm</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Signal a transition to the Disarmed state. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Description</title><para>This is an internal function to signal a transition to the Disarmed state. The SMC auto generated context object defined by the #VM_Arming.sm file. Conditions are enforced by the context. See the state machine definition to determine what conditions, if any, are required to successfully transition.</para></simplesect>
<simplesect kind="par"><title>Assumptions, External Events, and Notes:</title><para>None </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="apps/vm/fsw/src/vm_Arming.h" line="247" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_v_m___arming_1a303ef52c8e89503a2ad9b93d89c98d32" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void VM_Arming::InitComplete</definition>
        <argsstring>(void)</argsstring>
        <name>InitComplete</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Signal a transition to the next state defined after initialization. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Description</title><para>This is an internal function to signal a transition to the next state after initialization. The SMC auto generated context object defined by the #VM_Arming.sm file. States, transitions, and conditions are enforced by the context. See the state machine definition to determine what the correct transition is.</para></simplesect>
<simplesect kind="par"><title>Assumptions, External Events, and Notes:</title><para>None </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="apps/vm/fsw/src/vm_Arming.h" line="263" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="23">
        <label>VM_StatusFlags</label>
        <link refid="struct_v_m___status_flags"/>
      </node>
      <node id="19">
        <label>VM_ConfigTbl_t</label>
        <link refid="struct_v_m___config_tbl__t"/>
      </node>
      <node id="16">
        <label>VM</label>
        <link refid="class_v_m"/>
        <childnode refid="17" relation="private-inheritance">
        </childnode>
        <childnode refid="18" relation="usage">
          <edgelabel>ConfigTlm</edgelabel>
        </childnode>
        <childnode refid="15" relation="usage">
          <edgelabel>ArmingSM</edgelabel>
        </childnode>
        <childnode refid="19" relation="usage">
          <edgelabel>ConfigTblPtr</edgelabel>
        </childnode>
        <childnode refid="20" relation="usage">
          <edgelabel>m_caws</edgelabel>
        </childnode>
        <childnode refid="21" relation="usage">
          <edgelabel>HkTlm</edgelabel>
        </childnode>
        <childnode refid="24" relation="usage">
          <edgelabel>NavigationSM</edgelabel>
        </childnode>
      </node>
      <node id="18">
        <label>VM_ConfigTlm_t</label>
        <link refid="struct_v_m___config_tlm__t"/>
        <childnode refid="19" relation="usage">
          <edgelabel>ConfigTbl</edgelabel>
        </childnode>
      </node>
      <node id="22">
        <label>VM_Modes</label>
        <link refid="struct_v_m___modes"/>
      </node>
      <node id="15">
        <label>VM_Arming</label>
        <link refid="class_v_m___arming"/>
        <childnode refid="16" relation="usage">
          <edgelabel>App</edgelabel>
        </childnode>
      </node>
      <node id="24">
        <label>VM_Navigation</label>
        <link refid="class_v_m___navigation"/>
        <childnode refid="16" relation="usage">
          <edgelabel>App</edgelabel>
        </childnode>
      </node>
      <node id="20">
        <label>CautionWarningHelper</label>
        <link refid="class_caution_warning_helper"/>
      </node>
      <node id="17">
        <label>ParamsConsumer</label>
      </node>
      <node id="21">
        <label>VM_HkTlm_t</label>
        <link refid="struct_v_m___hk_tlm__t"/>
        <childnode refid="22" relation="usage">
          <edgelabel>PreviousModes</edgelabel>
        </childnode>
        <childnode refid="23" relation="usage">
          <edgelabel>StatusFlags</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="apps/vm/fsw/src/vm_Arming.h" line="43" column="1" bodyfile="apps/vm/fsw/src/vm_Arming.h" bodystart="42" bodyend="276"/>
    <listofallmembers>
      <member refid="class_v_m___arming_1ac3378f9e4d88de16f9561487ed2b4799" prot="private" virt="non-virtual"><scope>VM_Arming</scope><name>App</name></member>
      <member refid="class_v_m___arming_1a43356c70c6aa60ca807c64facdec5bc9" prot="private" virt="non-virtual"><scope>VM_Arming</scope><name>Arm</name></member>
      <member refid="class_v_m___arming_1ab3a6e69b7395e5b4f53d368d3f0f92c1" prot="private" virt="non-virtual"><scope>VM_Arming</scope><name>Disarm</name></member>
      <member refid="class_v_m___arming_1a62ff0907b2f369c7c77d4c8c004a79d4" prot="public" virt="non-virtual"><scope>VM_Arming</scope><name>DoAction</name></member>
      <member refid="class_v_m___arming_1a765120b9f6daa784e5defc811f8ca3e2" prot="public" virt="non-virtual"><scope>VM_Arming</scope><name>EnteredArmed</name></member>
      <member refid="class_v_m___arming_1ab0f6feadf222701e195a849e9fd4816b" prot="public" virt="non-virtual"><scope>VM_Arming</scope><name>EnteredArmedError</name></member>
      <member refid="class_v_m___arming_1a96f7208c9a671c9e6d62f6a3fd99ad72" prot="public" virt="non-virtual"><scope>VM_Arming</scope><name>EnteredStandby</name></member>
      <member refid="class_v_m___arming_1a584521ad4703b2cbe95857bf721c8ef6" prot="public" virt="non-virtual"><scope>VM_Arming</scope><name>EnteredStandbyError</name></member>
      <member refid="class_v_m___arming_1a96227a86bef3054b87be573f445d62a6" prot="public" virt="non-virtual"><scope>VM_Arming</scope><name>ExitedArmed</name></member>
      <member refid="class_v_m___arming_1accd94e1e4062fb7dca563a8c97674320" prot="public" virt="non-virtual"><scope>VM_Arming</scope><name>FSM</name></member>
      <member refid="class_v_m___arming_1a27ddd0639301a34223d2510fc453a9bd" prot="public" virt="non-virtual"><scope>VM_Arming</scope><name>GetCurrentStateID</name></member>
      <member refid="class_v_m___arming_1a73bbcc225c37ead2a4b57a0f6b13eb0b" prot="public" virt="non-virtual"><scope>VM_Arming</scope><name>Init</name></member>
      <member refid="class_v_m___arming_1a303ef52c8e89503a2ad9b93d89c98d32" prot="private" virt="non-virtual"><scope>VM_Arming</scope><name>InitComplete</name></member>
      <member refid="class_v_m___arming_1a616a59766c1ccc16468500faa880b13c" prot="public" virt="non-virtual"><scope>VM_Arming</scope><name>PreFlightCheckCleared</name></member>
      <member refid="class_v_m___arming_1a2ff61256446f0cbbcd956c3436b64959" prot="protected" virt="non-virtual"><scope>VM_Arming</scope><name>VM_Arming</name></member>
      <member refid="class_v_m___arming_1ac5603ad74d40d2f351c3f8a30e3b4dc2" prot="public" virt="non-virtual"><scope>VM_Arming</scope><name>VM_Arming</name></member>
      <member refid="class_v_m___arming_1ac53959bf022359c111250111e47c42da" prot="public" virt="non-virtual"><scope>VM_Arming</scope><name>~VM_Arming</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
