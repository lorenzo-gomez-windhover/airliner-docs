<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="class_v_m___navigation" kind="class" language="C++" prot="public">
    <compoundname>VM_Navigation</compoundname>
    <includes refid="vm___navigation_8h" local="no">vm_Navigation.h</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="class_v_m___navigation_1a4fd947ec06d2c682f41442a022dfe272" prot="public" static="no" mutable="no">
        <type>VM_NavigationContext</type>
        <definition>VM_NavigationContext VM_Navigation::FSM</definition>
        <argsstring></argsstring>
        <name>FSM</name>
        <briefdescription>
<para>Fine State Machine context. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Description</title><para>This is the #VM_NavigationContext class auto generated by SMC from the #VM_Navigation.sm file.</para></simplesect>
<simplesect kind="par"><title>Assumptions, External Events, and Notes:</title><para>None </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="apps/vm/fsw/src/vm_Navigation.h" line="440" column="1" bodyfile="apps/vm/fsw/src/vm_Navigation.h" bodystart="440" bodyend="-1"/>
        <referencedby refid="class_v_m_1a35c7b8c667b18138173d293b5cfc869b" compoundref="vm__app_8cpp" startline="1275" endline="1333">VM::AppMain</referencedby>
        <referencedby refid="class_v_m___navigation_1a3a86cc01ad0b6dc6196a15d61b4d2517" compoundref="vm___navigation_8cpp" startline="267" endline="403">DoAction</referencedby>
        <referencedby refid="class_v_m_1a0491f4b72de26eb3e918abd3ada9b9d1" compoundref="vm__app_8cpp" startline="1502" endline="1881">VM::Execute</referencedby>
        <referencedby refid="class_v_m_1ae788deb61b12f2ea6350474a6e8d6ae0" compoundref="vm__app_8cpp" startline="2041" endline="2053">VM::FlightSessionInit</referencedby>
        <referencedby refid="class_v_m___navigation_1aa3e57f90d29ed5a55eb4da873e8f3ebb" compoundref="vm___navigation_8cpp" startline="85" endline="90">GetCurrentStateID</referencedby>
        <referencedby refid="class_v_m_1a373dc74e5bdce3c5cf3db88a9a924f68" compoundref="vm__app_8cpp" startline="809" endline="1100">VM::ProcessAppCmds</referencedby>
        <referencedby refid="class_v_m_1a7eb77b71aa8105b5c7e2a2db385b2b24" compoundref="vm__app_8cpp" startline="1890" endline="2032">VM::RcModes</referencedby>
      </memberdef>
      <memberdef kind="variable" id="class_v_m___navigation_1a29694887116a452d6958747616437f51" prot="public" static="no" mutable="no">
        <type><ref refid="class_v_m" kindref="compound">VM</ref> &amp;</type>
        <definition>VM&amp; VM_Navigation::App</definition>
        <argsstring></argsstring>
        <name>App</name>
        <briefdescription>
<para>Reference to the <ref refid="class_v_m" kindref="compound">VM</ref> application. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Description</title><para>This is a reference to the parent <ref refid="class_v_m" kindref="compound">VM</ref> application and used internally to access <ref refid="class_v_m" kindref="compound">VM</ref> member functions and attributes.</para></simplesect>
<simplesect kind="par"><title>Assumptions, External Events, and Notes:</title><para>None </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="apps/vm/fsw/src/vm_Navigation.h" line="452" column="1" bodyfile="apps/vm/fsw/src/vm_Navigation.h" bodystart="452" bodyend="-1"/>
        <referencedby refid="class_v_m___navigation_1ad051c0954ce548912e308c6836742bda" compoundref="vm___navigation_8cpp" startline="412" endline="442">AllMessagesReceivedAtLeastOnce</referencedby>
        <referencedby refid="class_v_m___navigation_1a3a86cc01ad0b6dc6196a15d61b4d2517" compoundref="vm___navigation_8cpp" startline="267" endline="403">DoAction</referencedby>
        <referencedby refid="class_v_m___navigation_1a02ee1cd7a3c1bdc67ba9c7b58e867214" compoundref="vm___navigation_8cpp" startline="182" endline="190">EnteredAcrobatic</referencedby>
        <referencedby refid="class_v_m___navigation_1a4ac22b983d887617274319cb138ce55d" compoundref="vm___navigation_8cpp" startline="115" endline="122">EnteredAltitudeControl</referencedby>
        <referencedby refid="class_v_m___navigation_1a7dbd13733dd902a5adf39ef074fac4cd" compoundref="vm___navigation_8cpp" startline="250" endline="258">EnteredAutoLand</referencedby>
        <referencedby refid="class_v_m___navigation_1a9234dc20303e05d9ef8ae8245194c949" compoundref="vm___navigation_8cpp" startline="148" endline="156">EnteredAutoLoiter</referencedby>
        <referencedby refid="class_v_m___navigation_1a59e38d155581f49b02607a527c0d35fa" compoundref="vm___navigation_8cpp" startline="165" endline="173">EnteredAutoReturnToLaunch</referencedby>
        <referencedby refid="class_v_m___navigation_1ae835334913baecd510c19b02ae728f43" compoundref="vm___navigation_8cpp" startline="233" endline="241">EnteredAutoTakeoff</referencedby>
        <referencedby refid="class_v_m___navigation_1a0d23c35b731387adf4c862876f26e637" compoundref="vm___navigation_8cpp" startline="99" endline="106">EnteredManual</referencedby>
        <referencedby refid="class_v_m___navigation_1ab86cd11821815cbd78635b1508b7c4e9" compoundref="vm___navigation_8cpp" startline="131" endline="139">EnteredPositionControl</referencedby>
        <referencedby refid="class_v_m___navigation_1ad63bff999b235f4f8b1b9965d21af833" compoundref="vm___navigation_8cpp" startline="216" endline="224">EnteredRattitude</referencedby>
        <referencedby refid="class_v_m___navigation_1a9400ae2e2059d6edfc778f77d2bcd1b6" compoundref="vm___navigation_8cpp" startline="199" endline="207">EnteredStabilize</referencedby>
        <referencedby refid="class_v_m___navigation_1a967fd598668462dcdf088de64352eeba" compoundref="vm___navigation_8cpp" startline="636" endline="639">IsLocalPositionIsValid</referencedby>
        <referencedby refid="class_v_m___navigation_1a53917dd81954b9a3b261e29c729776ec" compoundref="vm___navigation_8cpp" startline="526" endline="549">IsTransitionAcrobaticValid</referencedby>
        <referencedby refid="class_v_m___navigation_1a3ef977ac33d15b97173cee4ef99aae03" compoundref="vm___navigation_8cpp" startline="464" endline="485">IsTransitionAltCtlValid</referencedby>
        <referencedby refid="class_v_m___navigation_1aa71f7ec0293dff0e61469c6b1d32cef8" compoundref="vm___navigation_8cpp" startline="494" endline="517">IsTransitionPosCtlValid</referencedby>
        <referencedby refid="class_v_m___navigation_1ad54ec78e63a576b382cdbf328e8cd526" compoundref="vm___navigation_8cpp" startline="648" endline="651">IsVehicleArmed</referencedby>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="class_v_m___navigation_1a23090fd33f0d37235735b2416d39edf6" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>VM_Navigation::VM_Navigation</definition>
        <argsstring>()</argsstring>
        <name>VM_Navigation</name>
        <briefdescription>
<para><ref refid="class_v_m___navigation" kindref="compound">VM_Navigation</ref> default constructor. Don&apos;t use this constructor. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Description</title><para>This is the default constructor of the <ref refid="class_v_m___navigation" kindref="compound">VM_Navigation</ref> class. Do not use this constructor because it does not set <ref refid="class_v_m" kindref="compound">VM</ref> app reference. The non-default constructor sets the <ref refid="class_v_m" kindref="compound">VM</ref> app reference.</para></simplesect>
<simplesect kind="par"><title>Assumptions, External Events, and Notes:</title><para>None </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="apps/vm/fsw/src/vm_Navigation.h" line="58" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_v_m___navigation_1a44ff93df24784f5aef30ae1bbfd881dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>VM_Navigation::VM_Navigation</definition>
        <argsstring>(VM &amp;inVmApp)</argsstring>
        <name>VM_Navigation</name>
        <param>
          <type><ref refid="class_v_m" kindref="compound">VM</ref> &amp;</type>
          <declname>inVmApp</declname>
        </param>
        <briefdescription>
<para><ref refid="class_v_m___navigation" kindref="compound">VM_Navigation</ref> constructor. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Description</title><para>This is the non-default constructor of the <ref refid="class_v_m___navigation" kindref="compound">VM_Navigation</ref> class that sets the <ref refid="class_v_m" kindref="compound">VM</ref> application reference. Use this constructor rather than the default constructor.</para></simplesect>
<simplesect kind="par"><title>Assumptions, External Events, and Notes:</title><para>None </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="apps/vm/fsw/src/vm_Navigation.h" line="73" column="1" bodyfile="apps/vm/fsw/src/vm_Navigation.cpp" bodystart="60" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="class_v_m___navigation_1afb2c1203c401ed2ec6803fc6cbfe42d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>VM_Navigation::~VM_Navigation</definition>
        <argsstring>()</argsstring>
        <name>~VM_Navigation</name>
        <briefdescription>
<para><ref refid="class_v_m___navigation" kindref="compound">VM_Navigation</ref> destructor. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Description</title><para>This is the <ref refid="class_v_m___navigation" kindref="compound">VM_Navigation</ref> class destructor.</para></simplesect>
<simplesect kind="par"><title>Assumptions, External Events, and Notes:</title><para>None </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="apps/vm/fsw/src/vm_Navigation.h" line="85" column="1" bodyfile="apps/vm/fsw/src/vm_Navigation.cpp" bodystart="73" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="class_v_m___navigation_1a0d23c35b731387adf4c862876f26e637" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void VM_Navigation::EnteredManual</definition>
        <argsstring>()</argsstring>
        <name>EnteredManual</name>
        <briefdescription>
<para>Function called on entry to the Manual state. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Description</title><para>This function will be called by the <ref refid="class_v_m___navigation" kindref="compound">VM_Navigation</ref> state machine when the Manual state is entered.</para></simplesect>
<simplesect kind="par"><title>Assumptions, External Events, and Notes:</title><para>None </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="apps/vm/fsw/src/vm_Navigation.h" line="97" column="1" bodyfile="apps/vm/fsw/src/vm_Navigation.cpp" bodystart="99" bodyend="106"/>
        <references refid="class_v_m___navigation_1a29694887116a452d6958747616437f51" compoundref="vm___navigation_8h" startline="452">App</references>
        <references refid="cfe__evs_8h_1a9bc5a36744c852941ce1aa5e07932ff4">CFE_EVS_INFORMATION</references>
        <references refid="cfe__evs_8c_1aab8630735c7be46fb4162323a112d298">CFE_EVS_SendEvent</references>
        <references refid="class_v_m_1ad10ee3ac2966766a0be9ea8fff6f30e8" compoundref="vm__app_8cpp" startline="1190" endline="1194">VM::SendVehicleStatusMsg</references>
        <references refid="class_v_m_1ac3fccdbe2eeca915814fd0d6bde32a2a" compoundref="vm__app_8h" startline="189">VM::VehicleManagerStateMsg</references>
        <references refid="class_v_m_1a903a316d58ca7aed9dd3f9d045690fe0" compoundref="vm__app_8h" startline="195">VM::VehicleStatusMsg</references>
        <references refid="vm__events_8h_1a4d913fdce483003fc71e5df6d309e930a0e52a87ed3bc00266e074079e63ef27c" compoundref="vm__events_8h" startline="356">VM_NAVSM_ENTERED_MANUAL_INFO_EID</references>
      </memberdef>
      <memberdef kind="function" id="class_v_m___navigation_1a4ac22b983d887617274319cb138ce55d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void VM_Navigation::EnteredAltitudeControl</definition>
        <argsstring>()</argsstring>
        <name>EnteredAltitudeControl</name>
        <briefdescription>
<para>Function called on entry to the AltitudeControl state. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Description</title><para>This function will be called by the <ref refid="class_v_m___navigation" kindref="compound">VM_Navigation</ref> state machine when the AltitudeControl state is entered.</para></simplesect>
<simplesect kind="par"><title>Assumptions, External Events, and Notes:</title><para>None </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="apps/vm/fsw/src/vm_Navigation.h" line="109" column="1" bodyfile="apps/vm/fsw/src/vm_Navigation.cpp" bodystart="115" bodyend="122"/>
        <references refid="class_v_m___navigation_1a29694887116a452d6958747616437f51" compoundref="vm___navigation_8h" startline="452">App</references>
        <references refid="cfe__evs_8h_1a9bc5a36744c852941ce1aa5e07932ff4">CFE_EVS_INFORMATION</references>
        <references refid="cfe__evs_8c_1aab8630735c7be46fb4162323a112d298">CFE_EVS_SendEvent</references>
        <references refid="class_v_m_1ad10ee3ac2966766a0be9ea8fff6f30e8" compoundref="vm__app_8cpp" startline="1190" endline="1194">VM::SendVehicleStatusMsg</references>
        <references refid="class_v_m_1ac3fccdbe2eeca915814fd0d6bde32a2a" compoundref="vm__app_8h" startline="189">VM::VehicleManagerStateMsg</references>
        <references refid="class_v_m_1a903a316d58ca7aed9dd3f9d045690fe0" compoundref="vm__app_8h" startline="195">VM::VehicleStatusMsg</references>
        <references refid="vm__events_8h_1a4d913fdce483003fc71e5df6d309e930ae4d0d50e4869771291f03750b3ac872d" compoundref="vm__events_8h" startline="369">VM_NAVSN_ENTERED_ALTCTL_INFO_EID</references>
      </memberdef>
      <memberdef kind="function" id="class_v_m___navigation_1ab86cd11821815cbd78635b1508b7c4e9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void VM_Navigation::EnteredPositionControl</definition>
        <argsstring>()</argsstring>
        <name>EnteredPositionControl</name>
        <briefdescription>
<para>Function called on entry to the PositionControl state. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Description</title><para>This function will be called by the <ref refid="class_v_m___navigation" kindref="compound">VM_Navigation</ref> state machine when the PositionControl state is entered.</para></simplesect>
<simplesect kind="par"><title>Assumptions, External Events, and Notes:</title><para>None </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="apps/vm/fsw/src/vm_Navigation.h" line="121" column="1" bodyfile="apps/vm/fsw/src/vm_Navigation.cpp" bodystart="131" bodyend="139"/>
        <references refid="class_v_m___navigation_1a29694887116a452d6958747616437f51" compoundref="vm___navigation_8h" startline="452">App</references>
        <references refid="cfe__evs_8h_1a9bc5a36744c852941ce1aa5e07932ff4">CFE_EVS_INFORMATION</references>
        <references refid="cfe__evs_8c_1aab8630735c7be46fb4162323a112d298">CFE_EVS_SendEvent</references>
        <references refid="class_v_m_1ad10ee3ac2966766a0be9ea8fff6f30e8" compoundref="vm__app_8cpp" startline="1190" endline="1194">VM::SendVehicleStatusMsg</references>
        <references refid="class_v_m_1ac3fccdbe2eeca915814fd0d6bde32a2a" compoundref="vm__app_8h" startline="189">VM::VehicleManagerStateMsg</references>
        <references refid="class_v_m_1a903a316d58ca7aed9dd3f9d045690fe0" compoundref="vm__app_8h" startline="195">VM::VehicleStatusMsg</references>
        <references refid="vm__events_8h_1a4d913fdce483003fc71e5df6d309e930a17d9bea4db3564d45e57782813f60ba5" compoundref="vm__events_8h" startline="382">VM_NAVSN_ENTERED_POSCTL_INFO_EID</references>
      </memberdef>
      <memberdef kind="function" id="class_v_m___navigation_1a9234dc20303e05d9ef8ae8245194c949" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void VM_Navigation::EnteredAutoLoiter</definition>
        <argsstring>()</argsstring>
        <name>EnteredAutoLoiter</name>
        <briefdescription>
<para>Function called on entry to the AutoLoiter state. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Description</title><para>This function will be called by the <ref refid="class_v_m___navigation" kindref="compound">VM_Navigation</ref> state machine when the AutoLoiter state is entered.</para></simplesect>
<simplesect kind="par"><title>Assumptions, External Events, and Notes:</title><para>None </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="apps/vm/fsw/src/vm_Navigation.h" line="133" column="1" bodyfile="apps/vm/fsw/src/vm_Navigation.cpp" bodystart="148" bodyend="156"/>
        <references refid="class_v_m___navigation_1a29694887116a452d6958747616437f51" compoundref="vm___navigation_8h" startline="452">App</references>
        <references refid="cfe__evs_8h_1a9bc5a36744c852941ce1aa5e07932ff4">CFE_EVS_INFORMATION</references>
        <references refid="cfe__evs_8c_1aab8630735c7be46fb4162323a112d298">CFE_EVS_SendEvent</references>
        <references refid="class_v_m_1ad10ee3ac2966766a0be9ea8fff6f30e8" compoundref="vm__app_8cpp" startline="1190" endline="1194">VM::SendVehicleStatusMsg</references>
        <references refid="class_v_m_1ac3fccdbe2eeca915814fd0d6bde32a2a" compoundref="vm__app_8h" startline="189">VM::VehicleManagerStateMsg</references>
        <references refid="class_v_m_1a903a316d58ca7aed9dd3f9d045690fe0" compoundref="vm__app_8h" startline="195">VM::VehicleStatusMsg</references>
        <references refid="vm__events_8h_1a4d913fdce483003fc71e5df6d309e930a06e282c640509d5d456aa364e1a8b0b2" compoundref="vm__events_8h" startline="395">VM_NAVSN_ENTERED_AUTOLOITER_INFO_EID</references>
      </memberdef>
      <memberdef kind="function" id="class_v_m___navigation_1a59e38d155581f49b02607a527c0d35fa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void VM_Navigation::EnteredAutoReturnToLaunch</definition>
        <argsstring>()</argsstring>
        <name>EnteredAutoReturnToLaunch</name>
        <briefdescription>
<para>Function called on entry to the AutoReturnToLaunch state. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Description</title><para>This function will be called by the <ref refid="class_v_m___navigation" kindref="compound">VM_Navigation</ref> state machine when the AutoReturnToLaunch state is entered.</para></simplesect>
<simplesect kind="par"><title>Assumptions, External Events, and Notes:</title><para>None </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="apps/vm/fsw/src/vm_Navigation.h" line="145" column="1" bodyfile="apps/vm/fsw/src/vm_Navigation.cpp" bodystart="165" bodyend="173"/>
        <references refid="class_v_m___navigation_1a29694887116a452d6958747616437f51" compoundref="vm___navigation_8h" startline="452">App</references>
        <references refid="cfe__evs_8h_1a9bc5a36744c852941ce1aa5e07932ff4">CFE_EVS_INFORMATION</references>
        <references refid="cfe__evs_8c_1aab8630735c7be46fb4162323a112d298">CFE_EVS_SendEvent</references>
        <references refid="class_v_m_1ad10ee3ac2966766a0be9ea8fff6f30e8" compoundref="vm__app_8cpp" startline="1190" endline="1194">VM::SendVehicleStatusMsg</references>
        <references refid="class_v_m_1ac3fccdbe2eeca915814fd0d6bde32a2a" compoundref="vm__app_8h" startline="189">VM::VehicleManagerStateMsg</references>
        <references refid="class_v_m_1a903a316d58ca7aed9dd3f9d045690fe0" compoundref="vm__app_8h" startline="195">VM::VehicleStatusMsg</references>
        <references refid="vm__events_8h_1a4d913fdce483003fc71e5df6d309e930a3d00af3a8e12ddf0648ed93297804e27" compoundref="vm__events_8h" startline="408">VM_NAVSN_ENTERED_RTL_INFO_EID</references>
      </memberdef>
      <memberdef kind="function" id="class_v_m___navigation_1a02ee1cd7a3c1bdc67ba9c7b58e867214" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void VM_Navigation::EnteredAcrobatic</definition>
        <argsstring>()</argsstring>
        <name>EnteredAcrobatic</name>
        <briefdescription>
<para>Function called on entry to the Acrobatic state. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Description</title><para>This function will be called by the <ref refid="class_v_m___navigation" kindref="compound">VM_Navigation</ref> state machine when the Acrobatic state is entered.</para></simplesect>
<simplesect kind="par"><title>Assumptions, External Events, and Notes:</title><para>None </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="apps/vm/fsw/src/vm_Navigation.h" line="157" column="1" bodyfile="apps/vm/fsw/src/vm_Navigation.cpp" bodystart="182" bodyend="190"/>
        <references refid="class_v_m___navigation_1a29694887116a452d6958747616437f51" compoundref="vm___navigation_8h" startline="452">App</references>
        <references refid="cfe__evs_8h_1a9bc5a36744c852941ce1aa5e07932ff4">CFE_EVS_INFORMATION</references>
        <references refid="cfe__evs_8c_1aab8630735c7be46fb4162323a112d298">CFE_EVS_SendEvent</references>
        <references refid="class_v_m_1ad10ee3ac2966766a0be9ea8fff6f30e8" compoundref="vm__app_8cpp" startline="1190" endline="1194">VM::SendVehicleStatusMsg</references>
        <references refid="class_v_m_1ac3fccdbe2eeca915814fd0d6bde32a2a" compoundref="vm__app_8h" startline="189">VM::VehicleManagerStateMsg</references>
        <references refid="class_v_m_1a903a316d58ca7aed9dd3f9d045690fe0" compoundref="vm__app_8h" startline="195">VM::VehicleStatusMsg</references>
        <references refid="vm__events_8h_1a4d913fdce483003fc71e5df6d309e930abaf928d1edaa148f0c14843540435b17" compoundref="vm__events_8h" startline="421">VM_NAVSN_ENTERED_ACRO_INFO_EID</references>
      </memberdef>
      <memberdef kind="function" id="class_v_m___navigation_1a9400ae2e2059d6edfc778f77d2bcd1b6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void VM_Navigation::EnteredStabilize</definition>
        <argsstring>()</argsstring>
        <name>EnteredStabilize</name>
        <briefdescription>
<para>Function called on entry to the Stabilize state. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Description</title><para>This function will be called by the <ref refid="class_v_m___navigation" kindref="compound">VM_Navigation</ref> state machine when the Stabilize state is entered.</para></simplesect>
<simplesect kind="par"><title>Assumptions, External Events, and Notes:</title><para>None </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="apps/vm/fsw/src/vm_Navigation.h" line="169" column="1" bodyfile="apps/vm/fsw/src/vm_Navigation.cpp" bodystart="199" bodyend="207"/>
        <references refid="class_v_m___navigation_1a29694887116a452d6958747616437f51" compoundref="vm___navigation_8h" startline="452">App</references>
        <references refid="cfe__evs_8h_1a9bc5a36744c852941ce1aa5e07932ff4">CFE_EVS_INFORMATION</references>
        <references refid="cfe__evs_8c_1aab8630735c7be46fb4162323a112d298">CFE_EVS_SendEvent</references>
        <references refid="class_v_m_1ad10ee3ac2966766a0be9ea8fff6f30e8" compoundref="vm__app_8cpp" startline="1190" endline="1194">VM::SendVehicleStatusMsg</references>
        <references refid="class_v_m_1ac3fccdbe2eeca915814fd0d6bde32a2a" compoundref="vm__app_8h" startline="189">VM::VehicleManagerStateMsg</references>
        <references refid="class_v_m_1a903a316d58ca7aed9dd3f9d045690fe0" compoundref="vm__app_8h" startline="195">VM::VehicleStatusMsg</references>
        <references refid="vm__events_8h_1a4d913fdce483003fc71e5df6d309e930aed2d05f2cfb1b49db554765153295939" compoundref="vm__events_8h" startline="434">VM_NAVSN_ENTERED_STABILIZE_INFO_EID</references>
      </memberdef>
      <memberdef kind="function" id="class_v_m___navigation_1ad63bff999b235f4f8b1b9965d21af833" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void VM_Navigation::EnteredRattitude</definition>
        <argsstring>()</argsstring>
        <name>EnteredRattitude</name>
        <briefdescription>
<para>Function called on entry to the Rattitude state. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Description</title><para>This function will be called by the <ref refid="class_v_m___navigation" kindref="compound">VM_Navigation</ref> state machine when the Rattitude state is entered.</para></simplesect>
<simplesect kind="par"><title>Assumptions, External Events, and Notes:</title><para>None </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="apps/vm/fsw/src/vm_Navigation.h" line="181" column="1" bodyfile="apps/vm/fsw/src/vm_Navigation.cpp" bodystart="216" bodyend="224"/>
        <references refid="class_v_m___navigation_1a29694887116a452d6958747616437f51" compoundref="vm___navigation_8h" startline="452">App</references>
        <references refid="cfe__evs_8h_1a9bc5a36744c852941ce1aa5e07932ff4">CFE_EVS_INFORMATION</references>
        <references refid="cfe__evs_8c_1aab8630735c7be46fb4162323a112d298">CFE_EVS_SendEvent</references>
        <references refid="class_v_m_1ad10ee3ac2966766a0be9ea8fff6f30e8" compoundref="vm__app_8cpp" startline="1190" endline="1194">VM::SendVehicleStatusMsg</references>
        <references refid="class_v_m_1ac3fccdbe2eeca915814fd0d6bde32a2a" compoundref="vm__app_8h" startline="189">VM::VehicleManagerStateMsg</references>
        <references refid="class_v_m_1a903a316d58ca7aed9dd3f9d045690fe0" compoundref="vm__app_8h" startline="195">VM::VehicleStatusMsg</references>
        <references refid="vm__events_8h_1a4d913fdce483003fc71e5df6d309e930a3060b55a0f268675e127cfee2afca5b6" compoundref="vm__events_8h" startline="448">VM_NAVSN_ENTERED_RATTITUDE_INFO_EID</references>
      </memberdef>
      <memberdef kind="function" id="class_v_m___navigation_1ae835334913baecd510c19b02ae728f43" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void VM_Navigation::EnteredAutoTakeoff</definition>
        <argsstring>()</argsstring>
        <name>EnteredAutoTakeoff</name>
        <briefdescription>
<para>Function called on entry to the AutoTakeoff state. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Description</title><para>This function will be called by the <ref refid="class_v_m___navigation" kindref="compound">VM_Navigation</ref> state machine when the AutoTakeoff state is entered.</para></simplesect>
<simplesect kind="par"><title>Assumptions, External Events, and Notes:</title><para>None </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="apps/vm/fsw/src/vm_Navigation.h" line="193" column="1" bodyfile="apps/vm/fsw/src/vm_Navigation.cpp" bodystart="233" bodyend="241"/>
        <references refid="class_v_m___navigation_1a29694887116a452d6958747616437f51" compoundref="vm___navigation_8h" startline="452">App</references>
        <references refid="cfe__evs_8h_1a9bc5a36744c852941ce1aa5e07932ff4">CFE_EVS_INFORMATION</references>
        <references refid="cfe__evs_8c_1aab8630735c7be46fb4162323a112d298">CFE_EVS_SendEvent</references>
        <references refid="class_v_m_1ad10ee3ac2966766a0be9ea8fff6f30e8" compoundref="vm__app_8cpp" startline="1190" endline="1194">VM::SendVehicleStatusMsg</references>
        <references refid="class_v_m_1ac3fccdbe2eeca915814fd0d6bde32a2a" compoundref="vm__app_8h" startline="189">VM::VehicleManagerStateMsg</references>
        <references refid="class_v_m_1a903a316d58ca7aed9dd3f9d045690fe0" compoundref="vm__app_8h" startline="195">VM::VehicleStatusMsg</references>
        <references refid="vm__events_8h_1a4d913fdce483003fc71e5df6d309e930acc7f98c151ca362c05904623ee15ce1f" compoundref="vm__events_8h" startline="461">VM_NAVSN_ENTERED_AUTO_TAKEOFF_INFO_EID</references>
      </memberdef>
      <memberdef kind="function" id="class_v_m___navigation_1a7dbd13733dd902a5adf39ef074fac4cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void VM_Navigation::EnteredAutoLand</definition>
        <argsstring>()</argsstring>
        <name>EnteredAutoLand</name>
        <briefdescription>
<para>Function called on entry to the AutoLand state. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Description</title><para>This function will be called by the <ref refid="class_v_m___navigation" kindref="compound">VM_Navigation</ref> state machine when the AutoLand state is entered.</para></simplesect>
<simplesect kind="par"><title>Assumptions, External Events, and Notes:</title><para>None </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="apps/vm/fsw/src/vm_Navigation.h" line="205" column="1" bodyfile="apps/vm/fsw/src/vm_Navigation.cpp" bodystart="250" bodyend="258"/>
        <references refid="class_v_m___navigation_1a29694887116a452d6958747616437f51" compoundref="vm___navigation_8h" startline="452">App</references>
        <references refid="cfe__evs_8h_1a9bc5a36744c852941ce1aa5e07932ff4">CFE_EVS_INFORMATION</references>
        <references refid="cfe__evs_8c_1aab8630735c7be46fb4162323a112d298">CFE_EVS_SendEvent</references>
        <references refid="class_v_m_1ad10ee3ac2966766a0be9ea8fff6f30e8" compoundref="vm__app_8cpp" startline="1190" endline="1194">VM::SendVehicleStatusMsg</references>
        <references refid="class_v_m_1ac3fccdbe2eeca915814fd0d6bde32a2a" compoundref="vm__app_8h" startline="189">VM::VehicleManagerStateMsg</references>
        <references refid="class_v_m_1a903a316d58ca7aed9dd3f9d045690fe0" compoundref="vm__app_8h" startline="195">VM::VehicleStatusMsg</references>
        <references refid="vm__events_8h_1a4d913fdce483003fc71e5df6d309e930a129320a3e373e5702a7dc3113c7e1cf6" compoundref="vm__events_8h" startline="474">VM_NAVSN_ENTERED_AUTO_LAND_INFO_EID</references>
      </memberdef>
      <memberdef kind="function" id="class_v_m___navigation_1aa3e57f90d29ed5a55eb4da873e8f3ebb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="common__types_8h_1a9560e25c315bae45d1ed4e2ce49ce55a" kindref="member" external="/home/vagrant/airliner/build/reference/default/docs/html/cfe/detailed_design/cfe.tag">uint32</ref></type>
        <definition>uint32 VM_Navigation::GetCurrentStateID</definition>
        <argsstring>(void)</argsstring>
        <name>GetCurrentStateID</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get the current state of the <ref refid="class_v_m___navigation" kindref="compound">VM_Navigation</ref> state machine. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Description</title><para>This function will return the current state of the <ref refid="class_v_m___arming" kindref="compound">VM_Arming</ref> state machine.</para></simplesect>
<simplesect kind="par"><title>Assumptions, External Events, and Notes:</title><para>None</para></simplesect>
<simplesect kind="return"><para><table rows="0" cols="0"></table>
values are defined by the SMC state machine input file (#VM_Navigation.sm) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="apps/vm/fsw/src/vm_Navigation.h" line="222" column="1" bodyfile="apps/vm/fsw/src/vm_Navigation.cpp" bodystart="85" bodyend="90"/>
        <references refid="class_v_m___navigation_1a4fd947ec06d2c682f41442a022dfe272" compoundref="vm___navigation_8h" startline="440">FSM</references>
        <referencedby refid="class_v_m_1a0491f4b72de26eb3e918abd3ada9b9d1" compoundref="vm__app_8cpp" startline="1502" endline="1881">VM::Execute</referencedby>
        <referencedby refid="class_v_m_1a373dc74e5bdce3c5cf3db88a9a924f68" compoundref="vm__app_8cpp" startline="809" endline="1100">VM::ProcessAppCmds</referencedby>
        <referencedby refid="class_v_m_1a7eb77b71aa8105b5c7e2a2db385b2b24" compoundref="vm__app_8cpp" startline="1890" endline="2032">VM::RcModes</referencedby>
        <referencedby refid="class_v_m_1aa1984d4ba6901c14f8a5228e29dc764e" compoundref="vm__app_8cpp" startline="1109" endline="1116">VM::ReportHousekeeping</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_v_m___navigation_1a3a86cc01ad0b6dc6196a15d61b4d2517" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void VM_Navigation::DoAction</definition>
        <argsstring>(void)</argsstring>
        <name>DoAction</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Execute all stateful behavior. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Description</title><para>This function will execute all stateful behavior defined by the <ref refid="_v_m___navigation_8sm" kindref="compound">VM_Navigation.sm</ref> SMC state machine definition file and implemented by the auto generated <ref refid="class_v_m___navigation" kindref="compound">VM_Navigation</ref> context.</para></simplesect>
<simplesect kind="par"><title>Assumptions, External Events, and Notes:</title><para>None </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="apps/vm/fsw/src/vm_Navigation.h" line="236" column="1" bodyfile="apps/vm/fsw/src/vm_Navigation.cpp" bodystart="267" bodyend="403"/>
        <references refid="class_v_m___navigation_1a29694887116a452d6958747616437f51" compoundref="vm___navigation_8h" startline="452">App</references>
        <references refid="cfe__evs_8h_1ad98a59324d59e7f8a2f6162887197832">CFE_EVS_ERROR</references>
        <references refid="cfe__evs_8c_1aab8630735c7be46fb4162323a112d298">CFE_EVS_SendEvent</references>
        <references refid="class_v_m___navigation_1a4fd947ec06d2c682f41442a022dfe272" compoundref="vm___navigation_8h" startline="440">FSM</references>
        <references refid="class_v_m___navigation_1afffab3a843ab5d722bb8a88c2ddafd7c" compoundref="vm___navigation_8cpp" startline="451" endline="455">IsStabilizationRequired</references>
        <references refid="class_v_m_1ae98cdbbec8c9cd73e9c45ecb0ce5b110" compoundref="vm__app_8h" startline="197">VM::VehicleControlModeMsg</references>
        <references refid="class_v_m_1a903a316d58ca7aed9dd3f9d045690fe0" compoundref="vm__app_8h" startline="195">VM::VehicleStatusMsg</references>
        <references refid="vm__events_8h_1a4d913fdce483003fc71e5df6d309e930a2efbfcafe6417b1ab6d4ab72de596766" compoundref="vm__events_8h" startline="490">VM_IN_UNKNOWN_STATE_ERR_EID</references>
        <references refid="vm___navigation_8cpp_1ab1c33161948535bad36d580cb3c23b71af129792b16326cb79b640a62b1b88418" compoundref="vm___navigation_8cpp" startline="46">VM_NAVSM_ACRO</references>
        <references refid="vm___navigation_8cpp_1ab1c33161948535bad36d580cb3c23b71a527e9f5333d57f040bfb36ed245b2919" compoundref="vm___navigation_8cpp" startline="42">VM_NAVSM_ALTCTL</references>
        <references refid="vm___navigation_8cpp_1ab1c33161948535bad36d580cb3c23b71a92604776cd36324cd98ae1b2fab54ea4" compoundref="vm___navigation_8cpp" startline="50">VM_NAVSM_AUTO_LAND</references>
        <references refid="vm___navigation_8cpp_1ab1c33161948535bad36d580cb3c23b71a46e2d2d536f854a58aa1fd507a6df869" compoundref="vm___navigation_8cpp" startline="45">VM_NAVSM_AUTO_LOITER</references>
        <references refid="vm___navigation_8cpp_1ab1c33161948535bad36d580cb3c23b71ade0ec4cd7741f29ad951951ddba45b7d" compoundref="vm___navigation_8cpp" startline="44">VM_NAVSM_AUTO_RTL</references>
        <references refid="vm___navigation_8cpp_1ab1c33161948535bad36d580cb3c23b71a4dec15a2de0c6caa9f1ce2b7ae807d21" compoundref="vm___navigation_8cpp" startline="49">VM_NAVSM_AUTO_TAKEOFF</references>
        <references refid="vm___navigation_8cpp_1ab1c33161948535bad36d580cb3c23b71aa17d70bbe3985aab67897b288677fa0d" compoundref="vm___navigation_8cpp" startline="41">VM_NAVSM_MANUAL_STATE</references>
        <references refid="vm___navigation_8cpp_1ab1c33161948535bad36d580cb3c23b71afd270f904cdd2e33a4f8aa1b03d0ccf6" compoundref="vm___navigation_8cpp" startline="43">VM_NAVSM_POSCTL</references>
        <references refid="vm___navigation_8cpp_1ab1c33161948535bad36d580cb3c23b71a1c1d8150d9e59c21cdbc2f0bba74ac3d" compoundref="vm___navigation_8cpp" startline="48">VM_NAVSM_RATTITUDE</references>
        <references refid="vm___navigation_8cpp_1ab1c33161948535bad36d580cb3c23b71ac3fdf7271a64daf3cff8ea3aeffcbaa3" compoundref="vm___navigation_8cpp" startline="47">VM_NAVSM_STAB</references>
        <referencedby refid="class_v_m_1a27608a3beb9cdf5ecd14c84f9d144333" compoundref="vm__app_8cpp" startline="483" endline="569">VM::RcvSchPipeMsg</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_v_m___navigation_1a3ef977ac33d15b97173cee4ef99aae03" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="common__types_8h_1a1a0d7c4c11a131b0d46ebcb64832e293" kindref="member" external="/home/vagrant/airliner/build/reference/default/docs/html/cfe/detailed_design/cfe.tag">osalbool</ref></type>
        <definition>osalbool VM_Navigation::IsTransitionAltCtlValid</definition>
        <argsstring>(void)</argsstring>
        <name>IsTransitionAltCtlValid</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Guard condition on transition to AltCtl state. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Description</title><para>This function determines if is legal to transition to the AltCtl state at this time. This is called by the context defined by the #VM_Navigation.sm file and autogenerated to source code by SMC. See the #VM_Navigation.sm file to see the states and transitions.</para></simplesect>
<simplesect kind="par"><title>Assumptions, External Events, and Notes:</title><para>None </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="apps/vm/fsw/src/vm_Navigation.h" line="251" column="1" bodyfile="apps/vm/fsw/src/vm_Navigation.cpp" bodystart="464" bodyend="485"/>
        <references refid="class_v_m___navigation_1a29694887116a452d6958747616437f51" compoundref="vm___navigation_8h" startline="452">App</references>
        <references refid="cfe__evs_8h_1ad98a59324d59e7f8a2f6162887197832">CFE_EVS_ERROR</references>
        <references refid="cfe__evs_8c_1aab8630735c7be46fb4162323a112d298">CFE_EVS_SendEvent</references>
        <references refid="class_v_m_1a59a819087efb4519dd772eebc96e81af" compoundref="vm__app_8h" startline="159">VM::VehicleLocalPositionMsg</references>
        <references refid="class_v_m_1a903a316d58ca7aed9dd3f9d045690fe0" compoundref="vm__app_8h" startline="195">VM::VehicleStatusMsg</references>
        <references refid="vm__events_8h_1a4d913fdce483003fc71e5df6d309e930a01e2a9c505e6b46f90751e32909f00af" compoundref="vm__events_8h" startline="826">VM_REQ_ALT_CTL_ERR_EID</references>
      </memberdef>
      <memberdef kind="function" id="class_v_m___navigation_1aa71f7ec0293dff0e61469c6b1d32cef8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="common__types_8h_1a1a0d7c4c11a131b0d46ebcb64832e293" kindref="member" external="/home/vagrant/airliner/build/reference/default/docs/html/cfe/detailed_design/cfe.tag">osalbool</ref></type>
        <definition>osalbool VM_Navigation::IsTransitionPosCtlValid</definition>
        <argsstring>(void)</argsstring>
        <name>IsTransitionPosCtlValid</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Guard condition on transition to PosCtl state. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Description</title><para>This function determines if is legal to transition to the PosCtl state at this time. This is called by the context defined by the #VM_Navigation.sm file and autogenerated to source code by SMC. See the #VM_Navigation.sm file to see the states and transitions.</para></simplesect>
<simplesect kind="par"><title>Assumptions, External Events, and Notes:</title><para>None </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="apps/vm/fsw/src/vm_Navigation.h" line="266" column="1" bodyfile="apps/vm/fsw/src/vm_Navigation.cpp" bodystart="494" bodyend="517"/>
        <references refid="class_v_m___navigation_1a29694887116a452d6958747616437f51" compoundref="vm___navigation_8h" startline="452">App</references>
        <references refid="cfe__evs_8h_1ad98a59324d59e7f8a2f6162887197832">CFE_EVS_ERROR</references>
        <references refid="cfe__evs_8c_1aab8630735c7be46fb4162323a112d298">CFE_EVS_SendEvent</references>
        <references refid="class_v_m_1a59a819087efb4519dd772eebc96e81af" compoundref="vm__app_8h" startline="159">VM::VehicleLocalPositionMsg</references>
        <references refid="class_v_m_1a903a316d58ca7aed9dd3f9d045690fe0" compoundref="vm__app_8h" startline="195">VM::VehicleStatusMsg</references>
        <references refid="vm__events_8h_1a4d913fdce483003fc71e5df6d309e930a97e06193a7c07436983780ba38d09b69" compoundref="vm__events_8h" startline="813">VM_REQ_POS_CTL_ERR_EID</references>
      </memberdef>
      <memberdef kind="function" id="class_v_m___navigation_1a53917dd81954b9a3b261e29c729776ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="common__types_8h_1a1a0d7c4c11a131b0d46ebcb64832e293" kindref="member" external="/home/vagrant/airliner/build/reference/default/docs/html/cfe/detailed_design/cfe.tag">osalbool</ref></type>
        <definition>osalbool VM_Navigation::IsTransitionAcrobaticValid</definition>
        <argsstring>(void)</argsstring>
        <name>IsTransitionAcrobaticValid</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Guard condition on transition to Acrobatic state. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Description</title><para>This function determines if is legal to transition to the Acrobatic state at this time. This is called by the context defined by the #VM_Navigation.sm file and autogenerated to source code by SMC. See the #VM_Navigation.sm file to see the states and transitions.</para></simplesect>
<simplesect kind="par"><title>Assumptions, External Events, and Notes:</title><para>None </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="apps/vm/fsw/src/vm_Navigation.h" line="282" column="1" bodyfile="apps/vm/fsw/src/vm_Navigation.cpp" bodystart="526" bodyend="549"/>
        <references refid="class_v_m___navigation_1a29694887116a452d6958747616437f51" compoundref="vm___navigation_8h" startline="452">App</references>
        <references refid="cfe__evs_8h_1ad98a59324d59e7f8a2f6162887197832">CFE_EVS_ERROR</references>
        <references refid="cfe__evs_8c_1aab8630735c7be46fb4162323a112d298">CFE_EVS_SendEvent</references>
        <references refid="class_v_m_1ac1dbcc4bb47165cfa686860ebe464eff" compoundref="vm__app_8h" startline="175">VM::SensorCombinedMsg</references>
        <references refid="class_v_m_1a903a316d58ca7aed9dd3f9d045690fe0" compoundref="vm__app_8h" startline="195">VM::VehicleStatusMsg</references>
        <references refid="vm__events_8h_1a4d913fdce483003fc71e5df6d309e930a05a170c7a9654c16cd7ab547663cef5b" compoundref="vm__events_8h" startline="839">VM_REQ_ACRO_ERR_EID</references>
      </memberdef>
      <memberdef kind="function" id="class_v_m___navigation_1aa70d9c1ddb35928ac66799d7f03c6701" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="common__types_8h_1a1a0d7c4c11a131b0d46ebcb64832e293" kindref="member" external="/home/vagrant/airliner/build/reference/default/docs/html/cfe/detailed_design/cfe.tag">osalbool</ref></type>
        <definition>osalbool VM_Navigation::IsTransitionAutoLoiterValid</definition>
        <argsstring>(void)</argsstring>
        <name>IsTransitionAutoLoiterValid</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Guard condition on transition to AutoLoiter state. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Description</title><para>This function determines if is legal to transition to the AutoLoiter state at this time. This is called by the context defined by the #VM_Navigation.sm file and autogenerated to source code by SMC. See the #VM_Navigation.sm file to see the states and transitions.</para></simplesect>
<simplesect kind="par"><title>Assumptions, External Events, and Notes:</title><para>None </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="apps/vm/fsw/src/vm_Navigation.h" line="298" column="1" bodyfile="apps/vm/fsw/src/vm_Navigation.cpp" bodystart="558" bodyend="562"/>
        <references refid="class_v_m___navigation_1ad051c0954ce548912e308c6836742bda" compoundref="vm___navigation_8cpp" startline="412" endline="442">AllMessagesReceivedAtLeastOnce</references>
      </memberdef>
      <memberdef kind="function" id="class_v_m___navigation_1a2fe51a739ee25c7bb32463a93959927a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="common__types_8h_1a1a0d7c4c11a131b0d46ebcb64832e293" kindref="member" external="/home/vagrant/airliner/build/reference/default/docs/html/cfe/detailed_design/cfe.tag">osalbool</ref></type>
        <definition>osalbool VM_Navigation::IsTransitionRtlValid</definition>
        <argsstring>(void)</argsstring>
        <name>IsTransitionRtlValid</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Guard condition on transition to RTL state. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Description</title><para>This function determines if is legal to transition to the AutoLoiter state at this time. This is called by the context defined by the #VM_Navigation.sm file and autogenerated to source code by SMC. See the #VM_Navigation.sm file to see the states and transitions.</para></simplesect>
<simplesect kind="par"><title>Assumptions, External Events, and Notes:</title><para>None </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="apps/vm/fsw/src/vm_Navigation.h" line="314" column="1" bodyfile="apps/vm/fsw/src/vm_Navigation.cpp" bodystart="571" bodyend="575"/>
        <references refid="class_v_m___navigation_1ad051c0954ce548912e308c6836742bda" compoundref="vm___navigation_8cpp" startline="412" endline="442">AllMessagesReceivedAtLeastOnce</references>
      </memberdef>
      <memberdef kind="function" id="class_v_m___navigation_1a012a5269b3eccb7d5783a5594712bb50" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="common__types_8h_1a1a0d7c4c11a131b0d46ebcb64832e293" kindref="member" external="/home/vagrant/airliner/build/reference/default/docs/html/cfe/detailed_design/cfe.tag">osalbool</ref></type>
        <definition>osalbool VM_Navigation::IsTransitionStabilizeValid</definition>
        <argsstring>(void)</argsstring>
        <name>IsTransitionStabilizeValid</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Guard condition on transition to Stabilize state. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Description</title><para>This function determines if is legal to transition to the AutoLoiter state at this time. This is called by the context defined by the #VM_Navigation.sm file and autogenerated to source code by SMC. See the #VM_Navigation.sm file to see the states and transitions.</para></simplesect>
<simplesect kind="par"><title>Assumptions, External Events, and Notes:</title><para>None </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="apps/vm/fsw/src/vm_Navigation.h" line="330" column="1" bodyfile="apps/vm/fsw/src/vm_Navigation.cpp" bodystart="584" bodyend="588"/>
        <references refid="class_v_m___navigation_1ad051c0954ce548912e308c6836742bda" compoundref="vm___navigation_8cpp" startline="412" endline="442">AllMessagesReceivedAtLeastOnce</references>
      </memberdef>
      <memberdef kind="function" id="class_v_m___navigation_1ad628f1e4b0c7e942dbe734e6eb64486b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="common__types_8h_1a1a0d7c4c11a131b0d46ebcb64832e293" kindref="member" external="/home/vagrant/airliner/build/reference/default/docs/html/cfe/detailed_design/cfe.tag">osalbool</ref></type>
        <definition>osalbool VM_Navigation::IsTransitionRattitudeValid</definition>
        <argsstring>(void)</argsstring>
        <name>IsTransitionRattitudeValid</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Guard condition on transition to Rattitude state. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Description</title><para>This function determines if is legal to transition to the Rattitude state at this time. This is called by the context defined by the #VM_Navigation.sm file and autogenerated to source code by SMC. See the #VM_Navigation.sm file to see the states and transitions.</para></simplesect>
<simplesect kind="par"><title>Assumptions, External Events, and Notes:</title><para>None </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="apps/vm/fsw/src/vm_Navigation.h" line="346" column="1" bodyfile="apps/vm/fsw/src/vm_Navigation.cpp" bodystart="597" bodyend="601"/>
        <references refid="class_v_m___navigation_1ad051c0954ce548912e308c6836742bda" compoundref="vm___navigation_8cpp" startline="412" endline="442">AllMessagesReceivedAtLeastOnce</references>
      </memberdef>
      <memberdef kind="function" id="class_v_m___navigation_1afaa2018dd293384a7b51e67573f6e3fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="common__types_8h_1a1a0d7c4c11a131b0d46ebcb64832e293" kindref="member" external="/home/vagrant/airliner/build/reference/default/docs/html/cfe/detailed_design/cfe.tag">osalbool</ref></type>
        <definition>osalbool VM_Navigation::IsTransitionAutoTakeoffValid</definition>
        <argsstring>(void)</argsstring>
        <name>IsTransitionAutoTakeoffValid</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Guard condition on transition to AutoTakeoff state. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Description</title><para>This function determines if is legal to transition to the AutoTakeoff state at this time. This is called by the context defined by the #VM_Navigation.sm file and autogenerated to source code by SMC. See the #VM_Navigation.sm file to see the states and transitions.</para></simplesect>
<simplesect kind="par"><title>Assumptions, External Events, and Notes:</title><para>None </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="apps/vm/fsw/src/vm_Navigation.h" line="362" column="1" bodyfile="apps/vm/fsw/src/vm_Navigation.cpp" bodystart="610" bodyend="614"/>
        <references refid="class_v_m___navigation_1ad051c0954ce548912e308c6836742bda" compoundref="vm___navigation_8cpp" startline="412" endline="442">AllMessagesReceivedAtLeastOnce</references>
      </memberdef>
      <memberdef kind="function" id="class_v_m___navigation_1a1e575e19e60c88ea22a48815a630c21d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="common__types_8h_1a1a0d7c4c11a131b0d46ebcb64832e293" kindref="member" external="/home/vagrant/airliner/build/reference/default/docs/html/cfe/detailed_design/cfe.tag">osalbool</ref></type>
        <definition>osalbool VM_Navigation::IsTransitionAutoLandValid</definition>
        <argsstring>(void)</argsstring>
        <name>IsTransitionAutoLandValid</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Guard condition on transition to AutoLand state. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Description</title><para>This function determines if is legal to transition to the AutoLand state at this time. This is called by the context defined by the #VM_Navigation.sm file and autogenerated to source code by SMC. See the #VM_Navigation.sm file to see the states and transitions.</para></simplesect>
<simplesect kind="par"><title>Assumptions, External Events, and Notes:</title><para>None </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="apps/vm/fsw/src/vm_Navigation.h" line="378" column="1" bodyfile="apps/vm/fsw/src/vm_Navigation.cpp" bodystart="623" bodyend="627"/>
        <references refid="class_v_m___navigation_1ad051c0954ce548912e308c6836742bda" compoundref="vm___navigation_8cpp" startline="412" endline="442">AllMessagesReceivedAtLeastOnce</references>
      </memberdef>
      <memberdef kind="function" id="class_v_m___navigation_1ad051c0954ce548912e308c6836742bda" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="common__types_8h_1a1a0d7c4c11a131b0d46ebcb64832e293" kindref="member" external="/home/vagrant/airliner/build/reference/default/docs/html/cfe/detailed_design/cfe.tag">osalbool</ref></type>
        <definition>osalbool VM_Navigation::AllMessagesReceivedAtLeastOnce</definition>
        <argsstring>(void)</argsstring>
        <name>AllMessagesReceivedAtLeastOnce</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Return true if all messages have been received at least once. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Description</title><para>This function will return true if all the subscribed messages have been received at least once.</para></simplesect>
<simplesect kind="par"><title>Assumptions, External Events, and Notes:</title><para>None </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="apps/vm/fsw/src/vm_Navigation.h" line="391" column="1" bodyfile="apps/vm/fsw/src/vm_Navigation.cpp" bodystart="412" bodyend="442"/>
        <references refid="class_v_m___navigation_1a29694887116a452d6958747616437f51" compoundref="vm___navigation_8h" startline="452">App</references>
        <references refid="cfe__evs_8h_1a9bc5a36744c852941ce1aa5e07932ff4">CFE_EVS_INFORMATION</references>
        <references refid="cfe__evs_8c_1aab8630735c7be46fb4162323a112d298">CFE_EVS_SendEvent</references>
        <references refid="class_v_m_1a62f5965564d193031a73df3a63515767" compoundref="vm__app_8h" startline="169">VM::SensorAccelMsg</references>
        <references refid="class_v_m_1ac1dbcc4bb47165cfa686860ebe464eff" compoundref="vm__app_8h" startline="175">VM::SensorCombinedMsg</references>
        <references refid="class_v_m_1ad5719da53147146863d1e15f189118fc" compoundref="vm__app_8h" startline="149">VM::SensorGyroMsg</references>
        <references refid="class_v_m_1ada27d75c7daa3fef2027f433f955471e" compoundref="vm__app_8h" startline="147">VM::SensorMagMsg</references>
        <references refid="class_v_m_1aa0727b35c392b4da880700f496c11b93" compoundref="vm__app_8h" startline="157">VM::VehicleAttitudeMsg</references>
        <references refid="class_v_m_1a5062611ba3bc6f7ba3ca3f9fa5ab83ad" compoundref="vm__app_8h" startline="179">VM::VehicleGlobalPositionMsg</references>
        <references refid="class_v_m_1a74414678084bd6a7a707f4a81bfe5a38" compoundref="vm__app_8h" startline="181">VM::VehicleGpsPositionMsg</references>
        <references refid="class_v_m_1a95dde4ee20a78a080f15ca536b3b53b5" compoundref="vm__app_8h" startline="161">VM::VehicleLandDetectedMsg</references>
        <references refid="class_v_m_1a59a819087efb4519dd772eebc96e81af" compoundref="vm__app_8h" startline="159">VM::VehicleLocalPositionMsg</references>
        <references refid="vm__events_8h_1a4d913fdce483003fc71e5df6d309e930a0601595e69ccfb3beef110901219a032" compoundref="vm__events_8h" startline="800">VM_SEN_NOT_READY_INFO_EID</references>
        <referencedby refid="class_v_m___navigation_1a1e575e19e60c88ea22a48815a630c21d" compoundref="vm___navigation_8cpp" startline="623" endline="627">IsTransitionAutoLandValid</referencedby>
        <referencedby refid="class_v_m___navigation_1aa70d9c1ddb35928ac66799d7f03c6701" compoundref="vm___navigation_8cpp" startline="558" endline="562">IsTransitionAutoLoiterValid</referencedby>
        <referencedby refid="class_v_m___navigation_1afaa2018dd293384a7b51e67573f6e3fb" compoundref="vm___navigation_8cpp" startline="610" endline="614">IsTransitionAutoTakeoffValid</referencedby>
        <referencedby refid="class_v_m___navigation_1ad628f1e4b0c7e942dbe734e6eb64486b" compoundref="vm___navigation_8cpp" startline="597" endline="601">IsTransitionRattitudeValid</referencedby>
        <referencedby refid="class_v_m___navigation_1a2fe51a739ee25c7bb32463a93959927a" compoundref="vm___navigation_8cpp" startline="571" endline="575">IsTransitionRtlValid</referencedby>
        <referencedby refid="class_v_m___navigation_1a012a5269b3eccb7d5783a5594712bb50" compoundref="vm___navigation_8cpp" startline="584" endline="588">IsTransitionStabilizeValid</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_v_m___navigation_1afffab3a843ab5d722bb8a88c2ddafd7c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="common__types_8h_1a1a0d7c4c11a131b0d46ebcb64832e293" kindref="member" external="/home/vagrant/airliner/build/reference/default/docs/html/cfe/detailed_design/cfe.tag">osalbool</ref></type>
        <definition>osalbool VM_Navigation::IsStabilizationRequired</definition>
        <argsstring>(void)</argsstring>
        <name>IsStabilizationRequired</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Return true if stabilization is required. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Description</title><para>This function will return true if the current mode requires stabilization.</para></simplesect>
<simplesect kind="par"><title>Assumptions, External Events, and Notes:</title><para>None </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="apps/vm/fsw/src/vm_Navigation.h" line="404" column="1" bodyfile="apps/vm/fsw/src/vm_Navigation.cpp" bodystart="451" bodyend="455"/>
        <referencedby refid="class_v_m___navigation_1a3a86cc01ad0b6dc6196a15d61b4d2517" compoundref="vm___navigation_8cpp" startline="267" endline="403">DoAction</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_v_m___navigation_1a967fd598668462dcdf088de64352eeba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="common__types_8h_1a1a0d7c4c11a131b0d46ebcb64832e293" kindref="member" external="/home/vagrant/airliner/build/reference/default/docs/html/cfe/detailed_design/cfe.tag">osalbool</ref></type>
        <definition>osalbool VM_Navigation::IsLocalPositionIsValid</definition>
        <argsstring>(void)</argsstring>
        <name>IsLocalPositionIsValid</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Return true the Local Position message is valid. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Description</title><para>This function will return true if the Local Position is valid.</para></simplesect>
<simplesect kind="par"><title>Assumptions, External Events, and Notes:</title><para>None </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="apps/vm/fsw/src/vm_Navigation.h" line="416" column="1" bodyfile="apps/vm/fsw/src/vm_Navigation.cpp" bodystart="636" bodyend="639"/>
        <references refid="class_v_m___navigation_1a29694887116a452d6958747616437f51" compoundref="vm___navigation_8h" startline="452">App</references>
        <references refid="class_v_m_1a7a39a88bbd2069d287aaf4bd9fd95eec" compoundref="vm__app_8h" startline="205">VM::HkTlm</references>
        <references refid="struct_v_m___hk_tlm__t_1abb8ae3f48ee85a4bb380a84a9c6b6b17" compoundref="vm__msg_8h" startline="815">VM_HkTlm_t::LocalPositionIsValid</references>
      </memberdef>
      <memberdef kind="function" id="class_v_m___navigation_1ad54ec78e63a576b382cdbf328e8cd526" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="common__types_8h_1a1a0d7c4c11a131b0d46ebcb64832e293" kindref="member" external="/home/vagrant/airliner/build/reference/default/docs/html/cfe/detailed_design/cfe.tag">osalbool</ref></type>
        <definition>osalbool VM_Navigation::IsVehicleArmed</definition>
        <argsstring>(void)</argsstring>
        <name>IsVehicleArmed</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Return true the the vehicle is armed. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Description</title><para>This function will return true if the vehicle is armed.</para></simplesect>
<simplesect kind="par"><title>Assumptions, External Events, and Notes:</title><para>None </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="apps/vm/fsw/src/vm_Navigation.h" line="428" column="1" bodyfile="apps/vm/fsw/src/vm_Navigation.cpp" bodystart="648" bodyend="651"/>
        <references refid="class_v_m___navigation_1a29694887116a452d6958747616437f51" compoundref="vm___navigation_8h" startline="452">App</references>
        <references refid="class_v_m_1af3cb2f0cff48cf91124981920b7296b3" compoundref="vm__app_8cpp" startline="1342" endline="1345">VM::IsVehicleArmed</references>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="46">
        <label>VM_StatusFlags</label>
        <link refid="struct_v_m___status_flags"/>
      </node>
      <node id="41">
        <label>VM_ConfigTbl_t</label>
        <link refid="struct_v_m___config_tbl__t"/>
      </node>
      <node id="38">
        <label>VM</label>
        <link refid="class_v_m"/>
        <childnode refid="39" relation="private-inheritance">
        </childnode>
        <childnode refid="40" relation="usage">
          <edgelabel>ConfigTlm</edgelabel>
        </childnode>
        <childnode refid="42" relation="usage">
          <edgelabel>ArmingSM</edgelabel>
        </childnode>
        <childnode refid="41" relation="usage">
          <edgelabel>ConfigTblPtr</edgelabel>
        </childnode>
        <childnode refid="43" relation="usage">
          <edgelabel>m_caws</edgelabel>
        </childnode>
        <childnode refid="44" relation="usage">
          <edgelabel>HkTlm</edgelabel>
        </childnode>
        <childnode refid="37" relation="usage">
          <edgelabel>NavigationSM</edgelabel>
        </childnode>
      </node>
      <node id="40">
        <label>VM_ConfigTlm_t</label>
        <link refid="struct_v_m___config_tlm__t"/>
        <childnode refid="41" relation="usage">
          <edgelabel>ConfigTbl</edgelabel>
        </childnode>
      </node>
      <node id="45">
        <label>VM_Modes</label>
        <link refid="struct_v_m___modes"/>
      </node>
      <node id="42">
        <label>VM_Arming</label>
        <link refid="class_v_m___arming"/>
        <childnode refid="38" relation="usage">
          <edgelabel>App</edgelabel>
        </childnode>
      </node>
      <node id="37">
        <label>VM_Navigation</label>
        <link refid="class_v_m___navigation"/>
        <childnode refid="38" relation="usage">
          <edgelabel>App</edgelabel>
        </childnode>
      </node>
      <node id="43">
        <label>CautionWarningHelper</label>
        <link refid="class_caution_warning_helper"/>
      </node>
      <node id="39">
        <label>ParamsConsumer</label>
      </node>
      <node id="44">
        <label>VM_HkTlm_t</label>
        <link refid="struct_v_m___hk_tlm__t"/>
        <childnode refid="45" relation="usage">
          <edgelabel>PreviousModes</edgelabel>
        </childnode>
        <childnode refid="46" relation="usage">
          <edgelabel>StatusFlags</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="apps/vm/fsw/src/vm_Navigation.h" line="43" column="1" bodyfile="apps/vm/fsw/src/vm_Navigation.h" bodystart="42" bodyend="453"/>
    <listofallmembers>
      <member refid="class_v_m___navigation_1ad051c0954ce548912e308c6836742bda" prot="public" virt="non-virtual"><scope>VM_Navigation</scope><name>AllMessagesReceivedAtLeastOnce</name></member>
      <member refid="class_v_m___navigation_1a29694887116a452d6958747616437f51" prot="public" virt="non-virtual"><scope>VM_Navigation</scope><name>App</name></member>
      <member refid="class_v_m___navigation_1a3a86cc01ad0b6dc6196a15d61b4d2517" prot="public" virt="non-virtual"><scope>VM_Navigation</scope><name>DoAction</name></member>
      <member refid="class_v_m___navigation_1a02ee1cd7a3c1bdc67ba9c7b58e867214" prot="public" virt="non-virtual"><scope>VM_Navigation</scope><name>EnteredAcrobatic</name></member>
      <member refid="class_v_m___navigation_1a4ac22b983d887617274319cb138ce55d" prot="public" virt="non-virtual"><scope>VM_Navigation</scope><name>EnteredAltitudeControl</name></member>
      <member refid="class_v_m___navigation_1a7dbd13733dd902a5adf39ef074fac4cd" prot="public" virt="non-virtual"><scope>VM_Navigation</scope><name>EnteredAutoLand</name></member>
      <member refid="class_v_m___navigation_1a9234dc20303e05d9ef8ae8245194c949" prot="public" virt="non-virtual"><scope>VM_Navigation</scope><name>EnteredAutoLoiter</name></member>
      <member refid="class_v_m___navigation_1a59e38d155581f49b02607a527c0d35fa" prot="public" virt="non-virtual"><scope>VM_Navigation</scope><name>EnteredAutoReturnToLaunch</name></member>
      <member refid="class_v_m___navigation_1ae835334913baecd510c19b02ae728f43" prot="public" virt="non-virtual"><scope>VM_Navigation</scope><name>EnteredAutoTakeoff</name></member>
      <member refid="class_v_m___navigation_1a0d23c35b731387adf4c862876f26e637" prot="public" virt="non-virtual"><scope>VM_Navigation</scope><name>EnteredManual</name></member>
      <member refid="class_v_m___navigation_1ab86cd11821815cbd78635b1508b7c4e9" prot="public" virt="non-virtual"><scope>VM_Navigation</scope><name>EnteredPositionControl</name></member>
      <member refid="class_v_m___navigation_1ad63bff999b235f4f8b1b9965d21af833" prot="public" virt="non-virtual"><scope>VM_Navigation</scope><name>EnteredRattitude</name></member>
      <member refid="class_v_m___navigation_1a9400ae2e2059d6edfc778f77d2bcd1b6" prot="public" virt="non-virtual"><scope>VM_Navigation</scope><name>EnteredStabilize</name></member>
      <member refid="class_v_m___navigation_1a4fd947ec06d2c682f41442a022dfe272" prot="public" virt="non-virtual"><scope>VM_Navigation</scope><name>FSM</name></member>
      <member refid="class_v_m___navigation_1aa3e57f90d29ed5a55eb4da873e8f3ebb" prot="public" virt="non-virtual"><scope>VM_Navigation</scope><name>GetCurrentStateID</name></member>
      <member refid="class_v_m___navigation_1a967fd598668462dcdf088de64352eeba" prot="public" virt="non-virtual"><scope>VM_Navigation</scope><name>IsLocalPositionIsValid</name></member>
      <member refid="class_v_m___navigation_1afffab3a843ab5d722bb8a88c2ddafd7c" prot="public" virt="non-virtual"><scope>VM_Navigation</scope><name>IsStabilizationRequired</name></member>
      <member refid="class_v_m___navigation_1a53917dd81954b9a3b261e29c729776ec" prot="public" virt="non-virtual"><scope>VM_Navigation</scope><name>IsTransitionAcrobaticValid</name></member>
      <member refid="class_v_m___navigation_1a3ef977ac33d15b97173cee4ef99aae03" prot="public" virt="non-virtual"><scope>VM_Navigation</scope><name>IsTransitionAltCtlValid</name></member>
      <member refid="class_v_m___navigation_1a1e575e19e60c88ea22a48815a630c21d" prot="public" virt="non-virtual"><scope>VM_Navigation</scope><name>IsTransitionAutoLandValid</name></member>
      <member refid="class_v_m___navigation_1aa70d9c1ddb35928ac66799d7f03c6701" prot="public" virt="non-virtual"><scope>VM_Navigation</scope><name>IsTransitionAutoLoiterValid</name></member>
      <member refid="class_v_m___navigation_1afaa2018dd293384a7b51e67573f6e3fb" prot="public" virt="non-virtual"><scope>VM_Navigation</scope><name>IsTransitionAutoTakeoffValid</name></member>
      <member refid="class_v_m___navigation_1aa71f7ec0293dff0e61469c6b1d32cef8" prot="public" virt="non-virtual"><scope>VM_Navigation</scope><name>IsTransitionPosCtlValid</name></member>
      <member refid="class_v_m___navigation_1ad628f1e4b0c7e942dbe734e6eb64486b" prot="public" virt="non-virtual"><scope>VM_Navigation</scope><name>IsTransitionRattitudeValid</name></member>
      <member refid="class_v_m___navigation_1a2fe51a739ee25c7bb32463a93959927a" prot="public" virt="non-virtual"><scope>VM_Navigation</scope><name>IsTransitionRtlValid</name></member>
      <member refid="class_v_m___navigation_1a012a5269b3eccb7d5783a5594712bb50" prot="public" virt="non-virtual"><scope>VM_Navigation</scope><name>IsTransitionStabilizeValid</name></member>
      <member refid="class_v_m___navigation_1ad54ec78e63a576b382cdbf328e8cd526" prot="public" virt="non-virtual"><scope>VM_Navigation</scope><name>IsVehicleArmed</name></member>
      <member refid="class_v_m___navigation_1a23090fd33f0d37235735b2416d39edf6" prot="protected" virt="non-virtual"><scope>VM_Navigation</scope><name>VM_Navigation</name></member>
      <member refid="class_v_m___navigation_1a44ff93df24784f5aef30ae1bbfd881dc" prot="public" virt="non-virtual"><scope>VM_Navigation</scope><name>VM_Navigation</name></member>
      <member refid="class_v_m___navigation_1afb2c1203c401ed2ec6803fc6cbfe42d4" prot="public" virt="non-virtual"><scope>VM_Navigation</scope><name>~VM_Navigation</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
