<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="cfscsopr" kind="page">
    <compoundname>cfscsopr</compoundname>
    <title>CFS Checksum Operation</title>
    <detaileddescription>
<para><heading level="2">Initialization</heading>
</para><para>Upon initialization CS will initialize its global memory area and proceed to populate its results tables (which are dump only tables) from the default definition tables located in non-volatile memory. Each table has a corresponding setting in the platform configuration of the enable/disabled state of each table, the OS code segments and cFE Core for checksumming. These values are used for at initialization for power-on reset or if CS is not configured to preserve states on via the CDS they will also be used for processor-reset. If CS is configured to preserve enable state of the tables on a proc reset, states from CDS will be used upon processor reset.</para><para>If the default definition tables do not pass table validation, or they are nonexistent, blank definition tables are used from CS&apos;s memory and the table is disabled for checksumming. The purpose of loading a blank table from memory is so that another table can be loaded from the ground and be functional. The other purpose of loading a blank table from memory is so that if the table is accidentally enabled for checksumming, the table pointers for the results table point to good data.</para><para>Since CS cannot operate without the operating system or the cFE core, CS automatically sets up checksumming for those areas and enables them for checksumming.</para><para>Next: <ref refid="cfscsreq" kindref="compound">CFS Checksum Requirements</ref> <linebreak/>
 Prev: <ref refid="cfscsovr" kindref="compound">CFS Checksum Overview</ref> </para>    </detaileddescription>
  </compounddef>
</doxygen>
