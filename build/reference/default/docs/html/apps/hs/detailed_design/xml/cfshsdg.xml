<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="cfshsdg" kind="page">
    <compoundname>cfshsdg</compoundname>
    <title>Health and Safety Deployment Guide</title>
    <detaileddescription>
<para>The Health and Safety application cycle may be any length of time, but typically 1 Hz is chosen as the desired rate. The cycle time is important when considering all of the configuration parameters and directly affects the values that should be chosen for Application Monitoring. The cycle is initiated by pending on a Software Bus pipe for a packet with the <ref refid="hs__msgids_8h_1a6c677a83e7aa3eb463d6b6d68585bd86" kindref="member">HS_WAKEUP_MID</ref> Message ID. This pend may be forever, or may be set to a specific timeout value using the <ref refid="hs__platform__cfg_8h_1a60e9c8756ae0458d8650a95f7eac2abb" kindref="member">HS_WAKEUP_TIMEOUT</ref> configuration parameter to make sure HS runs even if no message is received. This configuration parameter can even be used to make HS run independently if no wakeup message is expected. Additionally, there is a configuration parameter called <ref refid="hs__platform__cfg_8h_1a8a4d90c5cf6cbce9ddd6ce4081af0235" kindref="member">HS_POST_PROCESSING_DELAY</ref> which will cause a task delay for the configured number of milliseconds after the HS processing cycle is over, before it pends on the Software Bus for the next packet. Just as a general note, configuration of how HS should run should be carefully considered in the context of the system it will be run on and the desires of the project. As some examples: <linebreak/>
</para><para>On a system with a fairly reliable schedule, the easiest method for setting up HS to run could be to add the HS_WAKEUP_MID to the Scheduler (SCH) Application to be sent once per second, setting HS_POST_PROCESSING_DELAY to 0 and HS_WAKEUP_TIMEOUT to <ref refid="cfe__sb_8h_1acc9e6f66cd026d1c987c4c3de827366f" kindref="member" external="/home/vagrant/airliner/build/reference/default/docs/html/cfe/detailed_design/cfe.tag">CFE_SB_PEND_FOREVER</ref> (or to greater than a second if assurance that HS runs is desired). <linebreak/>
</para><para>On a subsystem where scheduling may be reset by an outside source or delayed by a resource intensive task, this design may not be as desirable as it could interfere with Application Monitoring. In such a case, either an alternate, more reliable, source could be used for 1 Hz delivery, or HS_POST_PROCESSING_DELAY can be used to assure that the cycle time is not too short in cases of a reset. <linebreak/>
</para><para>If more independence of HS is desired, HS_POST_PROCESSING_DELAY could be used for scheduling with HS_WAKEUP_TIMEOUT set to <ref refid="cfe__sb_8h_1a0c0ca8cca37a759bd5e68e81e73ce67a" kindref="member" external="/home/vagrant/airliner/build/reference/default/docs/html/cfe/detailed_design/cfe.tag">CFE_SB_POLL</ref> (though this method would not have high timing accuracy). <linebreak/>
</para><para>Each of the Health and Safety Application tables is sized by a configuration parameter. It is probably a good idea to leave a reasonable number of spare entries. Remember that applications can appear in the Application Monitor Table more than once, and events can appear in the Event Monitor Table more than once as well, making complex actions possible (provided there are enough table entries to use). <linebreak/>
</para><para>Special consideration needs to be given to several configuration parameters: <linebreak/>
 <itemizedlist>
<listitem>
<para><ref refid="hs__platform__cfg_8h_1a47092ad4c7dea3220588679e1e4cd734" kindref="member">HS_EVENT_PIPE_DEPTH</ref> - This parameter determines how many events can be stored for Event Monitoring each cycle, and so should be deep enough to capture the maximum number of expected events. <linebreak/>
 </para></listitem>
<listitem>
<para><ref refid="hs__platform__cfg_8h_1ae0de3889e01f7ec7043b8c57596ced38" kindref="member">HS_STARTUP_SYNC_TIMEOUT</ref> - This parameter needs to be set so that HS will start after all applications being monitored. <linebreak/>
 </para></listitem>
<listitem>
<para><ref refid="hs__platform__cfg_8h_1a7eec630401f001ca650fce23548eaf41" kindref="member">HS_MAX_RESTART_ACTIONS</ref> - This parameter needs to be set with consideration to #CFE_ES_MAX_PROCESSOR_RESETS as if Executive Services performs a Power-On Reset, the count of resets stored by HS will be reset. (This may be desirable if HS reset limiting is not desired) <linebreak/>
 </para></listitem>
</itemizedlist>
</para><para><verbatim>   &lt;H3&gt;Health and Safety CPU Utilization Monitoring Customization&lt;/H3&gt;
   The Health and Safety application contains the file \c hs_custom.c which can be adapted to take advantage of platform specific functionality concerning CPU Utilization Monitoring. The delivered implementation contains a generic version which should work well on a variety of platforms, however it may be possible to obtain better accuracy or increase processing efficiency by modifying the contents. As the custom utilization monitoring function is called every HS cycle, and an interface to add additional commands is included, it could even be used as a way to add other capabilities to the HS application (e.g. offboard watchdog servicing, or floating point exception testing) instead of creating an entirely separate application. &lt;BR&gt;
</verbatim></para><para>This customizable section of code includes five required functions for interface purposes: <itemizedlist>
<listitem>
<para><ref refid="hs__custom_8h_1ac376ee15b6d4d2dba69e54cb0b62a8b4" kindref="member">HS_CustomInit</ref> </para></listitem>
<listitem>
<para><ref refid="hs__custom_8h_1aaf79d7975ddc806b2efe2a8e2e96bc56" kindref="member">HS_CustomCommands</ref> </para></listitem>
<listitem>
<para><ref refid="hs__custom_8h_1a031f684d419609073afbaebd1f1de416" kindref="member">HS_CustomMonitorUtilization</ref> </para></listitem>
<listitem>
<para><ref refid="hs__custom_8h_1a44496200bcecd1aeb4a1adb7e7fbdd16" kindref="member">HS_CustomGetUtil</ref> </para></listitem>
<listitem>
<para><ref refid="hs__custom_8h_1a6d8edf353c5ff8d7d9dc55101fa0a050" kindref="member">HS_CustomCleanup</ref> </para></listitem>
</itemizedlist>
<verbatim>  The remainder of this guide assumes that the generic hs_custom.c is being used when describing how to use and calibrate CPU Utilization Monitoring. &lt;BR&gt;

   &lt;H3&gt;Health and Safety CPU Utilization Monitoring Calibration&lt;/H3&gt;



   The first step in CPU Utilization Monitoring Calibration is to determine how many Idle Child Task cycles there are in a second (in the default case: one interval is one second). This is done by setting the Utilization Diagnostics Mask by command: for example a command parameter of 0xFF would record the time every 256 cycles. These times are stored in a circular buffer of a size determined by #HS_UTIL_TIME_DIAG_ARRAY_POWER (increasing this parameter will provide more samples, but use more memory). The Report Diagnostics command can then be sent (after a sufficient time to let the circular buffer perform a full cycle) to generate an event message containing the mask, and the four shortest intervals between time records, as well as how frequently those timed intervals occurred. Usually the desired value is the weighted average (based on frequencies) of the two lowest times, though common sense should be used as a sanity check. The Report Diagnostics command can be used multiple times to report additional captured times (the capturing continually runs through the circular buffer). The recorded time uses the microseconds field of #CFE_PSP_GetTime to determine the time, so the source of that timer will determine the precision and accuracy of the timing data. To calibrate the time properly, two values must be used so that the overhead associated with recording the time is cancelled out (so for example, capturing time at 256 and 128 cycles, and then finding the difference will give the real time for performing 128 cycles). When done collecting data, reset the mask to 0xFFFFFFFF. This makes sure that no timing data is captured, and so all cycles are of equal length.&lt;BR&gt;

   Good rates at which to record depend on the timing resolution and platform speed. Time is recorded when the mask value is all 1s, so the mask values used should be of the form 2^n - 1 (e.g. 255 (0xFF), 2047 (Ox7FF)) to capture once out of 2^n cycles. As the calibration is occurring while the system is running, it is necessary to have large enough chunks of idle time to capture several times within a chunk; with high resolution timers on a fast platform, collecting good data may be possible even when the processor is mostly utilized, but with lower time resolution special testing may have to be done with other applications absent. Reported times of 0 imply that the mask is much too small relative to the resolution (though if all times are 0, the mask may be too large such that no times have been recorded, or that #CFE_PSP_GetTime was not configured properly for the platform). If the frequencies of all the lowest times are relatively low, it may imply that the mask is too large relative to the idle time blocks, or that CFE_PSP_GetTime is not running in constant time and the resolution is high enough to be affected by that (in which case either the lowest, or average of several lowest times can be used). Once the timing information has been acquired, it can be used to determine the time per Idle Child Task cycle, and from there, the number of Idle Child Task cycles per second.&lt;BR&gt;

   On some platforms calibration can also be done using a logic analyzer with the performance monitor using ID #HS_IDLETASK_PERF_ID, potentially supplying much higher time resolution. In addition this marker can also be used by dumping performance data with different masks set which may (or may not) provide higher resolution timing data as the performance monitor uses a different timer.&lt;BR&gt;

   The second step is to choose the #HS_UTIL_PER_INTERVAL_TOTAL value: this is equivalent to one full interval of CPU utilization, so if a value of 100 was used, then the value reported in telemetry would be the percentage. Alternatively a higher value (10000 or 100000) could provide higher resolution information if the calibration is of high enough precision and accuracy. The calibration is then configured using the following equation: &lt;BR&gt;

   HS_UTIL_PER_INTERVAL_TOTAL =  (((Max Number of Idle Task Cycles per Second * #HS_UTIL_CONV_MULT1 ) / #HS_UTIL_CONV_DIV ) * #HS_UTIL_CONV_MULT2) &lt;BR&gt;

   The multiplication and division parameters should be set so as to prevent overflows (of 32 bit values) and using any other platform considerations. These values can be set by command, but they also exist as configuration parameters so that if the values are known at compile time for a specific platform, no further calibration would be necessary.&lt;BR&gt;

   Also, please be aware that HS has a performance ID, #HS_APPMAIN_PERF_ID, that keeps track of the performance of the HS app.    
</verbatim></para><para>Next: <ref refid="cfshscmds" kindref="compound">Health and Safety Commands</ref> <linebreak/>
 Prev: <ref refid="cfshsreq" kindref="compound">Health and Safety Requirements</ref> </para>    </detaileddescription>
  </compounddef>
</doxygen>
