<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="class_l_d" kind="class" language="C++" prot="public">
    <compoundname>LD</compoundname>
    <includes refid="ld__app_8h" local="no">ld_app.h</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="class_l_d_1ac88af03e4176addaa0bfe62edf595fd1" prot="public" static="no" mutable="no">
        <type><ref refid="cfe__sb_8h_1a9e7147bf0798bb7a3ebd165bdbdf320f" kindref="member" external="/home/vagrant/airliner/build/reference/default/docs/html/cfe/detailed_design/cfe.tag">CFE_SB_PipeId_t</ref></type>
        <definition>CFE_SB_PipeId_t LD::SchPipeId</definition>
        <argsstring></argsstring>
        <name>SchPipeId</name>
        <briefdescription>
<para>Scheduling Pipe ID. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="apps/ld/fsw/src/ld_app.h" line="136" column="1" bodyfile="apps/ld/fsw/src/ld_app.h" bodystart="136" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_l_d_1ac480948c008f5acee8a23e8d981658e0" prot="public" static="no" mutable="no">
        <type><ref refid="cfe__sb_8h_1a9e7147bf0798bb7a3ebd165bdbdf320f" kindref="member" external="/home/vagrant/airliner/build/reference/default/docs/html/cfe/detailed_design/cfe.tag">CFE_SB_PipeId_t</ref></type>
        <definition>CFE_SB_PipeId_t LD::CmdPipeId</definition>
        <argsstring></argsstring>
        <name>CmdPipeId</name>
        <briefdescription>
<para>Command Pipe ID. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="apps/ld/fsw/src/ld_app.h" line="139" column="1" bodyfile="apps/ld/fsw/src/ld_app.h" bodystart="139" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_l_d_1aed47b65bed2f59a27db112b737aee54c" prot="public" static="no" mutable="no">
        <type><ref refid="common__types_8h_1a9560e25c315bae45d1ed4e2ce49ce55a" kindref="member" external="/home/vagrant/airliner/build/reference/default/docs/html/cfe/detailed_design/cfe.tag">uint32</ref></type>
        <definition>uint32 LD::uiRunStatus</definition>
        <argsstring></argsstring>
        <name>uiRunStatus</name>
        <briefdescription>
<para>Task Run Status. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="apps/ld/fsw/src/ld_app.h" line="143" column="1" bodyfile="apps/ld/fsw/src/ld_app.h" bodystart="143" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_l_d_1a2631a6ee8285196d8e6ff1728c40bacb" prot="public" static="no" mutable="no">
        <type><ref refid="cfe__tbl_8h_1ac0bed00263988e1afca2f147c03bfd03" kindref="member" external="/home/vagrant/airliner/build/reference/default/docs/html/cfe/detailed_design/cfe.tag">CFE_TBL_Handle_t</ref></type>
        <definition>CFE_TBL_Handle_t LD::ConfigTblHdl</definition>
        <argsstring></argsstring>
        <name>ConfigTblHdl</name>
        <briefdescription>
<para>Config Table Handle. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="apps/ld/fsw/src/ld_app.h" line="147" column="1" bodyfile="apps/ld/fsw/src/ld_app.h" bodystart="147" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_l_d_1a53e4732b2782e7ca2948089b0d9469cd" prot="public" static="no" mutable="no">
        <type><ref refid="struct_l_d___config_tbl__t" kindref="compound">LD_ConfigTbl_t</ref> *</type>
        <definition>LD_ConfigTbl_t* LD::ConfigTblPtr</definition>
        <argsstring></argsstring>
        <name>ConfigTblPtr</name>
        <briefdescription>
<para>Config Table Pointer. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="apps/ld/fsw/src/ld_app.h" line="150" column="1" bodyfile="apps/ld/fsw/src/ld_app.h" bodystart="150" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_l_d_1a21fcbd078fabaf6b4074d7ca4f9e9197" prot="public" static="no" mutable="no">
        <type>PX4_VehicleLandDetectedMsg_t</type>
        <definition>PX4_VehicleLandDetectedMsg_t LD::VehicleLandDetectedMsg</definition>
        <argsstring></argsstring>
        <name>VehicleLandDetectedMsg</name>
        <initializer>= {}</initializer>
        <briefdescription>
<para>Output Data published at the end of cycle. </para>        </briefdescription>
        <detaileddescription>
<para>The vehicle land detected message </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="apps/ld/fsw/src/ld_app.h" line="154" column="1" bodyfile="apps/ld/fsw/src/ld_app.h" bodystart="154" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_l_d_1a207ae3a136ba3ae63361d3671d8ed034" prot="public" static="no" mutable="no">
        <type><ref refid="struct_l_d___hk_tlm__t" kindref="compound">LD_HkTlm_t</ref></type>
        <definition>LD_HkTlm_t LD::HkTlm</definition>
        <argsstring></argsstring>
        <name>HkTlm</name>
        <briefdescription>
<para>Housekeeping Telemetry for downlink. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="apps/ld/fsw/src/ld_app.h" line="158" column="1" bodyfile="apps/ld/fsw/src/ld_app.h" bodystart="158" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_l_d_1ac8485c0bd0557eb26030c168b2b6db39" prot="public" static="no" mutable="no">
        <type><ref refid="struct_l_d___current_value_table__t" kindref="compound">LD_CurrentValueTable_t</ref></type>
        <definition>LD_CurrentValueTable_t LD::CVT</definition>
        <argsstring></argsstring>
        <name>CVT</name>
        <initializer>= {}</initializer>
        <briefdescription>
<para>Current Value Table. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="apps/ld/fsw/src/ld_app.h" line="161" column="1" bodyfile="apps/ld/fsw/src/ld_app.h" bodystart="161" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_l_d_1a58d5ae5c2e0bd8d258d3fdabc97881fd" prot="public" static="no" mutable="no">
        <type><ref refid="ld__app_8h_1af70e39ca71dd98143e8be4ce8c165059" kindref="member">LandDetectionState</ref></type>
        <definition>LandDetectionState LD::state</definition>
        <argsstring></argsstring>
        <name>state</name>
        <initializer>= {}</initializer>
        <briefdescription>
<para>The land detection state variable. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="apps/ld/fsw/src/ld_app.h" line="164" column="1" bodyfile="apps/ld/fsw/src/ld_app.h" bodystart="164" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_l_d_1a18c0778ce247894df368c5e96701c74d" prot="public" static="no" mutable="no">
        <type>PX4_VehicleLandDetectedMsg_t</type>
        <definition>PX4_VehicleLandDetectedMsg_t LD::PreviousLandDetectedMsg</definition>
        <argsstring></argsstring>
        <name>PreviousLandDetectedMsg</name>
        <briefdescription>
<para>The previous land detection message. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="apps/ld/fsw/src/ld_app.h" line="167" column="1" bodyfile="apps/ld/fsw/src/ld_app.h" bodystart="167" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_l_d_1a5affd6cd8aa4a83005ccf4b6ed4de2e7" prot="public" static="no" mutable="no">
        <type>StateHistory</type>
        <definition>StateHistory LD::freefall_history</definition>
        <argsstring></argsstring>
        <name>freefall_history</name>
        <initializer>= {<ref refid="common__types_8h_1aa93f0eb578d23995850d61f7d61c55c1" kindref="member" external="/home/vagrant/airliner/build/reference/default/docs/html/cfe/detailed_design/cfe.tag">FALSE</ref>}</initializer>
        <briefdescription>
<para>The free fall state history variable. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="apps/ld/fsw/src/ld_app.h" line="170" column="1" bodyfile="apps/ld/fsw/src/ld_app.h" bodystart="170" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_l_d_1ad1cdcff88aec9d33bcc84fd8d5b4fe1b" prot="public" static="no" mutable="no">
        <type>StateHistory</type>
        <definition>StateHistory LD::landed_history</definition>
        <argsstring></argsstring>
        <name>landed_history</name>
        <initializer>= {<ref refid="common__types_8h_1aa8cecfc5c5c054d2875c03e77b7be15d" kindref="member" external="/home/vagrant/airliner/build/reference/default/docs/html/cfe/detailed_design/cfe.tag">TRUE</ref>}</initializer>
        <briefdescription>
<para>The landed state history variable. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="apps/ld/fsw/src/ld_app.h" line="173" column="1" bodyfile="apps/ld/fsw/src/ld_app.h" bodystart="173" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_l_d_1a3642fa24a47fddaf0186cb4ee8465c7d" prot="public" static="no" mutable="no">
        <type>StateHistory</type>
        <definition>StateHistory LD::ground_contact_history</definition>
        <argsstring></argsstring>
        <name>ground_contact_history</name>
        <initializer>= {<ref refid="common__types_8h_1aa8cecfc5c5c054d2875c03e77b7be15d" kindref="member" external="/home/vagrant/airliner/build/reference/default/docs/html/cfe/detailed_design/cfe.tag">TRUE</ref>}</initializer>
        <briefdescription>
<para>The ground contact state history variable. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="apps/ld/fsw/src/ld_app.h" line="176" column="1" bodyfile="apps/ld/fsw/src/ld_app.h" bodystart="176" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_l_d_1aeef086a0e35cee303d27098af2c96a53" prot="public" static="no" mutable="no">
        <type><ref refid="common__types_8h_1af8b7e3953afcaed80d23a662c9c4574a" kindref="member" external="/home/vagrant/airliner/build/reference/default/docs/html/cfe/detailed_design/cfe.tag">uint64</ref></type>
        <definition>uint64 LD::arming_time</definition>
        <argsstring></argsstring>
        <name>arming_time</name>
        <initializer>= 0</initializer>
        <briefdescription>
<para>The arming time variable. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="apps/ld/fsw/src/ld_app.h" line="179" column="1" bodyfile="apps/ld/fsw/src/ld_app.h" bodystart="179" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_l_d_1a39cb4b8ceb51c62dfb967ae49b18b632" prot="public" static="no" mutable="no">
        <type><ref refid="common__types_8h_1af8b7e3953afcaed80d23a662c9c4574a" kindref="member" external="/home/vagrant/airliner/build/reference/default/docs/html/cfe/detailed_design/cfe.tag">uint64</ref></type>
        <definition>uint64 LD::min_thrust_start</definition>
        <argsstring></argsstring>
        <name>min_thrust_start</name>
        <initializer>= 0</initializer>
        <briefdescription>
<para>The minimum thrust on start variable. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="apps/ld/fsw/src/ld_app.h" line="182" column="1" bodyfile="apps/ld/fsw/src/ld_app.h" bodystart="182" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_l_d_1a63490fc7ccfbfa0e7247732909a87cde" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int LD::publish_counter</definition>
        <argsstring></argsstring>
        <name>publish_counter</name>
        <initializer>= 0</initializer>
        <briefdescription>
<para>The message publish counter variable (acts like a flag for one time event) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="apps/ld/fsw/src/ld_app.h" line="185" column="1" bodyfile="apps/ld/fsw/src/ld_app.h" bodystart="185" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_l_d_1a4b862b40b1e9a83596864e7755aa3d2e" prot="public" static="no" mutable="no">
        <type>float</type>
        <definition>float LD::altitude_max</definition>
        <argsstring></argsstring>
        <name>altitude_max</name>
        <briefdescription>
<para>The maximum altitude value variable. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="apps/ld/fsw/src/ld_app.h" line="188" column="1" bodyfile="apps/ld/fsw/src/ld_app.h" bodystart="188" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_l_d_1a059bf3b0083cdff15e863f86d55aeaf6" prot="public" static="no" mutable="no">
        <type><ref refid="common__types_8h_1af8b7e3953afcaed80d23a662c9c4574a" kindref="member" external="/home/vagrant/airliner/build/reference/default/docs/html/cfe/detailed_design/cfe.tag">uint64</ref></type>
        <definition>uint64 LD::total_flight_time</definition>
        <argsstring></argsstring>
        <name>total_flight_time</name>
        <initializer>= 0</initializer>
        <briefdescription>
<para>The total flight time variable. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="apps/ld/fsw/src/ld_app.h" line="191" column="1" bodyfile="apps/ld/fsw/src/ld_app.h" bodystart="191" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_l_d_1a6bd75d01ff1780cb9f4b3b4fbe1c3b48" prot="public" static="no" mutable="no">
        <type><ref refid="common__types_8h_1af8b7e3953afcaed80d23a662c9c4574a" kindref="member" external="/home/vagrant/airliner/build/reference/default/docs/html/cfe/detailed_design/cfe.tag">uint64</ref></type>
        <definition>uint64 LD::takeoff_time</definition>
        <argsstring></argsstring>
        <name>takeoff_time</name>
        <initializer>= 0</initializer>
        <briefdescription>
<para>The take off time variable. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="apps/ld/fsw/src/ld_app.h" line="194" column="1" bodyfile="apps/ld/fsw/src/ld_app.h" bodystart="194" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_l_d_1a05fbd1e5c0973dfbecac93d16b358ae0" prot="public" static="no" mutable="no">
        <type><ref refid="struct_l_d___diag__t" kindref="compound">LD_Diag_t</ref></type>
        <definition>LD_Diag_t LD::DiagTlm</definition>
        <argsstring></argsstring>
        <name>DiagTlm</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="apps/ld/fsw/src/ld_app.h" line="208" column="1" bodyfile="apps/ld/fsw/src/ld_app.h" bodystart="208" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="class_l_d_1a34b4544ef212b11af64e5f34506a3f7b" prot="public" static="yes" mutable="no">
        <type>constexpr <ref refid="common__types_8h_1a9560e25c315bae45d1ed4e2ce49ce55a" kindref="member" external="/home/vagrant/airliner/build/reference/default/docs/html/cfe/detailed_design/cfe.tag">uint32</ref></type>
        <definition>constexpr uint32 LD::LAND_DETECTOR_UPDATE_RATE_HZ</definition>
        <argsstring></argsstring>
        <name>LAND_DETECTOR_UPDATE_RATE_HZ</name>
        <initializer>= 50</initializer>
        <briefdescription>
<para>Run main land detector loop at this rate in Hz. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="apps/ld/fsw/src/ld_app.h" line="197" column="1" bodyfile="apps/ld/fsw/src/ld_app.h" bodystart="197" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_l_d_1a8392212a9be7686547c439ef3015eed6" prot="public" static="yes" mutable="no">
        <type>constexpr <ref refid="common__types_8h_1af8b7e3953afcaed80d23a662c9c4574a" kindref="member" external="/home/vagrant/airliner/build/reference/default/docs/html/cfe/detailed_design/cfe.tag">uint64</ref></type>
        <definition>constexpr uint64 LD::LAND_DETECTOR_TRIGGER_TIME_US</definition>
        <argsstring></argsstring>
        <name>LAND_DETECTOR_TRIGGER_TIME_US</name>
        <initializer>= 300000</initializer>
        <briefdescription>
<para>Time in us that landing conditions have to hold before triggering a land. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="apps/ld/fsw/src/ld_app.h" line="200" column="1" bodyfile="apps/ld/fsw/src/ld_app.h" bodystart="200" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_l_d_1ae492dcbfab89a15bf63e6ba3d0f196bb" prot="public" static="yes" mutable="no">
        <type>constexpr <ref refid="common__types_8h_1af8b7e3953afcaed80d23a662c9c4574a" kindref="member" external="/home/vagrant/airliner/build/reference/default/docs/html/cfe/detailed_design/cfe.tag">uint64</ref></type>
        <definition>constexpr uint64 LD::GROUND_CONTACT_TRIGGER_TIME_US</definition>
        <argsstring></argsstring>
        <name>GROUND_CONTACT_TRIGGER_TIME_US</name>
        <initializer>= 350000</initializer>
        <briefdescription>
<para>Time in us that ground contact condition have to hold before triggering contact ground. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="apps/ld/fsw/src/ld_app.h" line="203" column="1" bodyfile="apps/ld/fsw/src/ld_app.h" bodystart="203" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_l_d_1a8e69944037430fc0c165cc1d9fb0a217" prot="public" static="yes" mutable="no">
        <type>constexpr <ref refid="common__types_8h_1af8b7e3953afcaed80d23a662c9c4574a" kindref="member" external="/home/vagrant/airliner/build/reference/default/docs/html/cfe/detailed_design/cfe.tag">uint64</ref></type>
        <definition>constexpr uint64 LD::LAND_DETECTOR_ARM_PHASE_TIME_US</definition>
        <argsstring></argsstring>
        <name>LAND_DETECTOR_ARM_PHASE_TIME_US</name>
        <initializer>= 2000000</initializer>
        <briefdescription>
<para>Time interval in us in which wider acceptance thresholds are used after arming. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="apps/ld/fsw/src/ld_app.h" line="206" column="1" bodyfile="apps/ld/fsw/src/ld_app.h" bodystart="206" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_l_d_1a4177ef8e447bfc2bbdbf3566d8261908" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>LD::LD</definition>
        <argsstring>()</argsstring>
        <name>LD</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="apps/ld/fsw/src/ld_app.h" line="132" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_l_d_1aefe1fd083b5ee587d99641cb8c97149f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>LD::~LD</definition>
        <argsstring>()</argsstring>
        <name>~LD</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="apps/ld/fsw/src/ld_app.h" line="133" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_l_d_1a0b7f4c4f83557ddf04c44d4cec2d5908" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void LD::AppMain</definition>
        <argsstring>(void)</argsstring>
        <name>AppMain</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Landing Detector (<ref refid="class_l_d" kindref="compound">LD</ref>) application entry point. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Description</title><para>Landing Detector Task application entry point. This function performs app initialization, then waits for the cFE ES Startup Sync, then executes the main processing loop.</para></simplesect>
<simplesect kind="par"><title>Assumptions, External Events, and Notes:</title><para>If there is an unrecoverable failure during initialization the main loop is never executed and the application will exit. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="apps/ld/fsw/src/ld_app.h" line="223" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_l_d_1a6c294d7db7769c8c7ae8db3ba474b33c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="common__types_8h_1a5eb512da689eec1a7472ab97e2ab6be3" kindref="member" external="/home/vagrant/airliner/build/reference/default/docs/html/cfe/detailed_design/cfe.tag">int32</ref></type>
        <definition>int32 LD::InitApp</definition>
        <argsstring>(void)</argsstring>
        <name>InitApp</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Initialize the Landing Detector (<ref refid="class_l_d" kindref="compound">LD</ref>) application. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Description</title><para>Landing Detector application initialization routine. This function performs all the required startup steps to initialize (or restore from CDS) <ref refid="class_l_d" kindref="compound">LD</ref> data structures and get the application registered with the cFE services so it can begin to receive command messages and send events.</para></simplesect>
<simplesect kind="par"><title>Assumptions, External Events, and Notes:</title><para>None</para></simplesect>
<simplesect kind="return"><para><table rows="7" cols="2"><row>
<entry thead="no"><para><ref refid="cfe__error_8h_1ab2b6b188c32c70b8ca0578b7a7bc091b" kindref="member" external="/home/vagrant/airliner/build/reference/default/docs/html/cfe/detailed_design/cfe.tag">CFE_SUCCESS</ref> </para></entry><entry thead="no"><para></para></entry></row>
<row>
<entry thead="no"><para>Return codes from <ref refid="cfe__es_8h_1a426ef8e1796ccebba16c63c8e86fb842" kindref="member" external="/home/vagrant/airliner/build/reference/default/docs/html/cfe/detailed_design/cfe.tag">CFE_ES_RegisterApp</ref>  </para></entry></row>
<row>
<entry thead="no"><para>Return codes from #LD_InitEvent  </para></entry></row>
<row>
<entry thead="no"><para>Return codes from #LD_InitPipe  </para></entry></row>
<row>
<entry thead="no"><para>Return codes from #LD_InitData  </para></entry></row>
<row>
<entry thead="no"><para>Return codes from #LD_InitConfigTbl  </para></entry></row>
<row>
<entry thead="no"><para>Return codes from <ref refid="osapi_8c_1a0de425c8dba312f44cf8803a69e7ca5e" kindref="member" external="/home/vagrant/airliner/build/reference/default/docs/html/cfe/detailed_design/cfe.tag">OS_TaskInstallDeleteHandler</ref>  </para></entry></row>
</table>
</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="apps/ld/fsw/src/ld_app.h" line="249" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_l_d_1ac1fead82922711aadbf71bb0e3762d43" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="common__types_8h_1a5eb512da689eec1a7472ab97e2ab6be3" kindref="member" external="/home/vagrant/airliner/build/reference/default/docs/html/cfe/detailed_design/cfe.tag">int32</ref></type>
        <definition>int32 LD::InitEvent</definition>
        <argsstring>(void)</argsstring>
        <name>InitEvent</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Initialize Event Services and Event tables. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Description</title><para>This function performs the steps required to setup cFE Event Services for use by the <ref refid="class_l_d" kindref="compound">LD</ref> application.</para></simplesect>
<simplesect kind="par"><title>Assumptions, External Events, and Notes:</title><para>None</para></simplesect>
<simplesect kind="return"><para><table rows="2" cols="2"><row>
<entry thead="no"><para><ref refid="cfe__error_8h_1ab2b6b188c32c70b8ca0578b7a7bc091b" kindref="member" external="/home/vagrant/airliner/build/reference/default/docs/html/cfe/detailed_design/cfe.tag">CFE_SUCCESS</ref> </para></entry><entry thead="no"><para></para></entry></row>
<row>
<entry thead="no"><para>Return codes from <ref refid="cfe__evs_8h_1aff6913e2ab9a37ae699382c482fdb786" kindref="member" external="/home/vagrant/airliner/build/reference/default/docs/html/cfe/detailed_design/cfe.tag">CFE_EVS_Register</ref>  </para></entry></row>
</table>
</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="apps/ld/fsw/src/ld_app.h" line="267" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_l_d_1ab2bf530ec594320f03831ad66c1224a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void LD::InitData</definition>
        <argsstring>(void)</argsstring>
        <name>InitData</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Initialize global variables used by <ref refid="class_l_d" kindref="compound">LD</ref> application. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Description</title><para>This function performs the steps required to initialize the <ref refid="class_l_d" kindref="compound">LD</ref> application data.</para></simplesect>
<simplesect kind="par"><title>Assumptions, External Events, and Notes:</title><para>None </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="apps/ld/fsw/src/ld_app.h" line="280" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_l_d_1aec2cd018382ed81a0912a559e4be9061" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="common__types_8h_1a5eb512da689eec1a7472ab97e2ab6be3" kindref="member" external="/home/vagrant/airliner/build/reference/default/docs/html/cfe/detailed_design/cfe.tag">int32</ref></type>
        <definition>int32 LD::InitPipe</definition>
        <argsstring>(void)</argsstring>
        <name>InitPipe</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Initialize message pipes. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Description</title><para>This function performs the steps required to setup initialize the cFE Software Bus message pipes and subscribe to messages for the <ref refid="class_l_d" kindref="compound">LD</ref> application.</para></simplesect>
<simplesect kind="par"><title>Assumptions, External Events, and Notes:</title><para>None</para></simplesect>
<simplesect kind="return"><para><table rows="4" cols="2"><row>
<entry thead="no"><para><ref refid="cfe__error_8h_1ab2b6b188c32c70b8ca0578b7a7bc091b" kindref="member" external="/home/vagrant/airliner/build/reference/default/docs/html/cfe/detailed_design/cfe.tag">CFE_SUCCESS</ref> </para></entry><entry thead="no"><para></para></entry></row>
<row>
<entry thead="no"><para>Return codes from <ref refid="cfe__sb__api_8c_1ac169b781c59074e6cbab49325726c4e2" kindref="member" external="/home/vagrant/airliner/build/reference/default/docs/html/cfe/detailed_design/cfe.tag">CFE_SB_CreatePipe</ref>  </para></entry></row>
<row>
<entry thead="no"><para>Return codes from <ref refid="cfe__sb__api_8c_1a5939c3681044a3d953d0fe72dd577889" kindref="member" external="/home/vagrant/airliner/build/reference/default/docs/html/cfe/detailed_design/cfe.tag">CFE_SB_SubscribeEx</ref>  </para></entry></row>
<row>
<entry thead="no"><para>Return codes from <ref refid="cfe__sb__api_8c_1afc2c2db1a504f544b430f33f28be769b" kindref="member" external="/home/vagrant/airliner/build/reference/default/docs/html/cfe/detailed_design/cfe.tag">CFE_SB_Subscribe</ref>  </para></entry></row>
</table>
</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="apps/ld/fsw/src/ld_app.h" line="301" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_l_d_1ac5ba1d0769547e5b99d9e87cd484fb92" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="common__types_8h_1a5eb512da689eec1a7472ab97e2ab6be3" kindref="member" external="/home/vagrant/airliner/build/reference/default/docs/html/cfe/detailed_design/cfe.tag">int32</ref></type>
        <definition>int32 LD::RcvSchPipeMsg</definition>
        <argsstring>(int32 iBlocking)</argsstring>
        <name>RcvSchPipeMsg</name>
        <param>
          <type><ref refid="common__types_8h_1a5eb512da689eec1a7472ab97e2ab6be3" kindref="member" external="/home/vagrant/airliner/build/reference/default/docs/html/cfe/detailed_design/cfe.tag">int32</ref></type>
          <declname>iBlocking</declname>
        </param>
        <briefdescription>
<para>Receive and process messages from the scheduler pipe. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Description</title><para>This function receives and processes messages for the <ref refid="class_l_d" kindref="compound">LD</ref> application from the SCH pipe. This function will pend for the type defined by iBlocking, allowing it to wait for messages, i.e. wakeup messages from scheduler.</para></simplesect>
<simplesect kind="par"><title>Assumptions, External Events, and Notes:</title><para>None</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">iBlocking</parametername>
</parameternamelist>
<parameterdescription>
<para>A <ref refid="cfe__sb_8h_1acc9e6f66cd026d1c987c4c3de827366f" kindref="member" external="/home/vagrant/airliner/build/reference/default/docs/html/cfe/detailed_design/cfe.tag">CFE_SB_PEND_FOREVER</ref>, <ref refid="cfe__sb_8h_1a0c0ca8cca37a759bd5e68e81e73ce67a" kindref="member" external="/home/vagrant/airliner/build/reference/default/docs/html/cfe/detailed_design/cfe.tag">CFE_SB_POLL</ref> or millisecond timeout</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><table rows="2" cols="2"><row>
<entry thead="no"><para><ref refid="cfe__error_8h_1ab2b6b188c32c70b8ca0578b7a7bc091b" kindref="member" external="/home/vagrant/airliner/build/reference/default/docs/html/cfe/detailed_design/cfe.tag">CFE_SUCCESS</ref> </para></entry><entry thead="no"><para></para></entry></row>
<row>
<entry thead="no"><para>Return codes from <ref refid="cfe__sb__api_8c_1a54840fe06aeb08b1e2c8df420474780d" kindref="member" external="/home/vagrant/airliner/build/reference/default/docs/html/cfe/detailed_design/cfe.tag">CFE_SB_RcvMsg</ref>  </para></entry></row>
</table>
</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="apps/ld/fsw/src/ld_app.h" line="324" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_l_d_1aebe78ee2184bb47e1d3de036c7dda3be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void LD::ProcessCmdPipe</definition>
        <argsstring>(void)</argsstring>
        <name>ProcessCmdPipe</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Landing Detector Task incoming command processing. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Description</title><para>This function processes incoming commands subscribed by <ref refid="class_l_d" kindref="compound">LD</ref> application</para></simplesect>
<simplesect kind="par"><title>Assumptions, External Events, and Notes:</title><para>None </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="apps/ld/fsw/src/ld_app.h" line="337" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_l_d_1a83ca6afc974b7caf6b6b772467d03554" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void LD::ProcessAppCmds</definition>
        <argsstring>(CFE_SB_Msg_t *MsgPtr)</argsstring>
        <name>ProcessAppCmds</name>
        <param>
          <type><ref refid="union_c_f_e___s_b___msg__t" kindref="compound" external="/home/vagrant/airliner/build/reference/default/docs/html/cfe/detailed_design/cfe.tag">CFE_SB_Msg_t</ref> *</type>
          <declname>MsgPtr</declname>
        </param>
        <briefdescription>
<para>Landing Detector Task application commands. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Description</title><para>This function processes command messages specific to the <ref refid="class_l_d" kindref="compound">LD</ref> application</para></simplesect>
<simplesect kind="par"><title>Assumptions, External Events, and Notes:</title><para>None</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">MsgPtr</parametername>
</parameternamelist>
<parameterdescription>
<para>A <ref refid="union_c_f_e___s_b___msg__t" kindref="compound" external="/home/vagrant/airliner/build/reference/default/docs/html/cfe/detailed_design/cfe.tag">CFE_SB_Msg_t</ref> pointer that references the software bus message </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="apps/ld/fsw/src/ld_app.h" line="353" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_l_d_1ac6fa038ebd5a87c21bc904c24ceae77f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void LD::ReportHousekeeping</definition>
        <argsstring>(void)</argsstring>
        <name>ReportHousekeeping</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Sends <ref refid="class_l_d" kindref="compound">LD</ref> housekeeping message. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Description</title><para>This function sends the housekeeping message</para></simplesect>
<simplesect kind="par"><title>Assumptions, External Events, and Notes:</title><para>None </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="apps/ld/fsw/src/ld_app.h" line="365" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_l_d_1a20e5b7739763448d35f2977362d66e9d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void LD::SendVehicleLandDetectedMsg</definition>
        <argsstring>(void)</argsstring>
        <name>SendVehicleLandDetectedMsg</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Sends the VehicleLandDetectedMsg message. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Description</title><para>This function publishes the VehicleLandDetectedMsg message containing &lt;TODO&gt;</para></simplesect>
<simplesect kind="par"><title>Assumptions, External Events, and Notes:</title><para>None </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="apps/ld/fsw/src/ld_app.h" line="377" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_l_d_1acd7d7d417f0a1d316a9595b22cb68b99" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void LD::SendDiag</definition>
        <argsstring>(void)</argsstring>
        <name>SendDiag</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Sends the Diagnotic message. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Description</title><para>This function publishes the diag message to the SB</para></simplesect>
<simplesect kind="par"><title>Assumptions, External Events, and Notes:</title><para>None </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="apps/ld/fsw/src/ld_app.h" line="389" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_l_d_1ab0df45aceef2d8aaf39ffcf07342f6a7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="common__types_8h_1a1a0d7c4c11a131b0d46ebcb64832e293" kindref="member" external="/home/vagrant/airliner/build/reference/default/docs/html/cfe/detailed_design/cfe.tag">osalbool</ref></type>
        <definition>osalbool LD::VerifyCmdLength</definition>
        <argsstring>(CFE_SB_Msg_t *MsgPtr, uint16 usExpectedLen)</argsstring>
        <name>VerifyCmdLength</name>
        <param>
          <type><ref refid="union_c_f_e___s_b___msg__t" kindref="compound" external="/home/vagrant/airliner/build/reference/default/docs/html/cfe/detailed_design/cfe.tag">CFE_SB_Msg_t</ref> *</type>
          <declname>MsgPtr</declname>
        </param>
        <param>
          <type><ref refid="common__types_8h_1a2e00abb078d312d1d8c4fbcd6be343d8" kindref="member" external="/home/vagrant/airliner/build/reference/default/docs/html/cfe/detailed_design/cfe.tag">uint16</ref></type>
          <declname>usExpectedLen</declname>
        </param>
        <briefdescription>
<para>Verify Command Length. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Description</title><para>This function verifies the command message length.</para></simplesect>
<simplesect kind="par"><title>Assumptions, External Events, and Notes:</title><para>None</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">MsgPtr</parametername>
</parameternamelist>
<parameterdescription>
<para>A <ref refid="union_c_f_e___s_b___msg__t" kindref="compound" external="/home/vagrant/airliner/build/reference/default/docs/html/cfe/detailed_design/cfe.tag">CFE_SB_Msg_t</ref> pointer that references the software bus message </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">usExpectedLen</parametername>
</parameternamelist>
<parameterdescription>
<para>The expected length of the message</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><table rows="0" cols="0"></table>
if the message length matches expectations, FALSE if it does not. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="apps/ld/fsw/src/ld_app.h" line="409" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_l_d_1ab7368e55785576eebc6716566f9885a1" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="common__types_8h_1a5eb512da689eec1a7472ab97e2ab6be3" kindref="member" external="/home/vagrant/airliner/build/reference/default/docs/html/cfe/detailed_design/cfe.tag">int32</ref></type>
        <definition>int32 LD::InitConfigTbl</definition>
        <argsstring>(void)</argsstring>
        <name>InitConfigTbl</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Initialize the <ref refid="class_l_d" kindref="compound">LD</ref> configuration tables. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Description</title><para>This function initializes <ref refid="class_l_d" kindref="compound">LD</ref>&apos;s configuration tables. This includes &lt;TODO&gt;.</para></simplesect>
<simplesect kind="par"><title>Assumptions, External Events, and Notes:</title><para>None</para></simplesect>
<simplesect kind="return"><para><table rows="4" cols="2"><row>
<entry thead="no"><para><ref refid="cfe__error_8h_1ab2b6b188c32c70b8ca0578b7a7bc091b" kindref="member" external="/home/vagrant/airliner/build/reference/default/docs/html/cfe/detailed_design/cfe.tag">CFE_SUCCESS</ref> </para></entry><entry thead="no"><para></para></entry></row>
<row>
<entry thead="no"><para>Return codes from <ref refid="cfe__tbl__api_8c_1a02649cb295b154981365de11e0bb6683" kindref="member" external="/home/vagrant/airliner/build/reference/default/docs/html/cfe/detailed_design/cfe.tag">CFE_TBL_Register</ref>  </para></entry></row>
<row>
<entry thead="no"><para>Return codes from <ref refid="cfe__tbl__api_8c_1a5f631dc4d2527e27968f0838a93a8d50" kindref="member" external="/home/vagrant/airliner/build/reference/default/docs/html/cfe/detailed_design/cfe.tag">CFE_TBL_Load</ref>  </para></entry></row>
<row>
<entry thead="no"><para>Return codes from #LD_AcquireConfigPointers  </para></entry></row>
</table>
</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="apps/ld/fsw/src/ld_app.h" line="430" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_l_d_1abb8587e7a31c18d0898dab195a6f648d" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="common__types_8h_1a5eb512da689eec1a7472ab97e2ab6be3" kindref="member" external="/home/vagrant/airliner/build/reference/default/docs/html/cfe/detailed_design/cfe.tag">int32</ref></type>
        <definition>int32 LD::AcquireConfigPointers</definition>
        <argsstring>(void)</argsstring>
        <name>AcquireConfigPointers</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Obtain <ref refid="class_l_d" kindref="compound">LD</ref> configuration tables data pointers. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Description</title><para>This function manages the configuration tables and obtains a pointer to their data.</para></simplesect>
<simplesect kind="par"><title>Assumptions, External Events, and Notes:</title><para>None</para></simplesect>
<simplesect kind="return"><para><table rows="1" cols="2"><row>
<entry thead="no"><para><ref refid="cfe__error_8h_1ab2b6b188c32c70b8ca0578b7a7bc091b" kindref="member" external="/home/vagrant/airliner/build/reference/default/docs/html/cfe/detailed_design/cfe.tag">CFE_SUCCESS</ref> </para></entry><entry thead="no"><para></para></entry></row>
</table>
</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="apps/ld/fsw/src/ld_app.h" line="447" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_l_d_1ab919b42911526c52f10fe08d205db9bc" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="common__types_8h_1a1a0d7c4c11a131b0d46ebcb64832e293" kindref="member" external="/home/vagrant/airliner/build/reference/default/docs/html/cfe/detailed_design/cfe.tag">osalbool</ref></type>
        <definition>osalbool LD::DetectFreeFall</definition>
        <argsstring>(void)</argsstring>
        <name>DetectFreeFall</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Detect if vehicle is in free fall state. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Description</title><para>Computes net acceleration acting on the vehicle. if the value is close to the free fall threshold then true is returned</para></simplesect>
<simplesect kind="par"><title>Assumptions, External Events, and Notes:</title><para>None</para></simplesect>
<simplesect kind="return"><para><table rows="0" cols="0"></table>
id net acceleration acting on the vehicle&apos;s body is less than free fall threshold value. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="apps/ld/fsw/src/ld_app.h" line="465" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_l_d_1a761162cad379cd216b62c9c3f09d9415" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="common__types_8h_1a1a0d7c4c11a131b0d46ebcb64832e293" kindref="member" external="/home/vagrant/airliner/build/reference/default/docs/html/cfe/detailed_design/cfe.tag">osalbool</ref></type>
        <definition>osalbool LD::DetectGroundContactState</definition>
        <argsstring>(void)</argsstring>
        <name>DetectGroundContactState</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Detect if vehicle is in free fall state. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Description</title><para>Computes net acceleration acting on the vehicle. if the value is close to the free fall threshold then true is returned</para></simplesect>
<simplesect kind="par"><title>Assumptions, External Events, and Notes:</title><para>None</para></simplesect>
<simplesect kind="return"><para><table rows="0" cols="0"></table>
id net acceleration acting on the vehicle&apos;s body is less than free fall threshold value. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="apps/ld/fsw/src/ld_app.h" line="483" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_l_d_1aea458aae16fc3be3a0bafbedd02ab14a" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="common__types_8h_1a1a0d7c4c11a131b0d46ebcb64832e293" kindref="member" external="/home/vagrant/airliner/build/reference/default/docs/html/cfe/detailed_design/cfe.tag">osalbool</ref></type>
        <definition>osalbool LD::DetectLandedState</definition>
        <argsstring>(void)</argsstring>
        <name>DetectLandedState</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Detect if vehicle is in free fall state. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Description</title><para>Computes net acceleration acting on the vehicle. if the value is close to the free fall threshold then true is returned</para></simplesect>
<simplesect kind="par"><title>Assumptions, External Events, and Notes:</title><para>None</para></simplesect>
<simplesect kind="return"><para><table rows="0" cols="0"></table>
id net acceleration acting on the vehicle&apos;s body is less than free fall threshold value. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="apps/ld/fsw/src/ld_app.h" line="501" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_l_d_1ac95f64d5be84b7db68e485b972e7caf2" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float LD::TakeoffThrottle</definition>
        <argsstring>(void)</argsstring>
        <name>TakeoffThrottle</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Detect if vehicle is in free fall state. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Description</title><para>Computes net acceleration acting on the vehicle. if the value is close to the free fall threshold then true is returned</para></simplesect>
<simplesect kind="par"><title>Assumptions, External Events, and Notes:</title><para>None</para></simplesect>
<simplesect kind="return"><para><table rows="0" cols="0"></table>
id net acceleration acting on the vehicle&apos;s body is less than free fall threshold value. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="apps/ld/fsw/src/ld_app.h" line="519" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_l_d_1a79431d69e4347dc2fbb1ec8b98de51b8" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float LD::MaxAltitude</definition>
        <argsstring>(void)</argsstring>
        <name>MaxAltitude</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Detect if vehicle is in free fall state. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Description</title><para>Computes net acceleration acting on the vehicle. if the value is close to the free fall threshold then true is returned</para></simplesect>
<simplesect kind="par"><title>Assumptions, External Events, and Notes:</title><para>None</para></simplesect>
<simplesect kind="return"><para><table rows="0" cols="0"></table>
id net acceleration acting on the vehicle&apos;s body is less than free fall threshold value. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="apps/ld/fsw/src/ld_app.h" line="537" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_l_d_1a80b73b173256602c4189aa7a04611271" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="common__types_8h_1a1a0d7c4c11a131b0d46ebcb64832e293" kindref="member" external="/home/vagrant/airliner/build/reference/default/docs/html/cfe/detailed_design/cfe.tag">osalbool</ref></type>
        <definition>osalbool LD::AltitudeLock</definition>
        <argsstring>(void)</argsstring>
        <name>AltitudeLock</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Detect if vehicle is in free fall state. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Description</title><para>Computes net acceleration acting on the vehicle. if the value is close to the free fall threshold then true is returned</para></simplesect>
<simplesect kind="par"><title>Assumptions, External Events, and Notes:</title><para>None</para></simplesect>
<simplesect kind="return"><para><table rows="0" cols="0"></table>
id net acceleration acting on the vehicle&apos;s body is less than free fall threshold value. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="apps/ld/fsw/src/ld_app.h" line="555" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_l_d_1af74b89ef413c8518e33950593ae02bc3" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="common__types_8h_1a1a0d7c4c11a131b0d46ebcb64832e293" kindref="member" external="/home/vagrant/airliner/build/reference/default/docs/html/cfe/detailed_design/cfe.tag">osalbool</ref></type>
        <definition>osalbool LD::PositionLock</definition>
        <argsstring>(void)</argsstring>
        <name>PositionLock</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Detect if vehicle is in free fall state. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Description</title><para>Computes net acceleration acting on the vehicle. if the value is close to the free fall threshold then true is returned</para></simplesect>
<simplesect kind="par"><title>Assumptions, External Events, and Notes:</title><para>None</para></simplesect>
<simplesect kind="return"><para><table rows="0" cols="0"></table>
id net acceleration acting on the vehicle&apos;s body is less than free fall threshold value. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="apps/ld/fsw/src/ld_app.h" line="573" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_l_d_1a563765598acd3f4070c645e647274318" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="common__types_8h_1a1a0d7c4c11a131b0d46ebcb64832e293" kindref="member" external="/home/vagrant/airliner/build/reference/default/docs/html/cfe/detailed_design/cfe.tag">osalbool</ref></type>
        <definition>osalbool LD::ManualControlPresent</definition>
        <argsstring>(void)</argsstring>
        <name>ManualControlPresent</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Detect if vehicle is in free fall state. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Description</title><para>Computes net acceleration acting on the vehicle. if the value is close to the free fall threshold then true is returned</para></simplesect>
<simplesect kind="par"><title>Assumptions, External Events, and Notes:</title><para>None</para></simplesect>
<simplesect kind="return"><para><table rows="0" cols="0"></table>
id net acceleration acting on the vehicle&apos;s body is less than free fall threshold value. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="apps/ld/fsw/src/ld_app.h" line="591" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_l_d_1ae1782c53f92f2e0cc303c83313be3302" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="common__types_8h_1a1a0d7c4c11a131b0d46ebcb64832e293" kindref="member" external="/home/vagrant/airliner/build/reference/default/docs/html/cfe/detailed_design/cfe.tag">osalbool</ref></type>
        <definition>osalbool LD::MinimalThrust</definition>
        <argsstring>(void)</argsstring>
        <name>MinimalThrust</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Detect if vehicle is in free fall state. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Description</title><para>Computes net acceleration acting on the vehicle. if the value is close to the free fall threshold then true is returned</para></simplesect>
<simplesect kind="par"><title>Assumptions, External Events, and Notes:</title><para>None</para></simplesect>
<simplesect kind="return"><para><table rows="0" cols="0"></table>
id net acceleration acting on the vehicle&apos;s body is less than free fall threshold value. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="apps/ld/fsw/src/ld_app.h" line="609" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_l_d_1a685893386840122dc4ba039f77582a6a" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void LD::UpdateState</definition>
        <argsstring>(void)</argsstring>
        <name>UpdateState</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Detect if vehicle is in free fall state. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Description</title><para>Computes net acceleration acting on the vehicle. if the value is close to the free fall threshold then true is returned</para></simplesect>
<simplesect kind="par"><title>Assumptions, External Events, and Notes:</title><para>None</para></simplesect>
<simplesect kind="return"><para><table rows="0" cols="0"></table>
id net acceleration acting on the vehicle&apos;s body is less than free fall threshold value. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="apps/ld/fsw/src/ld_app.h" line="627" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_l_d_1a047e64be008d09ba1ad470505cbe02be" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void LD::Execute</definition>
        <argsstring>(void)</argsstring>
        <name>Execute</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Land Detector Task. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Description</title><para>Executes every time a new message is available, determines if vehicle is in one of three states, writes this information to VehicleLandDetectedMsg and publishes it.</para></simplesect>
<simplesect kind="par"><title>Assumptions, External Events, and Notes:</title><para>None </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="apps/ld/fsw/src/ld_app.h" line="641" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_l_d_1a4556d94e5dd6c6566ee98f8615d63574" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void LD::DetectStateChange</definition>
        <argsstring>(void)</argsstring>
        <name>DetectStateChange</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Detect Change In State. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Description</title><para>Reads VehicleLandDetectedMsg and determines if state of the vehicle has changed.</para></simplesect>
<simplesect kind="par"><title>Assumptions, External Events, and Notes:</title><para>None </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="apps/ld/fsw/src/ld_app.h" line="654" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="class_l_d_1a98a48b11fbfd7289244bf28ae1647bba" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="common__types_8h_1a5eb512da689eec1a7472ab97e2ab6be3" kindref="member" external="/home/vagrant/airliner/build/reference/default/docs/html/cfe/detailed_design/cfe.tag">int32</ref></type>
        <definition>static int32 LD::ValidateConfigTbl</definition>
        <argsstring>(void *)</argsstring>
        <name>ValidateConfigTbl</name>
        <param>
          <type>void *</type>
        </param>
        <briefdescription>
<para>Validate <ref refid="class_l_d" kindref="compound">LD</ref> configuration table. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Description</title><para>This function validates <ref refid="class_l_d" kindref="compound">LD</ref>&apos;s configuration table</para></simplesect>
<simplesect kind="par"><title>Assumptions, External Events, and Notes:</title><para>None</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ConfigTblPtr</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the table to validate.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><table rows="1" cols="2"><row>
<entry thead="no"><para><ref refid="cfe__error_8h_1ab2b6b188c32c70b8ca0578b7a7bc091b" kindref="member" external="/home/vagrant/airliner/build/reference/default/docs/html/cfe/detailed_design/cfe.tag">CFE_SUCCESS</ref> </para></entry><entry thead="no"><para></para></entry></row>
</table>
</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="apps/ld/fsw/src/ld_app.h" line="673" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para><ref refid="class_l_d" kindref="compound">LD</ref> Application Class. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="5">
        <label>LD_CurrentValueTable_t</label>
        <link refid="struct_l_d___current_value_table__t"/>
      </node>
      <node id="1">
        <label>LD</label>
        <link refid="class_l_d"/>
        <childnode refid="2" relation="usage">
          <edgelabel>HkTlm</edgelabel>
        </childnode>
        <childnode refid="3" relation="usage">
          <edgelabel>ConfigTblPtr</edgelabel>
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>DiagTlm</edgelabel>
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>CVT</edgelabel>
        </childnode>
      </node>
      <node id="2">
        <label>LD_HkTlm_t</label>
        <link refid="struct_l_d___hk_tlm__t"/>
      </node>
      <node id="3">
        <label>LD_ConfigTbl_t</label>
        <link refid="struct_l_d___config_tbl__t"/>
      </node>
      <node id="4">
        <label>LD_Diag_t</label>
        <link refid="struct_l_d___diag__t"/>
      </node>
    </collaborationgraph>
    <location file="apps/ld/fsw/src/ld_app.h" line="130" column="1" bodyfile="apps/ld/fsw/src/ld_app.h" bodystart="129" bodyend="674"/>
    <listofallmembers>
      <member refid="class_l_d_1abb8587e7a31c18d0898dab195a6f648d" prot="private" virt="non-virtual"><scope>LD</scope><name>AcquireConfigPointers</name></member>
      <member refid="class_l_d_1a4b862b40b1e9a83596864e7755aa3d2e" prot="public" virt="non-virtual"><scope>LD</scope><name>altitude_max</name></member>
      <member refid="class_l_d_1a80b73b173256602c4189aa7a04611271" prot="private" virt="non-virtual"><scope>LD</scope><name>AltitudeLock</name></member>
      <member refid="class_l_d_1a0b7f4c4f83557ddf04c44d4cec2d5908" prot="public" virt="non-virtual"><scope>LD</scope><name>AppMain</name></member>
      <member refid="class_l_d_1aeef086a0e35cee303d27098af2c96a53" prot="public" virt="non-virtual"><scope>LD</scope><name>arming_time</name></member>
      <member refid="class_l_d_1ac480948c008f5acee8a23e8d981658e0" prot="public" virt="non-virtual"><scope>LD</scope><name>CmdPipeId</name></member>
      <member refid="class_l_d_1a2631a6ee8285196d8e6ff1728c40bacb" prot="public" virt="non-virtual"><scope>LD</scope><name>ConfigTblHdl</name></member>
      <member refid="class_l_d_1a53e4732b2782e7ca2948089b0d9469cd" prot="public" virt="non-virtual"><scope>LD</scope><name>ConfigTblPtr</name></member>
      <member refid="class_l_d_1ac8485c0bd0557eb26030c168b2b6db39" prot="public" virt="non-virtual"><scope>LD</scope><name>CVT</name></member>
      <member refid="class_l_d_1ab919b42911526c52f10fe08d205db9bc" prot="private" virt="non-virtual"><scope>LD</scope><name>DetectFreeFall</name></member>
      <member refid="class_l_d_1a761162cad379cd216b62c9c3f09d9415" prot="private" virt="non-virtual"><scope>LD</scope><name>DetectGroundContactState</name></member>
      <member refid="class_l_d_1aea458aae16fc3be3a0bafbedd02ab14a" prot="private" virt="non-virtual"><scope>LD</scope><name>DetectLandedState</name></member>
      <member refid="class_l_d_1a4556d94e5dd6c6566ee98f8615d63574" prot="private" virt="non-virtual"><scope>LD</scope><name>DetectStateChange</name></member>
      <member refid="class_l_d_1a05fbd1e5c0973dfbecac93d16b358ae0" prot="public" virt="non-virtual"><scope>LD</scope><name>DiagTlm</name></member>
      <member refid="class_l_d_1a047e64be008d09ba1ad470505cbe02be" prot="private" virt="non-virtual"><scope>LD</scope><name>Execute</name></member>
      <member refid="class_l_d_1a5affd6cd8aa4a83005ccf4b6ed4de2e7" prot="public" virt="non-virtual"><scope>LD</scope><name>freefall_history</name></member>
      <member refid="class_l_d_1a3642fa24a47fddaf0186cb4ee8465c7d" prot="public" virt="non-virtual"><scope>LD</scope><name>ground_contact_history</name></member>
      <member refid="class_l_d_1ae492dcbfab89a15bf63e6ba3d0f196bb" prot="public" virt="non-virtual"><scope>LD</scope><name>GROUND_CONTACT_TRIGGER_TIME_US</name></member>
      <member refid="class_l_d_1a207ae3a136ba3ae63361d3671d8ed034" prot="public" virt="non-virtual"><scope>LD</scope><name>HkTlm</name></member>
      <member refid="class_l_d_1a6c294d7db7769c8c7ae8db3ba474b33c" prot="public" virt="non-virtual"><scope>LD</scope><name>InitApp</name></member>
      <member refid="class_l_d_1ab7368e55785576eebc6716566f9885a1" prot="private" virt="non-virtual"><scope>LD</scope><name>InitConfigTbl</name></member>
      <member refid="class_l_d_1ab2bf530ec594320f03831ad66c1224a1" prot="public" virt="non-virtual"><scope>LD</scope><name>InitData</name></member>
      <member refid="class_l_d_1ac1fead82922711aadbf71bb0e3762d43" prot="public" virt="non-virtual"><scope>LD</scope><name>InitEvent</name></member>
      <member refid="class_l_d_1aec2cd018382ed81a0912a559e4be9061" prot="public" virt="non-virtual"><scope>LD</scope><name>InitPipe</name></member>
      <member refid="class_l_d_1a8e69944037430fc0c165cc1d9fb0a217" prot="public" virt="non-virtual"><scope>LD</scope><name>LAND_DETECTOR_ARM_PHASE_TIME_US</name></member>
      <member refid="class_l_d_1a8392212a9be7686547c439ef3015eed6" prot="public" virt="non-virtual"><scope>LD</scope><name>LAND_DETECTOR_TRIGGER_TIME_US</name></member>
      <member refid="class_l_d_1a34b4544ef212b11af64e5f34506a3f7b" prot="public" virt="non-virtual"><scope>LD</scope><name>LAND_DETECTOR_UPDATE_RATE_HZ</name></member>
      <member refid="class_l_d_1ad1cdcff88aec9d33bcc84fd8d5b4fe1b" prot="public" virt="non-virtual"><scope>LD</scope><name>landed_history</name></member>
      <member refid="class_l_d_1a4177ef8e447bfc2bbdbf3566d8261908" prot="public" virt="non-virtual"><scope>LD</scope><name>LD</name></member>
      <member refid="class_l_d_1a563765598acd3f4070c645e647274318" prot="private" virt="non-virtual"><scope>LD</scope><name>ManualControlPresent</name></member>
      <member refid="class_l_d_1a79431d69e4347dc2fbb1ec8b98de51b8" prot="private" virt="non-virtual"><scope>LD</scope><name>MaxAltitude</name></member>
      <member refid="class_l_d_1a39cb4b8ceb51c62dfb967ae49b18b632" prot="public" virt="non-virtual"><scope>LD</scope><name>min_thrust_start</name></member>
      <member refid="class_l_d_1ae1782c53f92f2e0cc303c83313be3302" prot="private" virt="non-virtual"><scope>LD</scope><name>MinimalThrust</name></member>
      <member refid="class_l_d_1af74b89ef413c8518e33950593ae02bc3" prot="private" virt="non-virtual"><scope>LD</scope><name>PositionLock</name></member>
      <member refid="class_l_d_1a18c0778ce247894df368c5e96701c74d" prot="public" virt="non-virtual"><scope>LD</scope><name>PreviousLandDetectedMsg</name></member>
      <member refid="class_l_d_1a83ca6afc974b7caf6b6b772467d03554" prot="public" virt="non-virtual"><scope>LD</scope><name>ProcessAppCmds</name></member>
      <member refid="class_l_d_1aebe78ee2184bb47e1d3de036c7dda3be" prot="public" virt="non-virtual"><scope>LD</scope><name>ProcessCmdPipe</name></member>
      <member refid="class_l_d_1a63490fc7ccfbfa0e7247732909a87cde" prot="public" virt="non-virtual"><scope>LD</scope><name>publish_counter</name></member>
      <member refid="class_l_d_1ac5ba1d0769547e5b99d9e87cd484fb92" prot="public" virt="non-virtual"><scope>LD</scope><name>RcvSchPipeMsg</name></member>
      <member refid="class_l_d_1ac6fa038ebd5a87c21bc904c24ceae77f" prot="public" virt="non-virtual"><scope>LD</scope><name>ReportHousekeeping</name></member>
      <member refid="class_l_d_1ac88af03e4176addaa0bfe62edf595fd1" prot="public" virt="non-virtual"><scope>LD</scope><name>SchPipeId</name></member>
      <member refid="class_l_d_1acd7d7d417f0a1d316a9595b22cb68b99" prot="public" virt="non-virtual"><scope>LD</scope><name>SendDiag</name></member>
      <member refid="class_l_d_1a20e5b7739763448d35f2977362d66e9d" prot="public" virt="non-virtual"><scope>LD</scope><name>SendVehicleLandDetectedMsg</name></member>
      <member refid="class_l_d_1a58d5ae5c2e0bd8d258d3fdabc97881fd" prot="public" virt="non-virtual"><scope>LD</scope><name>state</name></member>
      <member refid="class_l_d_1a6bd75d01ff1780cb9f4b3b4fbe1c3b48" prot="public" virt="non-virtual"><scope>LD</scope><name>takeoff_time</name></member>
      <member refid="class_l_d_1ac95f64d5be84b7db68e485b972e7caf2" prot="private" virt="non-virtual"><scope>LD</scope><name>TakeoffThrottle</name></member>
      <member refid="class_l_d_1a059bf3b0083cdff15e863f86d55aeaf6" prot="public" virt="non-virtual"><scope>LD</scope><name>total_flight_time</name></member>
      <member refid="class_l_d_1aed47b65bed2f59a27db112b737aee54c" prot="public" virt="non-virtual"><scope>LD</scope><name>uiRunStatus</name></member>
      <member refid="class_l_d_1a685893386840122dc4ba039f77582a6a" prot="private" virt="non-virtual"><scope>LD</scope><name>UpdateState</name></member>
      <member refid="class_l_d_1a98a48b11fbfd7289244bf28ae1647bba" prot="public" virt="non-virtual"><scope>LD</scope><name>ValidateConfigTbl</name></member>
      <member refid="class_l_d_1a21fcbd078fabaf6b4074d7ca4f9e9197" prot="public" virt="non-virtual"><scope>LD</scope><name>VehicleLandDetectedMsg</name></member>
      <member refid="class_l_d_1ab0df45aceef2d8aaf39ffcf07342f6a7" prot="public" virt="non-virtual"><scope>LD</scope><name>VerifyCmdLength</name></member>
      <member refid="class_l_d_1aefe1fd083b5ee587d99641cb8c97149f" prot="public" virt="non-virtual"><scope>LD</scope><name>~LD</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
