<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="cfsschfaqs" kind="page">
    <compoundname>cfsschfaqs</compoundname>
    <title>CFS Scheduler Frequently Asked Questions</title>
    <detaileddescription>
<para><heading level="1">Timing Concerns </heading>
</para><para><bold> (Q) What does the &apos;OS Timer Accuracy (d &gt; reqd d usec) requires Minor Frame MET sync&apos; event message mean when I see it on startup? </bold> <linebreak/>
 <linebreak/>
 <emphasis> The Scheduler Application determines what kind of accuracy it requires from a Minor Frame timer based on the number of slots in a Major Frame and the length of a Major Frame. When it attempts to create a Minor Frame timer via the OSAL, it requests a timer with this required accuracy. If the OSAL is unable to provide a timer with the appropriate accuracy, SCH will generate this event message identifying what accuracy it requested and what accuracy was provided. SCH will attempt to run as best as it can with the degraded performance of its Minor Frame timer. SCH will compensate by using the MET timer from TIME services to determine which Minor Frames it needs to process on each wake-up. It will inevitably be required to process multiple Minor Frames during a single Minor Frame wake-up due to drift caused by the poor Minor Frame accuracy. This may produce a certain level of inconsistency to tests run and re-run on the same processor.</emphasis></para><para><emphasis> To solve the problem, the board or board support package must be enhanced to provide a Minor Frame timer with the necessary accuracy. OR, the user must reduce the number of Minor Frames in a Major Frame so that Minor Frames can be consistently performed on a Minor Frame wake-up. </emphasis></para><para><bold> (Q) Why does it take an inordinate amount of time for SCH to begin processing following a reboot? </bold> <linebreak/>
 <linebreak/>
 <emphasis> There are two possible causes for this. First, the SCH Application does not begin processing the Schedule Definition Table until all Applications specified in the startup script have been loaded, started and have completed their initialization. By waiting for all other Applications to reach a starting point where they are capable of processing messages, a variety of error messages caused by messages being issued by the SCH Application before the associated Application is ready to receive them. If there is an Application in the startup script that fails to start correctly, the SCH Application will wait for the configuration specified <ref refid="sch__platform__cfg_8h_1a539ebcc2074bc1b010ab6127c63ccdb8" kindref="member">SCH_STARTUP_SYNC_TIMEOUT</ref> period before it assumes as many startup Applications have started that are going to start.</emphasis></para><para><emphasis> Another possibility is the time spent waiting for the first Major Frame signal from the cFE. The SCH Application is configured via the <ref refid="sch__platform__cfg_8h_1a5cb6fe864442bd1e6a1a0f1050a14680" kindref="member">SCH_STARTUP_PERIOD</ref> parameter to wait a certain amount of time following the successful startup of the Applications specified in the startup script to wait for the first Major Frame signal. If the signal does not manage to appear within the specified timeout, the SCH Application will use the Minor Frame timer to generate an appropriate Major Frame signal. </emphasis></para><para>Prev: <ref refid="cfsschcons" kindref="compound">CFS Scheduler Constraints</ref> </para>    </detaileddescription>
  </compounddef>
</doxygen>
