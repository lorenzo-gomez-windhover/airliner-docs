<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="cfstocons" kind="page">
    <compoundname>cfstocons</compoundname>
    <title>TO Application Operational Constraints</title>
    <detaileddescription>
<para>==== It is possible for TO to exit after startup if any of the steps in its initialization procedure fails. For this to happen though there has to be a problem with cFE itself, or if the custom layer fails to initialize. TO has additional logic for loading an internal backup table if it encounters a table load issue during intialization, because the config table is required for operation.</para><para><heading level="1">Application Termination </heading>
</para><para>Potential causes for TO to terminate prematurely are an error return from the software bus in the application main loop or error return from one of the cFE table services functions when TO tries to do table management (check for updates, dump requests etc.) during each housekeeping cycle.</para><para><heading level="1">Critical Data Store Operation </heading>
</para><para>TO does not use the cFE Critical Data Store (CDS). It does not have critical tables.</para><para><heading level="1">Interaction with the CF Application </heading>
</para><para>The CFDP File Transfer application (CF) requires TO to provide a &quot;throttling semaphore&quot;, not to be confused with the TO &quot;channel throttling&quot; feature. This CF throttling semaphore is a feedback mechanism implemented as a counting semaphore between TO to CF to signal CF that it is OK to send another CFDP PDU message for TO to send out an output channel. Without this mechanism, CF would send as quickly as it wanted and could overwhelm TO output capabilities. For more detailed information, consult the CF application User&apos;s Guide.</para><para>Note, that TO has a separate CF throttling semaphore for each output channel. See the TO platform configuration.</para><para><heading level="3">CFDP: Un-Wedging the CF application</heading>
</para><para>The CFDP application interaction with TO depends upon several things for proper operation. This is a collection point of scenarios and courses of action for recovery.</para><para><bold> Used a TO table with no CFDP space to ground PDU, now CF is &quot;wedged&quot;. </bold> <emphasis>(&quot;wedged&quot; - refuses to send PDUs)</emphasis></para><para><emphasis>Scenario:</emphasis></para><para>Using CFDP (on CF CH 1/ TO CH 1) with a TO (CH 1/onboard) table, table A, successfully. Then changed to a new TO onboard table, table B, then CF won&apos;t send PDUs. Changing back to the original TO onboard table A doesn&apos;t restore CFDP function.</para><para><emphasis>Observables:</emphasis></para><para>No PDUs from CF and CF Channel 1 (channel in use) Semaphore Count is 0. Nominally 4 is the max, and zero should only be seen when CF is regularly sending PDUs in a transaction that is proceeding. If this is zero and there are no PDUs then CF is wedged.</para><para><emphasis>Root cause:</emphasis></para><para>The second table, table B, didn&apos;t have the message flow for CF_SPACE_TO_GND_PDU_MID (0x0FFD) in the table. That stopped CFDP PDUs from being downlinked.</para><para><emphasis>Secondary effects:</emphasis></para><para>However, having CF send PDUs to a TO that isn&apos;t subscribed to them will cause CF to decrement the CF-TO throttling semaphore count to zero and halting CF from sending any more PDUs on that channel. When TO reloads the original table, or any other table, it doesn&apos;t automatically restore the CF-TO throttling semaphore count.</para><para><emphasis>Recovery:</emphasis></para><para>TO: Ensure the CF_SPACE_TO_GND_PDU_MID (0x0FFD) message flow is in the TO table in use.</para><para>CF:</para><para><itemizedlist>
<listitem><para>Abandon the outgoing CF transaction(s)</para></listitem><listitem><para>Make sure there is nothing being uplinked - basically CF is quiescent, no transactions either way</para></listitem><listitem><para>Disable the CF polling directories for CH 1</para></listitem><listitem><para>Disable the CF CH 1 deque (disable the CF CH 1)</para></listitem><listitem><para>Send 4 commands to CF to give back (increment) the CH 1 semaphore count back to 4, fsw_cmd_cfgivetake, for channel 1, value: 0=give/increase semaphore value, 1=take/decrement semaphore value (See CF User&apos;s Guide, B.26, p.62)</para></listitem><listitem><para>Then re-enable CF CH 1 deque</para></listitem><listitem><para>Finally re-enable CF CH 1 polling directories</para></listitem></itemizedlist>
</para><para><bold> Changed a TO table while a CF transfer was underway and there are now problems. </bold></para><para><emphasis>Scenario:</emphasis></para><para>Using CFDP for a transfer and PDUs are transferring then changed the TO table.</para><para><emphasis>Observables:</emphasis></para><para><itemizedlist>
<listitem><para>Possibility 1: No PDUs from CF anymore and Semaphore Count is 0 (for that channel). If this is zero and there are no PDUs then CF is wedged.</para></listitem><listitem><para>Possibility 2: One or more PDUs are missing and my Class 1 transfer is corrupted (or my Class 2 transfer required retries).</para></listitem><listitem><para>Possibility 3: The transfer completed but the CF Semaphore Count for that channel is no longer the max value of 4 when there are no transactions.</para></listitem><listitem><para>Possibility 4: Any of the above, together.</para></listitem></itemizedlist>
</para><para><emphasis>Root cause:</emphasis></para><para>Changing the TO table flushes the TO output queues and any PDUs in there. But TO only knows when to give back the CF-TO throttling semaphore count (increment the semaphore count) when TO actually sends a message. If any PDUs were dropped with the table change then that will affect the CF transaction and the final semaphore count after the transaction completes. CF can continue to operate with its CF-TO throttling semaphore count less than the max value but PDU sending performance might be compromised. If that value is zero then no PDUs will be sent.</para><para><emphasis>Recovery:</emphasis></para><para>Option 1: &quot;Push through&quot;</para><para>If the semaphore count is zero send four commands to CF to give back (increment) the CH 1 semaphore count, fsw_cmd_cfgivetake, for channel 1, value: 0=give/increase semaphore value, 1=take/decrement semaphore value (See CF User&apos;s Guide, B.26, p.62). If one or more transactions are in progress, or if CF is responding to an incoming transaction then the semaphore won&apos;t be exactly 4 after these commands until CF has stopped sending PDUs. This should get CF going again, but the transactions will still be impacted by any lost PDUs. Your mileage will vary.</para><para>Option 2: &quot;Safe CF then fix the semaphore&quot;</para><para><itemizedlist>
<listitem><para>Abandon the outgoing CF transaction(s)</para></listitem><listitem><para>Make sure there is nothing being uplinked - basically CF is quiescent, no transactions either way</para></listitem><listitem><para>Disable the CF polling directories for CH 1</para></listitem><listitem><para>Disable the CF CH 1 deque (disable the CF CH 1)</para></listitem><listitem><para>Send commands to CF to bump back the CH 1 semaphore count back to 4, fsw_cmd_cfgivetake, for channel 1, value: 0=give/increase semaphore value, 1=take/decrement semaphore value (See CF User&apos;s Guide, B.26, p.62).</para></listitem><listitem><para>Then re-enable CF CH 1 deque</para></listitem><listitem><para>Finally re-enable CF CH 1 polling directories</para></listitem></itemizedlist>
</para><para><bold> Changed a TO table while a CF transfer was underway and there are now problems. </bold></para><para><emphasis>Scenario:</emphasis></para><para>Using CFDP for a transfer and PDUs are transferring then commaned TO to flush (empty) the TO channel used for the transfer.</para><para><emphasis>Observables:</emphasis></para><para><itemizedlist>
<listitem><para>Possibility 1: No PDUs from CF anymore and Semaphore Count is 0 (for that channel). If this is zero and there are no PDUs then CF is wedged.</para></listitem><listitem><para>Possibility 2: One or more PDUs are missing and my Class 1 transfer is corrupted (or my Class 2 transfer required retries).</para></listitem><listitem><para>Possibility 3: The transfer completed but the CF Semaphore Count for that channel is no longer the max value of 4 when there are no transactions.</para></listitem><listitem><para>Possibility 4: Any of the above, together.</para></listitem></itemizedlist>
</para><para><emphasis>Root cause:</emphasis></para><para>Similar to the scenario above, flushing the TO channel being used for an active transfer will cause PDUs to be dropped but the CF throttling semaphore does not get updated. Recovery is similar to scenario above.</para><para><emphasis>Recovery:</emphasis></para><para>Next: <ref refid="cfstofaqs" kindref="compound">TO Application Frequently Asked Questions</ref> <linebreak/>
 Prev: <ref refid="cfstotbl" kindref="compound">TO Application Table Definitions</ref> </para>    </detaileddescription>
  </compounddef>
</doxygen>
